<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS进阶班笔记(四)</title>
      <link href="/2022/04/11/css-jin-jie-ban-bi-ji-si/"/>
      <url>/2022/04/11/css-jin-jie-ban-bi-ji-si/</url>
      
        <content type="html"><![CDATA[<h1 id="目录总览"><a href="#目录总览" class="headerlink" title="目录总览"></a>目录总览</h1><p><img src="https://img-blog.csdnimg.cn/7cd9a35cc5c6481e8e91aa91b473db5b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70"></p><h1 id="1、精灵图Sprites🔥"><a href="#1、精灵图Sprites🔥" class="headerlink" title="1、精灵图Sprites🔥"></a>1、精灵图Sprites🔥</h1><ul><li><p>为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术</p></li><li><p>核心原理：<strong>将网页中的一些小背景图像整合到一张大图中，这样服务器只需要一次请求就可以了</strong></p></li></ul><h2 id="1-1、精灵图的使用🔥"><a href="#1-1、精灵图的使用🔥" class="headerlink" title="1.1、精灵图的使用🔥"></a>1.1、精灵图的使用🔥</h2><p><strong>使用精灵图的核心：</strong></p><ol><li>精灵技术主要针对于背景图片的使用，就是把多个小背景图片整合到一张大图片中</li><li>这个大图片也称为 <code>sprites</code> 精灵图 或者 雪碧图</li><li>移动背景图片的位置，此时可以使用 <code>background-position</code></li><li>移动的距离就是这个目标图片的x和y坐标，注意网页中的坐标有所不同（x轴右边走是正值，左边走是负值，y轴下边走是正值，上边走是负值）</li><li>一般情况下都是往上往左移动，所以数值是负值</li><li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li></ol><p><strong>精灵图的优点很多，但是缺点也很明显</strong></p><ol><li>图片文件还是比较大的</li><li>图片本身放大和缩小会失真</li><li>一旦图片制作完毕想要更换非常复杂</li></ol><p><strong>此时，有一种技术的出现很好的解决了以上问题，就是字体图标 <code>iconfont</code></strong>   </p><h1 id="2、字体图标iconfont🔥"><a href="#2、字体图标iconfont🔥" class="headerlink" title="2、字体图标iconfont🔥"></a>2、字体图标iconfont🔥</h1><p>字体图标使用场景： 主要用于显示网页中通用、常用的一些小图标。<strong>展示的是图标，本质属于字体</strong></p><p>优点：</p><ol><li>轻量级：一个图标字体比一系列的图像要小，一旦字体加载了，图标就会马上渲染出来，减少了服务器的请求</li><li>灵活性：本质其实是文字，可以很随意的改变颜色，产生阴影，透明效果，旋转等</li><li>兼容性：几乎支持所有的浏览器</li></ol><p>步骤：</p><ol><li><p>字体图标的下载</p></li><li><p>字体图标的引入(引入到我们html页面中)</p></li><li><p>字体图标的追加(以后添加新的小图标)</p><h2 id="2-1、字体图标的下载🔥"><a href="#2-1、字体图标的下载🔥" class="headerlink" title="2.1、字体图标的下载🔥"></a>2.1、字体图标的下载🔥</h2></li><li><p>icomoon字库</p><p> 外网，不需要登录即可下载 <a href="http://icomoon.io/">http://icomoon.io</a></p><ol><li>点击 IcoMoon App</li><li>选择需要的图标</li><li>点击Generate Font</li><li>点击下载</li></ol></li><li><p>阿里iconfont字库</p></li></ol><p>免费，但是需要登录 <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a></p><h2 id="2-2、字体图标的引入🔥"><a href="#2-2、字体图标的引入🔥" class="headerlink" title="2.2、字体图标的引入🔥"></a>2.2、字体图标的引入🔥</h2><p>我们以 icomoon 字库网为例，将下载包解压，解压之后的文件如图：</p><p><img src="https://img-blog.csdnimg.cn/de6636aa2791418ea0b7687610ca311f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><ol><li>把下载包里面的 fonts 文件夹放入页面根目录下</li></ol><p><img src="https://img-blog.csdnimg.cn/d02f2b4a81ff4e2ba3badc003fc0bea9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><ol start="2"><li><p>在CSS样式中<strong>全局声明</strong>字体：简单理解把这些字体通过css引入到我们页面中</p><p> 右键打开 <mark>style.css</mark> ，这里我演示用notepad++打开，复制如图代码引入我们自己的CSS文件中</p></li></ol><p><img src="https://img-blog.csdnimg.cn/7a25356ff5d543679fc846c54b1566b5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><pre class=" language-css"><code class="language-css">&lt;style><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>     <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('fonts/icomoon.eot?7kkyc2')</span><span class="token punctuation">;</span>     <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('fonts/icomoon.eot?7kkyc2#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>,     <span class="token url">url('fonts/icomoon.ttf?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>,     <span class="token url">url('fonts/icomoon.woff?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>,     <span class="token url">url('fonts/icomoon.svg?7kkyc2#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>     <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre><ol start="3"><li><p>html标签内添加小图标</p><p> 我们打开解压文件中的 <mark>demo.html</mark> ，复制想要的图标，粘贴进我们的 <code>&lt;span&gt;&lt;/span&gt;</code> 标签中</p></li></ol><p><img src="https://img-blog.csdnimg.cn/b54ee91dd0b74854a8afcce8b1bf37fb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><ol start="4"><li>给标签定义字体</li></ol><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*span使用字体图标*/</span><span class="token selector">span </span><span class="token punctuation">{</span> <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"icomoon"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/d03f4bec9701491ea0ecc0bd69d89f5a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>注意：标签中的 <code>font-family</code> 的值和我们之前引入字体图标的 <code>font-family</code> 必须一样，这里均为 <mark>icomoon</mark></p><ol start="5"><li>完成，所以我们的整体代码为：</li></ol><pre class=" language-css"><code class="language-css">&lt;!DOCTYPE html>&lt;html lang=<span class="token string">"en"</span>>&lt;head>    &lt;meta charset=<span class="token string">"UTF-8"</span>>    &lt;meta http-equiv=<span class="token string">"X-UA-Compatible"</span> content=<span class="token string">"IE=edge"</span>>    &lt;meta name=<span class="token string">"viewport"</span> content=<span class="token string">"width=device-width, initial-scale=1.0"</span>>    &lt;title>Document&lt;/title>    &lt;style>        <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('fonts/icomoon.eot?7kkyc2')</span><span class="token punctuation">;</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('fonts/icomoon.eot?7kkyc2#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>, <span class="token url">url('fonts/icomoon.ttf?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>, <span class="token url">url('fonts/icomoon.woff?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>, <span class="token url">url('fonts/icomoon.svg?7kkyc2#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>            <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">span </span><span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"icomoon"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div>        &lt;span> &lt;/span>    &lt;/div>&lt;/body>&lt;/html></code></pre><p>测试效果为：</p><p><img src="https://img-blog.csdnimg.cn/fac058a088f2454ba22fcb0c99ee679d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="2-3、字体图标的追加🔥"><a href="#2-3、字体图标的追加🔥" class="headerlink" title="2.3、字体图标的追加🔥"></a>2.3、字体图标的追加🔥</h2><ul><li>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</li><li>以 <mark>icomoon字库</mark> 网为例，点击网站内 <code>import icons</code></li><li>把压缩包里面的 <mark>selection.json</mark> 重新上传，然后选中自己想要新的图标，重新下载压缩包，并替换原来的文件即可。</li></ul><p><img src="https://img-blog.csdnimg.cn/136b1488a4cb4233ad7ff77f5f9deb44.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="2-4、字体文件格式"><a href="#2-4、字体文件格式" class="headerlink" title="2.4、字体文件格式"></a>2.4、字体文件格式</h2><p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p><p><mark>.ttf</mark> 格式、<mark>.woff</mark> 格式、<mark>.eot</mark> 格式、<mark>.svg</mark> 格式，不同浏览器支持不同的格式</p><p><img src="https://img-blog.csdnimg.cn/ec0439450c03456483a147d5b0eafef5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="2-4、字体图标总结"><a href="#2-4、字体图标总结" class="headerlink" title="2.4、字体图标总结"></a>2.4、字体图标总结</h2><ol><li>如果遇到一些结构和样式比较简单的小图标，就用字体图标</li><li>如果遇到一些结构和样式复杂一点的小图片，就用精灵图<h1 id="3、界面样式🔥"><a href="#3、界面样式🔥" class="headerlink" title="3、界面样式🔥"></a>3、界面样式🔥</h1>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</li></ol><ul><li><p>更改用户的鼠标样式</p></li><li><p>表单轮廓</p></li><li><p>防止表单域拖拽</p><h2 id="3-1、鼠标样式cursor🔥"><a href="#3-1、鼠标样式cursor🔥" class="headerlink" title="3.1、鼠标样式cursor🔥"></a>3.1、鼠标样式cursor🔥</h2><p>鼠标样式<code>cursor</code></p></li><li><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>小白，默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><h2 id="3-2、轮廓线outline🔥"><a href="#3-2、轮廓线outline🔥" class="headerlink" title="3.2、轮廓线outline🔥"></a>3.2、轮廓线outline🔥</h2><p>轮廓线 <code>outline</code> ：</p><ul><li>给表单添加 <code>outline:0</code> ; 或者 <code>outline: none</code> ;样式后，就可以去掉默认的蓝色边框</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">input </span><span class="token punctuation">{</span>    <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-3、防止拖拽文本域"><a href="#3-3、防止拖拽文本域" class="headerlink" title="3.3、防止拖拽文本域"></a>3.3、防止拖拽文本域</h2><p>防止拖拽文本域 <code>resize</code></p><pre class=" language-css"><code class="language-css"><span class="token selector">textarea </span><span class="token punctuation">{</span>    <span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="4、vertical-align🔥"><a href="#4、vertical-align🔥" class="headerlink" title="4、vertical-align🔥"></a>4、vertical-align🔥</h1><p><code>vertical-align</code> :</p><ul><li>使用场景：经常用于设置<strong>图片</strong>或者<strong>表单（行内块元素）和文字垂直对齐</strong>。</li><li>官方解释：用于设置一个元素的垂直对齐方式，但是它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>有效</li></ul><pre class=" language-css"><code class="language-css"><span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline | top | middle | bottom</code></pre><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认，元素放置在父元素的基线上</td></tr><tr><td>top</td><td>把元素的顶端与行中最高元素的顶端对齐（顶线对齐）</td></tr><tr><td>middle</td><td>把此元素放置在父元素的中部（中线对齐）</td></tr><tr><td>bottom</td><td>把元素的顶端与行中最低的元素的顶端对齐（底线对齐）</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/2f7832a64527405181bd3edbcd3a736a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="4-1、图片、表单和文字对齐🔥"><a href="#4-1、图片、表单和文字对齐🔥" class="headerlink" title="4.1、图片、表单和文字对齐🔥"></a>4.1、图片、表单和文字对齐🔥</h2><p>图片、表单都属于行内块元素，默认的 <mark>vertical-align</mark> 是基线对齐。</p><p><img src="https://img-blog.csdnimg.cn/159dbd0d98f941f5b17eb713341d3c64.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>此时可以给图片、表单这些行内块元素的 <mark>vertical-align</mark> 属性设置为 <code>middle</code> 就可以让文字和图片垂直居中对齐了。</p><h2 id="4-2、-图片底侧空白缝隙解决🔥"><a href="#4-2、-图片底侧空白缝隙解决🔥" class="headerlink" title="4.2、 图片底侧空白缝隙解决🔥"></a>4.2、 图片底侧空白缝隙解决🔥</h2><ul><li>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐（给图片加边框就可以看见）</li></ul><p><img src="https://img-blog.csdnimg.cn/6ab28389075f4478a70a11cae3e5a58e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>主要解决办法有两种：</p><ol><li><p>给图片添加 <code>vertical-align : middle | top |bottom</code> 等</p></li><li><p>把图片转换为块级元素 <code>display:block</code> ;，因为块级元素不会有<code>vertical-align</code> 属性</p></li></ol><h1 id="5、溢出文字省略显示🔥"><a href="#5、溢出文字省略显示🔥" class="headerlink" title="5、溢出文字省略显示🔥"></a>5、溢出文字省略显示🔥</h1><h2 id="5-1、单行文本溢出省略号显示🔥"><a href="#5-1、单行文本溢出省略号显示🔥" class="headerlink" title="5.1、单行文本溢出省略号显示🔥"></a>5.1、单行文本溢出省略号显示🔥</h2><p>必须满足三个条件：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 1.先强制一行内显示文本 */</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*默认 normal 是自动换行，nowrap是强制一行显示文本*/</span><span class="token comment" spellcheck="true">/* 2.超出的部分隐藏 */</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 3.文字用省略号替代超出的部分*/</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*ellipsis:省略号*/</span></code></pre><h2 id="5-2、多行文本溢出显示省略号显示"><a href="#5-2、多行文本溢出显示省略号显示" class="headerlink" title="5.2、多行文本溢出显示省略号显示"></a>5.2、多行文本溢出显示省略号显示</h2><p>多行文本溢出显示省略号，有较大的兼容性问题，适合于webKit浏览器或移动端(移动端大部分是webKit内核)</p><pre class=" language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 弹性伸缩盒子模型显示 */</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 限制在一个块元素显示的文本的行数 */</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span><span class="token property">-webkit-box-orient</span> <span class="token punctuation">:</span> vertical<span class="token punctuation">;</span></code></pre><p>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</p><h1 id="6、常见布局技巧🔥"><a href="#6、常见布局技巧🔥" class="headerlink" title="6、常见布局技巧🔥"></a>6、常见布局技巧🔥</h1><h2 id="6-1、margin负值的运用🔥"><a href="#6-1、margin负值的运用🔥" class="headerlink" title="6.1、margin负值的运用🔥"></a>6.1、margin负值的运用🔥</h2><ul><li>两个盒子加边框1px，浮动，贴紧会出现 1 + 1 = 2px</li><li>给右边盒子添加margin-left: -1px</li><li>正数向右边走，负数向左边走</li></ul><p><img src="https://img-blog.csdnimg.cn/49161c07333346c990eab8dca70b4425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>当我们有多个盒子时的解决办法：</p><p><img src="https://img-blog.csdnimg.cn/8bf8e78f78bf4dfa89950aa8dd76bfd6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><ol><li>让每个盒子 <code>margin</code> 往左侧移动 <code>-1px</code> 正好压住相邻盒子边框</li><li>鼠标经过某个盒子的时候，提高当前盒子的层级即可<ol><li>如果没有定位，则加相对定位(保留位置)</li><li>如果有定位，则加 <code>z-index</code></li></ol></li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;style>    ul li </span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">11</span>px    <span class="token punctuation">}</span>        <span class="token selector">ul li<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span> &lt;/style>&lt;/head>&lt;body>    &lt;ul>        &lt;li>&lt;/li>        &lt;li>&lt;/li>        &lt;li>&lt;/li>        &lt;li>&lt;/li>        &lt;li>&lt;/li>        &lt;li>&lt;/li>    &lt;/ul>&lt;/body></code></pre><p><img src="https://img-blog.csdnimg.cn/3359f694ecc94214a1a4530afdbefe2e.gif#pic_center"></p><h2 id="6-2、文字围绕浮动元素🔥"><a href="#6-2、文字围绕浮动元素🔥" class="headerlink" title="6.2、文字围绕浮动元素🔥"></a>6.2、文字围绕浮动元素🔥</h2><p>巧妙运用浮动元素不会压住文字的特性</p><p><img src="https://img-blog.csdnimg.cn/71377b1f43f34ff1aaf153cf1dceb0b6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="6-3、行内块巧妙运用🔥"><a href="#6-3、行内块巧妙运用🔥" class="headerlink" title="6.3、行内块巧妙运用🔥"></a>6.3、行内块巧妙运用🔥</h2><p><img src="https://img-blog.csdnimg.cn/7d1aaaf6a6d549e7b1a90c25447fb370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>页码在页面中间显示：</p><ol><li><p>把这些链接盒子转换为行内块，之后给父级指定 <code>text-align: center</code></p></li><li><p>利用行内块元素中间有缝隙，并且给父级添加 <code>text-align: center</code> ，行内块元素会水平居中</p></li></ol><h2 id="6-4、三角的巧妙运用🔥"><a href="#6-4、三角的巧妙运用🔥" class="headerlink" title="6.4、三角的巧妙运用🔥"></a>6.4、三角的巧妙运用🔥</h2><p>三角的做法 ：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* border: 10px solid pink; */</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid pink<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid plum<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid powderblue<span class="token punctuation">;</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid green<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>可以通过改变边框的大小来实现不同的三角</p><p>例如京东秒杀价格框的做法：</p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>            * </span><span class="token punctuation">{</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 1.只保留右边边框有颜色 */</span>                <span class="token property">border-color</span><span class="token punctuation">:</span> transparent red transparent transparent<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 2.样式都是solid */</span>                <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 3.上边框宽度要大，右边框宽度稍小，其余的边框该为0 */</span>                <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">50</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.price</span> </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">160</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.miaosha</span> </span><span class="token punctuation">{</span>                <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>                <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span>                <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>                <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.miaosha</span> i </span><span class="token punctuation">{</span>                <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>                <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">border-color</span><span class="token punctuation">:</span> transparent <span class="token hexcode">#fff</span> transparent transparent<span class="token punctuation">;</span>                <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>                <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">24</span>px <span class="token number">10</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.origin</span> </span><span class="token punctuation">{</span>                <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>                <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>                <span class="token property">text-decoration</span><span class="token punctuation">:</span> line-through<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        &lt;/style>    &lt;/head>    &lt;body>        &lt;div class=<span class="token string">"box1"</span>>&lt;/div>        &lt;div class=<span class="token string">"price"</span>>            &lt;span class=<span class="token string">"miaosha"</span>>                ￥<span class="token number">1610</span>                &lt;i>&lt;/i>            &lt;/span>            &lt;span class=<span class="token string">"origin"</span>>￥<span class="token number">5610</span>&lt;/span>        &lt;/div>    &lt;/body></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础班笔记(三)</title>
      <link href="/2022/04/10/css-ji-chu-ban-bi-ji-san/"/>
      <url>/2022/04/10/css-ji-chu-ban-bi-ji-san/</url>
      
        <content type="html"><![CDATA[<h1 id="目录总览"><a href="#目录总览" class="headerlink" title="目录总览"></a>目录总览</h1><p><img src="https://img-blog.csdnimg.cn/9ad8d0ce9563431ebda6267b0f22bb09.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h1 id="1、新增选择器🔥"><a href="#1、新增选择器🔥" class="headerlink" title="1、新增选择器🔥"></a>1、新增选择器🔥</h1><p>CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择目标元素。</p><ul><li>属性选择器</li><li>结构伪类选择器</li><li>伪元素选择器<h2 id="1-1、属性选择器🔥"><a href="#1-1、属性选择器🔥" class="headerlink" title="1.1、属性选择器🔥"></a>1.1、属性选择器🔥</h2></li><li>属性选择器可以根据元素特定的属性来选择元素，<strong>这样就可以不用借助于类或者id选择器</strong>。</li></ul><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有att属性的E元素</td></tr><tr><td>E[att=“val”]</td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E[att^=“val”]</td><td>匹配具有att属性且值以val开头的E元素</td></tr><tr><td>E[att$=“val”]</td><td>匹配具有att属性且值以val结尾的E元素</td></tr><tr><td>E[att*=“val”]</td><td>匹配具有att属性且值中含有val的E元素</td></tr></tbody></table><ol><li>利用属性选择器就可以不借助于类或者id选择器</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;style>        input<span class="token attribute">[value]</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;!-- <span class="token number">1.</span>利用属性选择器可以不借助类或者id选择器 -->    &lt;input type=<span class="token string">"text"</span> value=<span class="token string">"请输入用户名"</span>>    &lt;input type=<span class="token string">"text"</span>>&lt;/body></code></pre><ol start="2"><li>属性选择器还可以选择 属性 = 值的某些元素</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;style>        input<span class="token attribute">[type=text]</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;!-- <span class="token number">2.</span>属性选择器还可以选择 属性=值的某些元素 -->    &lt;input type=<span class="token string">"text"</span> name=<span class="token string">""</span> id=<span class="token string">""</span>>    &lt;input type=<span class="token string">"password"</span> name=<span class="token string">""</span> id=<span class="token string">""</span>>&lt;/body></code></pre><ol start="3"><li>属性选择器可以选择属性值开头的某些元素</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>            &lt;style>            div<span class="token attribute">[class^=icon]</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择首先是div，然后具有class属性，并且是icon开头的值 */</span>    &lt;/style>&lt;/head>&lt;body>    &lt;!-- <span class="token number">3.</span>属性选择器可以选择属性值开头的某些元素 -->    &lt;div class=<span class="token string">"icon1"</span>>小图标<span class="token number">1</span>&lt;/div>    &lt;div class=<span class="token string">"icon2"</span>>小图标<span class="token number">2</span>&lt;/div>    &lt;div class=<span class="token string">"icon3"</span>>小图标<span class="token number">3</span>&lt;/div>    &lt;div class=<span class="token string">"icon4"</span>>小图标<span class="token number">4</span>&lt;/div>&lt;/body></code></pre><ol start="4"><li>属性选择器可以选择属性值结尾的某些元素</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>   &lt;style>        section<span class="token attribute">[class$=data]</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;!-- <span class="token number">4.</span>属性选择器可以选择属性值结尾的某些元素 -->    &lt;section class=<span class="token string">"icon1-data"</span>><span class="token number">1</span>&lt;/section>    &lt;section class=<span class="token string">"icon2-data"</span>><span class="token number">2</span>&lt;/section>    &lt;section class=<span class="token string">"icon3-data"</span>><span class="token number">3</span>&lt;/section>&lt;/body></code></pre><p><mark>注意</mark>：类选择器，属性选择器，伪类选择器，权重为10</p><h2 id="1-2、结构伪类选择器🔥"><a href="#1-2、结构伪类选择器🔥" class="headerlink" title="1.2、结构伪类选择器🔥"></a>1.2、结构伪类选择器🔥</h2><ul><li>结构伪类选择器主要根据<strong>文档结构</strong>来选择元素</li><li><mark>常用于根据父级选择器选择里面的子元素</mark></li></ul><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个子元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个E元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中的第n个子元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td>指定类型E的第n个</td></tr></tbody></table><p><strong>①、E:first-child 和E:last-child</strong></p><pre class=" language-css"><code class="language-css">&lt;head>    &lt;style>        <span class="token comment" spellcheck="true">/* 1.选择ul里面的第一个孩子 小li */</span>                <span class="token selector">ul li<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 2.选择ul里面的最后一个孩子 小li */</span>                <span class="token selector">ul li<span class="token pseudo-class">:last-child</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;ul>        &lt;li>我是第<span class="token number">1</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">2</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">3</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">4</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">5</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">6</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">7</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">8</span>个孩子&lt;/li>    &lt;/ul></code></pre><p><strong>②、nth-child(n)</strong></p><ul><li><code>nth-child(n)</code><mark>选择某个父级元素的一个或多个特定的子元素（重点）</mark><ol><li>n可以是<strong>数字，关键字和公式</strong></li><li>n如果是数字，就是选择第n个子元素，里面数字从1开始</li><li>n可以是关键字： <strong>even</strong> 偶数， <strong>odd</strong> 奇数</li><li>n可以是公式：常见的公式如下（如果n是公式，则从0开始计算，但是第0个元素或者超出了元素的个数会被忽略）</li></ol></li></ul><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数（等价于even）</td></tr><tr><td>2n+1</td><td>奇数（等价于odd）</td></tr><tr><td>5n</td><td>5 10 15 …（5的倍数）</td></tr><tr><td>n+5</td><td>从第5个开始（包含第五个）到最后</td></tr><tr><td>-n+5</td><td>前5个（包含第5个）</td></tr></tbody></table><pre class=" language-css"><code class="language-css">&lt;head>    &lt;style>        <span class="token comment" spellcheck="true">/* 选择ul里面的第2个孩子 小li */</span>        <span class="token selector">ul li<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;ul>        &lt;li>我是第<span class="token number">1</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">2</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">3</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">4</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">5</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">6</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">7</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">8</span>个孩子&lt;/li>    &lt;/ul>&lt;/body></code></pre><pre class=" language-css"><code class="language-css">&lt;style>        <span class="token comment" spellcheck="true">/* 1.把所有的偶数 even的孩子选出来 */</span>        <span class="token selector">ul li<span class="token pseudo-class">:nth-child(even)</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 2.把所有的奇数 odd的孩子选出来 */</span>        <span class="token selector">ul li<span class="token pseudo-class">:nth-child(odd)</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 3.nth-child(n) 从0开始 每次加1 往后面计算  这里面必须是n 不能是其他的字母 选择了所有的孩子*/</span>        <span class="token comment" spellcheck="true">/* ol li:nth-child(n) {            background-color: pink;        } */</span>        <span class="token comment" spellcheck="true">/* 4.nth-child(2n)母选择了所有的偶数孩子 等价于 even*/</span>        <span class="token comment" spellcheck="true">/* ol li:nth-child(2n) {            background-color: pink;        }        ol li:nth-child(2n+1) {            background-color: skyblue;        } */</span>        <span class="token comment" spellcheck="true">/* ol li:nth-child(n+3) {            background-color: pink;        } */</span>        <span class="token selector">ol li<span class="token pseudo-class">:nth-child(-n+3)</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;ul>        &lt;li>我是第<span class="token number">1</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">2</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">3</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">4</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">5</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">6</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">7</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">8</span>个孩子&lt;/li>    &lt;/ul>    &lt;ol>        &lt;li>我是第<span class="token number">1</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">2</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">3</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">4</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">5</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">6</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">7</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">8</span>个孩子&lt;/li>    &lt;/ol>&lt;/body></code></pre><p><strong>③、E:first-of-type和E:last-of-type</strong></p><table><thead><tr><th>E:first-of-type</th><th>指定类型E的第一个</th></tr></thead><tbody><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr></tbody></table><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>    &lt;style>        ul li<span class="token pseudo-class">:first-of-type</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">ul li<span class="token pseudo-class">:last-of-type</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">ul li<span class="token pseudo-class">:nth-last-child(2)</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;ul>        &lt;li>我是第<span class="token number">1</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">2</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">3</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">4</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">5</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">6</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">7</span>个孩子&lt;/li>        &lt;li>我是第<span class="token number">8</span>个孩子&lt;/li>    &lt;/ul>&lt;/body></code></pre><p><strong>④、区别</strong></p><ul><li><code>nth-child(n)</code>和<code>nth-of-type(n)</code>区别?</li></ul><ol><li><strong>nth-child 对父元素里面所有孩子排序选择(序号是固定的)，先找到第n个孩子，然后看看是否和E匹配</strong></li><li><strong>nth-of-type 对父元素里面指定子元素进行排序选择，先去匹配E,然后再根据E 找第n个孩子</strong></li></ol><p><strong>⑤、小结</strong></p><ol><li>结构伪类选择器一般用于选择父级里面的第几个孩子</li><li><mark>nth-child</mark> 对父元素里面所有孩子排序选择（序号是固定的），先找到第n个孩子，然后看看是否和E匹配</li><li><mark>nth-of-type</mark> 对父元素里面指定子元素进行排序选择，先去匹配E，然后再根据E找第n个孩子</li><li>关于<mark>nth-child(n)</mark>， 我们要知道n是从0开始计算的，要记住常用的公式</li><li>如果是无序列表，我们肯定用 <mark>nth-child</mark> 更多</li><li>类选择器，属性选择器，伪类选择器，权重为10</li></ol><h2 id="1-3、伪元素选择器🔥"><a href="#1-3、伪元素选择器🔥" class="headerlink" title="1.3、伪元素选择器🔥"></a>1.3、伪元素选择器🔥</h2><ul><li>伪元素选择器可以帮我们利用CSS<strong>创建新标签元素</strong>，而不需要HTML标签，从而简化HTML结构</li></ul><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><p>注意：</p><ol><li><p>before 和 after 创建一个元素，但是是属于<strong>行内元素</strong></p><ul><li>before和after 都是一个盒子，都作为父元素的孩子</li></ul></li><li><p>新创建的这个元素在文档树中是找不到的，所以我们称为<strong>伪元素</strong></p></li><li><p>语法：</p></li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">element<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><ol start="4"><li>before是放在内容的前面，after是放在了内容的后面</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>    &lt;style>        div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* div::before 权重是2 */</span>        <span class="token selector">div<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 这个content是必须要写的 */</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'我'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">div<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'小猪佩奇'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div>        是    &lt;/div></code></pre><ul><li><p>before 和 after 必须有 <strong>content</strong> 属性</p></li><li><p>before 在父元素内容的前面创建元素 ，after 在父元素内容的后面插入元素</p></li><li><p><strong>伪元素选择器</strong> 和 <strong>标签选择器</strong> 一样，权重为1</p><h1 id="2、CSS3盒子模型🔥"><a href="#2、CSS3盒子模型🔥" class="headerlink" title="2、CSS3盒子模型🔥"></a>2、CSS3盒子模型🔥</h1></li><li><p>CSS3 中可以通过 <code>box-sizing</code> 来指定盒模型</p></li><li><p>有2个值：这样我们计算盒子大小的方式就发生了改变</p><ul><li><code>content-box</code></li><li><code>border-box</code></li></ul></li></ul><h2 id="2-1、content-box"><a href="#2-1、content-box" class="headerlink" title="2.1、content-box"></a>2.1、content-box</h2><pre class=" language-css"><code class="language-css"><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span></code></pre><ul><li><p>第一种情况是 CSS 的盒子模型，盒子大小为 width + padding + border</p></li><li><p>此种情况盒子大小为 宽度 + 内边距 + 边框，这也是我们之前写盒子所默认的</p><h2 id="2-2、border-box🔥"><a href="#2-2、border-box🔥" class="headerlink" title="2.2、border-box🔥"></a>2.2、border-box🔥</h2><pre class=" language-css"><code class="language-css"><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></code></pre></li><li><p>第二种情况是 CSS3 的盒子模型，盒子大小为 width</p></li><li><p>此种情况盒子大小为 宽度，不包括内边距和边框，这样 padding 和 border 就不会撑大盒子了(前提是 padding 和 border 不会超过 width 宽度)</p></li><li><p>我们可以在以后的 css 通配符中添加 CSS3 盒子模型</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*  这样的话padding和border就不会撑大盒子了 */</span><span class="token punctuation">}</span></code></pre><h1 id="3、C3其他特性"><a href="#3、C3其他特性" class="headerlink" title="3、C3其他特性"></a>3、C3其他特性</h1><h2 id="3-1、滤镜filter"><a href="#3-1、滤镜filter" class="headerlink" title="3.1、滤镜filter"></a>3.1、滤镜filter</h2><ul><li><p><code>filter</code>: CSS属性将模糊或颜色偏移等图形效果应用于元素(图片变模糊)</p></li><li><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">filter</span><span class="token punctuation">:</span> 函数<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>模糊处理：<code>blur</code>,数值越大越模糊</p></li></ul><p><img src="https://img-blog.csdnimg.cn/36abbf8cd27c45278bbb1abaa318154b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>   &lt;style>        img </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* blur 是一个函数，小括号里面的数值越大，图片越模糊，注意数值要加px单位 */</span>            <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">5</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;img src=<span class="token string">"images/pink.jpg"</span> alt=<span class="token string">""</span>>&lt;/body></code></pre><h2 id="3-2、calc函数"><a href="#3-2、calc函数" class="headerlink" title="3.2、calc函数"></a>3.2、calc函数</h2><ul><li><p><code>calc()</code> : 此CSS函数让你在声明CSS属性值时执行一些计算（计算盒子宽度 <mark>width: calc</mark> 函数）</p><pre class=" language-css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>括号里面可以使用 + - * / 来进行计算</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>    &lt;style>        <span class="token class">.father</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector"><span class="token class">.son</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* width: 150px; */</span>            <span class="token comment" spellcheck="true">/* son盒子和父亲一样宽，都是100%，son盒子-30px */</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span>-<span class="token number">30</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;!-- 需求：我们的子盒子宽度永远比父盒子小<span class="token number">30</span>像素 -->    &lt;div class=<span class="token string">"father"</span>>        &lt;div class=<span class="token string">"son"</span>>&lt;/div>    &lt;/div>&lt;/body></code></pre><h2 id="3-3、transition过渡🔥"><a href="#3-3、transition过渡🔥" class="headerlink" title="3.3、transition过渡🔥"></a>3.3、transition过渡🔥</h2><ul><li><p><code>过渡（transition)</code> 是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果</p></li><li><p>过渡动画：是从一个状态渐渐的过渡到另外一个状态</p></li><li><p><strong>过渡经常和：hover一起搭配使用</strong></p></li></ul><pre class=" language-css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> 要过渡的属性 花费时间 运动曲线 何时开始</code></pre><ol><li><strong>要过渡的属性</strong> ：想要变化的 CSS 属性，宽度高度，背景颜色，内外边距都可以，如果想要所有的属性都变化过渡，写一个all就可以。</li><li><strong>花费时间</strong> ：单位是秒(必须写单位) 比如0.5s</li><li><strong>运动曲线</strong> ：默认是ease(可以省略)</li><li><strong>何时开始</strong> ：单位是秒(必须写单位)，可以设置延迟触发事件，默认是0s(可以省略)</li></ol><p><img src="https://img-blog.csdnimg.cn/d43d923b09644f668bbedad8b05c10b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>过渡的口诀：<mark>谁做过渡给谁加</mark></p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>   &lt;style>        div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* transition: 变化的属性 花费时间 运动曲线 何时开始; */</span>            <span class="token comment" spellcheck="true">/* 如果想要写多个属性，利用逗号进行分割 */</span>            <span class="token property">transition</span><span class="token punctuation">:</span> width <span class="token number">0.5</span>s, height <span class="token number">0.5</span>s<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 如果想要多个属性都变化，属性写all就可以了 */</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.5</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div>&lt;/div>&lt;/body></code></pre><p><img src="https://img-blog.csdnimg.cn/39577c89a4ed4f03968fe0927142901d.gif#pic_center"></p><h2 id="3-4、2D转换🔥"><a href="#3-4、2D转换🔥" class="headerlink" title="3.4、2D转换🔥"></a>3.4、2D转换🔥</h2><p><code>转换(transform)</code>是CSS3中具有颠覆性的特征之一，可以实现元素的位移，旋转，缩放等效果</p><ul><li>移动：translate</li><li>旋转：rotate</li><li>缩放：scale</li></ul><p>二维坐标系：</p><p>2D转换是改变标签在二维平面上的位置和形状的一种技术，先来学习二维坐标系</p><p><img src="https://img-blog.csdnimg.cn/b00b7fe0cb594342ad86ea06bf2b0123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p><strong>①移动translate🔥</strong></p><p>2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，<strong>类似</strong>定位。</p><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>x,y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 或者分开写 */</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateX</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateY</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span>px,<span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 如果只移动X轴           */</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span>px,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>定义2D转换中的移动，沿着X和Y轴移动元素</li><li><mark>translate</mark> 最大的优点：不会影响到其他元素的位置</li><li><mark>translate</mark> 中的百分比单位是相对于自身元素的<ul><li><code>translate:(50%,50%)</code>;</li></ul></li><li>对行内标签没有效果</li></ol><p><strong>②旋转rotate🔥</strong></p><p>2D旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转。</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>度数<span class="token punctuation">)</span></code></pre><ol><li><mark>rotate</mark> 里面跟度数，单位是 deg 比如 rotate(45deg)</li><li><strong>角度为正时，顺时针，负时，为逆时针</strong></li><li>默认旋转的中心点是元素的中心点</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>   &lt;style>        img </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid pink<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 过渡写到本身，谁做动画给谁加 */</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;img src=<span class="token string">"#"</span> alt=<span class="token string">""</span>>&lt;/body></code></pre><p><strong>③旋转中心点transform-origin🔥</strong></p><p>2D转换中心点：我们可以设置元素转换的中心点 <mark>transform-origin</mark></p><pre class=" language-css"><code class="language-css"><span class="token property">transform-origin</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span></code></pre><ol><li>注意后面的参数x 和 y 用空格隔开</li><li>x y <strong>默认</strong>转换的中心点是元素的中心点(50% 50%)</li><li>还可以给x y 设置 像素或者方位名词(top bottom left right center)</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>   &lt;style>        div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 1.可以跟方位名词 ,以左下角为轴进行旋转*/</span>            <span class="token property">transform-origin</span><span class="token punctuation">:</span> left bottom<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div>&lt;/div>&lt;/body></code></pre><p><img src="https://img-blog.csdnimg.cn/878efeeac08f4722b5d0e99abffe72b1.gif#pic_center"></p><h2 id="3-5、缩放scale🔥"><a href="#3-5、缩放scale🔥" class="headerlink" title="3.5、缩放scale🔥"></a>3.5、缩放scale🔥</h2><p>缩放 ：<code>scale</code>,只要给元素添加上了这个属性就能控制它放大还是缩小</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>x,y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>注意其中的x和y用逗号分割</li><li><code>transform:scale(1,1)</code>: 宽和高都放大一倍，相当于没有放大</li><li><code>transform:scale(2,2)</code>：宽和高都放大了2倍</li><li><code>transform:scale(2)</code>：只写一个参数，第二个参数则和第一个参数一样，相当于 <code>scale(2,2)</code></li><li><code>transform:scale(0.5,0.5)</code>：缩小</li><li>sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>   &lt;style>        div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 1.里面写的数字不跟单位 就是倍数的意思 1就是1倍，2就是2倍 */</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div>&lt;/div>&lt;/body></code></pre><p><img src="https://img-blog.csdnimg.cn/8ed7936823c1439a83c0a4e3eb729e8c.gif#pic_center"></p><h2 id="3-6、2D转换综合写法🔥"><a href="#3-6、2D转换综合写法🔥" class="headerlink" title="3.6、2D转换综合写法🔥"></a>3.6、2D转换综合写法🔥</h2><ol><li>同时使用多个转换，其格式为: transform:translate() rotate() scale() <mark>移动-旋转-缩放</mark></li><li>其顺序会影响转换的效果(先旋转会改变坐标轴方向)</li><li><strong>当我们同时有位移和其他属性时候，记得要将位移放到最前面</strong></li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>      &lt;style>        div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.5</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 我们同时有位移和其他属性，我们需要把位移放到最前面 位移，旋转，缩放*/</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">150</span>px, <span class="token number">50</span>px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div>&lt;/div>&lt;/body></code></pre><p><img src="https://img-blog.csdnimg.cn/852dd70d190649ac99b84d307c5fdec0.gif#pic_center"></p><h2 id="3-7、2D转换总结🔥"><a href="#3-7、2D转换总结🔥" class="headerlink" title="3.7、2D转换总结🔥"></a>3.7、2D转换总结🔥</h2><ul><li>转换transform 我们简单理解就是变形 有2D 和 3D 之分</li><li>我们暂且学了三个 分别是 位移 旋转 和 缩放</li><li>2D 移动 translate(x, y) 最大的优势是不影响其他盒子， 里面参数用%，是相对于自身宽度和高度来计算的</li><li>可以分开写比如 translateX(x) 和 translateY(y)</li><li>2D 旋转 rotate(度数) 可以实现旋转元素 度数的单位是deg</li><li>2D 缩放 sacle(x,y) 里面参数是数字 不跟单位 可以是小数 最大的优势 不影响其他盒子</li><li>设置转换中心点 transform-origin : x y; 参数可以百分比、像素或者是方位名词</li><li><strong>当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前</strong><h1 id="4、C3动画🔥"><a href="#4、C3动画🔥" class="headerlink" title="4、C3动画🔥"></a>4、C3动画🔥</h1>动画 <mark>animation</mark> 是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</li></ul><p>相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果。</p><p>制作动画分为两步：</p><ul><li>先定义动画</li><li>再使用（调用）动画<h2 id="4-1、用keyframs定义动画🔥"><a href="#4-1、用keyframs定义动画🔥" class="headerlink" title="4.1、用keyframs定义动画🔥"></a>4.1、用keyframs定义动画🔥</h2>用 <mark>keyframes</mark> 定义动画（类似定义类选择器）</li></ul><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>   <span class="token selector">0%</span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token selector">100%</span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</li><li>在 <mark>@keyframes</mark> 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</li><li>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。<h2 id="4-2、使用动画🔥"><a href="#4-2、使用动画🔥" class="headerlink" title="4.2、使用动画🔥"></a>4.2、使用动画🔥</h2></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>       <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>       <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* 调用动画 */</span>       <span class="token property">animation-name</span><span class="token punctuation">:</span> 动画名称<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* 持续时间 */</span>       <span class="token property">animation-duration</span><span class="token punctuation">:</span> 持续时间<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-3、示例"><a href="#4-3、示例" class="headerlink" title="4.3、示例"></a>4.3、示例</h2><p>需求：我们想页面一打开，一个盒子就从左边走到右边</p><pre class=" language-css"><code class="language-css">&lt;head>    &lt;style>        <span class="token comment" spellcheck="true">/* 需求：我们想页面一打开，一个盒子就从左边走到右边 */</span>        <span class="token comment" spellcheck="true">/* 1.定义动画 */</span>                <span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 开始状态 */</span>            <span class="token selector">0% </span><span class="token punctuation">{</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/* 结束状态 */</span>            <span class="token selector">100% </span><span class="token punctuation">{</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">1000</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 使用动画 */</span>            <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 持续时间 */</span>            <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div>&lt;/div>&lt;/body></code></pre><blockquote><p>from to 语法</p></blockquote><pre class=" language-css"><code class="language-css">&lt;head>     &lt;style>        <span class="token comment" spellcheck="true">/* 需求：我们想页面一打开，一个盒子就从左边走到右边 */</span>        <span class="token comment" spellcheck="true">/* 1.定义动画 */</span>                <span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>            <span class="token selector">from </span><span class="token punctuation">{</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">to </span><span class="token punctuation">{</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">1000</span>px, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 使用动画 */</span>            <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 持续时间 */</span>            <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;div>&lt;/div>&lt;/body></code></pre><h2 id="4-4、动画常用属性🔥"><a href="#4-4、动画常用属性🔥" class="headerlink" title="4.4、动画常用属性🔥"></a>4.4、动画常用属性🔥</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了animation-play-state属性。</td></tr><tr><td>animation-name</td><td>规定@keyframes动画的名称。（必须的）</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线，默认是“ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始，默认是0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数，默认是1，还有infinite</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是”running”,还有”paused”。</td></tr><tr><td>animation-fill-mode</td><td>规定动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table><h2 id="4-5、动画简写属性🔥"><a href="#4-5、动画简写属性🔥" class="headerlink" title="4.5、动画简写属性🔥"></a>4.5、动画简写属性🔥</h2><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* animation：动画名称 持续时间 运动曲线  何时开始  播放次数  是否反方向  动画起始或者结束的状态 */</span><span class="token property">animation</span><span class="token punctuation">:</span> myfirst <span class="token number">5</span>s linear <span class="token number">2</span>s infinite alternate<span class="token punctuation">;</span></code></pre><ul><li>简写属性里面不包含 <mark>animation-play-state</mark>   </li><li>暂停动画：<mark>animation-play-state: puased</mark>; 经常和鼠标经过等其他配合使用</li><li>想要动画走回来 ，而不是直接跳回来：<mark>animation-direction: alternate</mark></li><li>盒子动画结束后，停在结束位置： <mark>animation-fill-mode : forwards</mark></li></ul><h2 id="4-6、速度曲线细节"><a href="#4-6、速度曲线细节" class="headerlink" title="4.6、速度曲线细节"></a>4.6、速度曲线细节</h2><ul><li><code>animation-timing-function</code> ：规定动画的速度曲线，默认是“ease”</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。匀速</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h1 id="5、3D转换🔥"><a href="#5、3D转换🔥" class="headerlink" title="5、3D转换🔥"></a>5、3D转换🔥</h1><p>我们生活的环境是3D的，照片就是3D物体在2D平面呈现的例子.</p><p>3D转换的特点：</p><ul><li>近大远小。</li><li>物体后面遮挡不可见</li></ul><p>当我们在网页上构建3D效果的时候参考这些特点就能产出3D效果。</p><h2 id="5-1、三维坐标系🔥"><a href="#5-1、三维坐标系🔥" class="headerlink" title="5.1、三维坐标系🔥"></a>5.1、三维坐标系🔥</h2><p>三维坐标系其实就是指立体空间，立体空间是由3个轴共同组成的。</p><p><img src="https://img-blog.csdnimg.cn/8b3f76c171604b64975e75c1e3d7367b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><ul><li>x轴：水平向右 <strong>注意： x 右边是正值，左边是负值</strong></li><li>y轴：垂直向下 <strong>注意： y 下面是正值，上面是负值</strong></li><li>z轴：垂直屏幕 <strong>注意： 往外面是正值，往里面是负值</strong></li></ul><p>3D 转换我们主要学习工作中最常用的 3D 位移 和 3D 旋转</p><h2 id="5-2、3D位移translate3d🔥"><a href="#5-2、3D位移translate3d🔥" class="headerlink" title="5.2、3D位移translate3d🔥"></a>5.2、3D位移translate3d🔥</h2><p>3D移动在2D移动的基础上多加了一个可以移动的方向，就是z轴方向</p><ul><li><code>translform:translateX(100px)</code>：仅仅是在x轴上移动</li><li><code>translform:translateY(100px)</code>：仅仅是在Y轴上移动</li><li><code>translform:translateZ(100px)</code>：仅仅是在Z轴上移动（注意：* translateZ一般用px单位）</li><li><code>transform:translate3d(x,y,z)</code>：其中 x、y、z 分别指要移动的轴的方向的距离</li></ul><p>因为z轴是垂直屏幕，由里指向外面，所以默认是看不到元素在z轴的方向上移动</p><h2 id="5-3、透视perspective🔥"><a href="#5-3、透视perspective🔥" class="headerlink" title="5.3、透视perspective🔥"></a>5.3、透视perspective🔥</h2><p><strong>透视</strong> ：在2D平面产生近大远小视觉立体，但是只是效果二维的</p><ul><li>如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）</li><li>模拟人类的视觉位置，可认为安排一只眼睛去看</li><li>透视我们也称为视距：视距就是人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li><li>透视的单位是像素</li></ul><p><strong>透视写在被观察元素的父盒子上面的</strong></p><p><img src="https://img-blog.csdnimg.cn/07b834ed67b14d038613fdb993b161e3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>d：就是视距，视距就是一个距离人的眼睛到屏幕的距离。</p><p>z：就是 z轴，物体距离屏幕的距离，z轴越大（正值） 我们看到的物体就越大</p><p><strong>①translateZ🔥</strong></p><ul><li>translform:translateZ(100px)：仅仅是在Z轴上移动。</li><li>有了透视，就能看到translateZ 引起的变化了<ul><li>translateZ：近大远小</li><li>translateZ：往外是正值</li><li>translateZ：往里是负值</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/fc804561fd5d4f6f892404c3df05dde6.gif#pic_center"></p><h2 id="5-4、3D旋转rotate3d🔥"><a href="#5-4、3D旋转rotate3d🔥" class="headerlink" title="5.4、3D旋转rotate3d🔥"></a>5.4、3D旋转rotate3d🔥</h2><p>3D旋转：3D旋转指可以让元素在三维平面内沿着 x轴，y轴，z轴或者自定义轴进行旋转。</p><ul><li><code>transform: rotateX(45deg)</code> ：沿着X轴正方向旋转45度</li><li><code>transform: rotateY(45deg)</code> ：沿着Y轴正方向旋转45度</li><li><code>transform: rotateZ(45deg)</code> ：沿着Z轴正方向旋转45度</li><li><code>transform: rotate3d(x,y,z,deg)</code> ：沿着自定义轴旋转 deg为角度(了解即可)</li></ul><p>xyz是表示旋转轴的矢量，是标示你是否希望沿着该轴旋转，最后一个标示旋转的角度。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*沿着X轴旋转45deg*/</span><span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">1</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">45</span>deg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*沿着对角线旋转45deg*/</span><span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">1</span>,<span class="token number">1</span>,<span class="token number">0</span>,<span class="token number">45</span>deg<span class="token punctuation">)</span> </code></pre><p><strong>👉左手准则①</strong></p><ul><li>左手的手拇指指向 x轴的正方向</li><li>其余手指的弯曲方向就是该元素沿着x轴旋转的方向</li></ul><p><img src="https://img-blog.csdnimg.cn/6eccd83b5b2e48adbeadb673c96ed0fc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p><strong>👉左手准则②</strong></p><ul><li>左手的手拇指指向 y轴的正方向</li><li>其余手指的弯曲方向就是该元素沿着y轴旋转的方向（正值）</li></ul><p><img src="https://img-blog.csdnimg.cn/70b7feb515b24793a832060719ed33d6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="5-5、3D呈现transform-style🔥"><a href="#5-5、3D呈现transform-style🔥" class="headerlink" title="5.5、3D呈现transform-style🔥"></a>5.5、3D呈现transform-style🔥</h2><p>3D呈现：<mark>transform-style</mark></p><ol><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat</code> 子元素不开启3d立体空间 默认的</li><li><code>transform-style: preserve-3d</code> 子元素开启立体空间</li><li><strong>代码写给父级</strong>，但是影响的是子盒子</li><li>这个属性很重要</li></ol><p><img src="https://img-blog.csdnimg.cn/8d5527a9b56c430e924853c5669c4d2c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 笔记 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础班笔记(二)</title>
      <link href="/2022/04/10/css-ji-chu-ban-bi-ji-er/"/>
      <url>/2022/04/10/css-ji-chu-ban-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h1 id="目录总览"><a href="#目录总览" class="headerlink" title="目录总览"></a>目录总览</h1><p><img src="https://img-blog.csdnimg.cn/ace015a27ede4129a4368ae9fa5d17a9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="1-CSS三大特性🔥"><a href="#1-CSS三大特性🔥" class="headerlink" title="1.CSS三大特性🔥"></a>1.CSS三大特性🔥</h2><h3 id="1-1、层叠性🔥"><a href="#1-1、层叠性🔥" class="headerlink" title="1.1、层叠性🔥"></a>1.1、层叠性🔥</h3><ul><li>相同选择器设置相同的样式，此时一个样式就会<strong>覆盖</strong>另一个冲突的样式。</li><li>层叠性主要解决样式冲突的问题</li><li>层叠性原则：<ul><li>样式冲突，遵循的原则是<strong>就近原则</strong></li></ul></li></ul><h3 id="1-2、继承性🔥"><a href="#1-2、继承性🔥" class="headerlink" title="1.2、继承性🔥"></a>1.2、继承性🔥</h3><ul><li>CSS中的继承：子标签会继承父标签里面的某些样式</li><li>如<strong>文本颜色和字号</strong>等<blockquote><p>特殊： 行高的继承</p></blockquote></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">font</span><span class="token punctuation">:</span><span class="token number">12</span>px/<span class="token number">1.5</span>   Microsoft YaHei<span class="token punctuation">}</span></code></pre><ul><li>1.5的意思：让里面所有的子元素的行高是当前文字大小的1.5倍<h3 id="1-3、优先级🔥"><a href="#1-3、优先级🔥" class="headerlink" title="1.3、优先级🔥"></a>1.3、优先级🔥</h3>– 当同一个元素指定多个选择器，就会有优先级的产生</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;style>         div</span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.text</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>     <span class="token punctuation">}</span>&lt;/style>&lt;/head>&lt;body>      &lt;div class=<span class="token string">"text"</span>>你笑起来真好看&lt;/div>&lt;/body></code></pre><ul><li>选择器相同，则执行<strong>层叠性</strong></li><li>选择器不同，则按<strong>权重</strong></li></ul><table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0，0，0，0</td></tr><tr><td>元素选择器（标签选择器）</td><td>0，0，0，1</td></tr><tr><td>类选择器，伪类选择器</td><td>0，0，1，0</td></tr><tr><td>ID选择器</td><td>0，1，0，0</td></tr><tr><td>行内样式style=””</td><td>1，0，0，0</td></tr><tr><td>！important重要的</td><td>无穷大</td></tr></tbody></table><ul><li><p>类选择器权重为10</p></li><li><p>伪类选择器权重为10</p></li><li><p>ID选择器权重为100</p></li></ul><h3 id="1-4、优先级注意点🔥"><a href="#1-4、优先级注意点🔥" class="headerlink" title="1.4、优先级注意点🔥"></a>1.4、优先级注意点🔥</h3><ul><li>等级判断是从左到右，如果某一位数值相同，则判断下一位数值</li><li><strong>继承的权重是0</strong></li><li>权重可以叠加，<strong>但是永远不会有进位</strong><h3 id="1-5、权重的叠加🔥"><a href="#1-5、权重的叠加🔥" class="headerlink" title="1.5、权重的叠加🔥"></a>1.5、权重的叠加🔥</h3></li><li>权重叠加：如果是复合选择器，则会有权重的叠加，需要计算权重</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;style>     li </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* li 的权重是 0,0,0,1  */</span>     <span class="token selector">ul li</span><span class="token punctuation">{</span>        <span class="token property">color</span> <span class="token punctuation">:</span>red<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 复合选择器权重叠加，ul li权重 0,0,0,1 + 0,0,0,1 =0,0,0,2 */</span><span class="token selector"><span class="token class">.nav</span> li</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  .nav li 权重 0,0,1,0 + 0,0,0,1 = 0,0,1,1 */</span>&lt;style>&lt;/head>&lt;body>    &lt;ul  class=<span class="token string">"nav"</span>>          &lt;li>大猪蹄子&lt;/li>          &lt;li>大肘子&lt;/li>          &lt;li>猪尾巴&lt;/li>          &lt;/ul>&lt;/body></code></pre><ol><li><code>div ul li</code> ———-&gt; 0,0,0,3</li><li><code>.nav ul li</code> ————–&gt;0,0,1,2</li><li><code>a:hover</code> —————-&gt;0,0,1,1 /* 伪类选择器*/</li><li><code>.nav a</code> ——————–&gt;0,0,1,1</li></ol><h2 id="2-盒子模型🔥"><a href="#2-盒子模型🔥" class="headerlink" title="2.盒子模型🔥"></a>2.盒子模型🔥</h2><p><mark>页面布局要学习三大核心</mark></p><ul><li>盒子模型</li><li>浮动</li><li>定位</li></ul><p><mark>盒子模型的组成：</mark></p><ul><li><code>border(边框)</code></li><li><code>content(内容)</code></li><li><code>padding(内边距)</code></li><li><code>margin(外边距)</code></li></ul><p><img src="https://img-blog.csdnimg.cn/4d812f91aa1b4c639298a6460357b775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="2-1边框border🔥"><a href="#2-1边框border🔥" class="headerlink" title="2.1边框border🔥"></a>2.1边框border🔥</h3><ul><li><p>CSS 边框属性允许你指定一个元素边框的<mark>样式</mark>和<mark>颜色</mark></p></li><li><p>边框由三部分组成：<strong>边框宽度（粗细） 边框样式 边框颜色</strong></p></li></ul><pre class=" language-css"><code class="language-css"><span class="token property">border</span> <span class="token punctuation">:</span> borde-width || border-style || border-color</code></pre><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><h3 id="2-1-1、border-style🔥"><a href="#2-1-1、border-style🔥" class="headerlink" title="2.1.1、border-style🔥"></a>2.1.1、border-style🔥</h3><p>边框样式 <mark>border-style</mark> 可以设置如下值：</p><ol><li><code>none</code> : 没有边框即忽略所有边框的宽度（默认值）</li><li><code>solid</code> : 边框为单实线（最为常用的）</li><li><code>dashed</code> : 边框为虚线</li><li><code>dotted</code> : 边框为点线</li></ol><p>边框简写：没有顺序</p><pre class=" language-css"><code class="language-css"><span class="token property">border</span> <span class="token punctuation">:</span> <span class="token number">1</span>px soilid red<span class="token punctuation">;</span></code></pre><p>边框分开写法：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*只设定上边框，其余同理*/</span><span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span></code></pre><h3 id="2-1-2、border-collapse"><a href="#2-1-2、border-collapse" class="headerlink" title="2.1.2、border-collapse"></a>2.1.2、border-collapse</h3><ul><li><p><code>border-collapse</code> : 属性控制浏览器绘制表格边框的方式，它控制相邻单元格的边框</p></li><li><p><code>border-coppapse</code> : 表格的细线边框</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token property">border-collapse</span> <span class="token punctuation">:</span> collapse<span class="token punctuation">;</span></code></pre><ul><li>表示相邻边框合并在一起</li><li>collapse 单词是合并的意思</li></ul><h3 id="2-1-3、边框会影响盒子实际大小🔥"><a href="#2-1-3、边框会影响盒子实际大小🔥" class="headerlink" title="2.1.3、边框会影响盒子实际大小🔥"></a>2.1.3、边框会影响盒子实际大小🔥</h3><p>边框会额外增加盒子的实际大小，因此我们有两种方案解决：</p><ol><li>测量盒子大小的时候，不量边框</li><li>如果测量的时候包含了边框，则需要 <mark>width/height</mark> 减去边框宽度<h3 id="2-2内边距padding🔥"><a href="#2-2内边距padding🔥" class="headerlink" title="2.2内边距padding🔥"></a>2.2内边距padding🔥</h3><mark>padding</mark> 属性用于设置内边距,即盒子边框与内容之间的距离</li></ol><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><ul><li>padding属性(简写属性)可以有一到四个值</li></ul><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>padding : 5px;</td><td>1个值，代表上下左右都有5像素内边距</td></tr><tr><td>padding :5px 10px;</td><td>2个值，代表上下内边距是5像素，左右内边距是10像素</td></tr><tr><td>padding: 5px 10px 20px;</td><td>3个值，代表上内边距5像素，左右内边距10像素，下内边距20像素</td></tr><tr><td>padding :5px 10px 20px 30px;</td><td>4个值，上是5像素，右是10像素，下20像素，左是30像素，顺时针</td></tr></tbody></table><p>以上四种情况，我们实际开发都会遇到。</p><h3 id="2-2-1、影响盒子大小🔥"><a href="#2-2-1、影响盒子大小🔥" class="headerlink" title="2.2.1、影响盒子大小🔥"></a>2.2.1、影响盒子大小🔥</h3><blockquote><p>padding会影响盒子大小的情况</p></blockquote><p>当我们给盒子指定 <mark>padding</mark> 值之后，发生了2件事情：</p><ol><li>内容和边框有了距离，添加了内边距</li><li>padding影响了盒子实际大小<ul><li><strong>也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子</strong></li></ul></li></ol><p>解决方案：</p><p>如果保证盒子跟效果图大小保持一致，则让 <mark>width/height</mark> 减去多出来的内边距大小即可</p><hr><p>但是，有时候 padding 影响盒子是有好处的，比如我们要做导航：</p><p><img src="https://img-blog.csdnimg.cn/abd79f7b40c8482a8140fd74b7149040.png#pic_center"></p><p>因为每个导航栏里面的字数不一样多,我们可以不用给每个盒子宽度了,直接给 padding 最合适.</p><h3 id="2-2-2、-不影响盒子大小🔥"><a href="#2-2-2、-不影响盒子大小🔥" class="headerlink" title="2.2.2、 不影响盒子大小🔥"></a>2.2.2、 不影响盒子大小🔥</h3><blockquote><p>padding不会影响盒子大小的情况</p></blockquote><ul><li><strong>如果盒子本身没有指定width/height属性，则此时padding不会撑开盒子大小</strong><h3 id="2-3、外边距margin🔥"><a href="#2-3、外边距margin🔥" class="headerlink" title="2.3、外边距margin🔥"></a>2.3、外边距margin🔥</h3></li><li><code>margin</code>（外边距）属性用于设置外边距，即控制<strong>盒子和盒子</strong>之间的距离</li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr><tr><td>margin 简写方式代表的意义跟 padding 完全一致</td><td></td></tr></tbody></table><h3 id="2-3-1、外边距典型应用🔥"><a href="#2-3-1、外边距典型应用🔥" class="headerlink" title="2.3.1、外边距典型应用🔥"></a>2.3.1、外边距典型应用🔥</h3><p>外边距可以<strong>让块级盒子水平居中</strong>，但是必须满足两个条件</p><ol><li>盒子必须制定了宽度(width)</li><li>盒子<strong>左右的外边距</strong>都设置为 auto</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>左右的外边距都设置为 auto 有三种写法：</p><pre class=" language-css"><code class="language-css"><span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span></code></pre><p><strong>注意</strong>：</p><p>以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 <mark>text-align: center</mark> 即可。</p><h3 id="2-3-2、外边距合并🔥"><a href="#2-3-2、外边距合并🔥" class="headerlink" title="2.3.2、外边距合并🔥"></a>2.3.2、外边距合并🔥</h3><p>使用 margin 定义块级元素的垂直外边距时，可能会出现外边距的合并。</p><p>主要有两种情况：</p><ol><li>相邻块元素垂直外边距的合并</li><li>嵌套块元素垂直外边距的塌陷</li></ol><p><strong>①相邻块元素垂直外边距的合并🔥</strong></p><p>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。<strong>取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并</strong>。</p><p><img src="https://img-blog.csdnimg.cn/7718ee0385bf4536b331b7e551b8449b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>解决方案：</p><p><strong>尽量只给一个盒子添加 margin 值</strong></p><p><strong>②嵌套块元素垂直外边距的塌陷🔥</strong></p><p>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</p><p><img src="https://img-blog.csdnimg.cn/0bc4b88590cd435bb8376893c2fe542e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>解决方案：</p><ol><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加 <mark>overflow: hidden</mark></li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有塌陷问题。后面会进行总结。</p><p><strong>③清除内外边距🔥</strong></p><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意：</p><p><strong>行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</strong></p><h2 id="👉PS基本操作🔥"><a href="#👉PS基本操作🔥" class="headerlink" title="👉PS基本操作🔥"></a>👉PS基本操作🔥</h2><p>因为网页美工大部分效果图都是利用 <mark>PS</mark>（Photoshop）来做的，所以以后我们大部分切图工作都是在 PS 里面完成。</p><p>文件➡打开 ：可以打开我们要测量的图片<br><mark>Ctrl+R</mark>：可以打开标尺，或者 <mark>视图➡标尺</mark><br>右击标尺，把里面的单位改为像素<br>==Ctrl+ 加号(+)==可以放大视图， ==Ctrl+ 减号(-)==可以缩小视图<br><mark>按住空格键</mark>，鼠标可以变成小手，拖动 PS 视图<br>用<mark>选区</mark>拖动 可以测量大小<br><mark>Ctrl+ D</mark> 可以取消选区，或者在<mark>旁边空白处</mark>点击一下也可以取消选区</p><p><img src="https://img-blog.csdnimg.cn/7aa448f6360d45c2bc5ecfb643333be2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="👉新知识点🔥"><a href="#👉新知识点🔥" class="headerlink" title="👉新知识点🔥"></a>👉新知识点🔥</h2><p>去掉 li 前面的小圆点</p><pre class=" language-css"><code class="language-css"><span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="👉PS切图"><a href="#👉PS切图" class="headerlink" title="👉PS切图"></a>👉PS切图</h2><p>PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。</p><h2 id="👉图层切图"><a href="#👉图层切图" class="headerlink" title="👉图层切图"></a>👉图层切图</h2><p>最简单的切图方式：右击图层 ➡导出 PNG 切片。</p><h2 id="👉切片切图"><a href="#👉切片切图" class="headerlink" title="👉切片切图"></a>👉切片切图</h2><ol><li>利用切片选中图片<ul><li>利用切片工具手动划出</li></ul></li><li>导出选中的图片<ul><li>文件菜单➡存储为 web 设备所用的格式➡选择我们要的图片格式➡存储<h2 id="👉PS插件切图🔥"><a href="#👉PS插件切图🔥" class="headerlink" title="👉PS插件切图🔥"></a>👉PS插件切图🔥</h2><mark>Cutterman</mark> 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 “导出 web 所用格式” 以及使用切片工具进行挨个切图的繁琐流程。</li></ul></li></ol><p>官网：<a href="http://www.cutterman.cn/zh/cutterman">Cutterman官网</a></p><p>注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本</p><h2 id="3-圆角边框🔥"><a href="#3-圆角边框🔥" class="headerlink" title="3.圆角边框🔥"></a>3.圆角边框🔥</h2><ul><li>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</li><li><mark>border-radius</mark> 属性用于设置元素的外边框圆角。</li></ul><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span>length<span class="token punctuation">;</span></code></pre><ul><li><code>radius半径</code>（圆的半径） 原理:(椭）圆与边框的交集形成圆角效果</li></ul><ol><li>参数值可以是<strong>数值</strong>或<strong>百分比</strong>的形式</li><li>如果是<strong>正方形</strong>，想要设置为一个圆，把数值修改为<strong>高度或者宽度的一半</strong>即可，或者直接写为<strong>50%</strong></li><li>如果是一个矩形，设置为<strong>高度</strong>的一半就可以</li><li>该属性是一个简写属性，可以跟四个值，分别代表<strong>左上角，右上角，右下角，左下角</strong></li></ol><pre><code>border-top-left-radius:border-top-right-radius:border-bottom-right-radius:border-bottom-left-radius:</code></pre><h2 id="4-盒子阴影"><a href="#4-盒子阴影" class="headerlink" title="4.盒子阴影"></a>4.盒子阴影</h2><p>CSS3 中新增了盒子阴影，我们可以使用 <mark>box-shadow</mark> 属性为盒子添加阴影。</p><pre class=" language-css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span> h-shadow v-shadow blur spread color inset<span class="token punctuation">;</span></code></pre><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需, 水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需, 垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选, 模糊距离。</td></tr><tr><td>spread</td><td>可选, 阴影的尺寸。</td></tr><tr><td>color</td><td>可选, 阴影的颜色。</td></tr><tr><td>inset</td><td>可选, 将外部阴影（outset）改为内部阴影</td></tr></tbody></table><ul><li>模糊距离：影子的虚实</li><li>阴影尺寸：影子的大小</li></ul><p><strong>注意</strong>：</p><ol><li>默认的是外阴影（outset），但是不可以在后面写这个单词，否则导致阴影无效</li><li><strong>盒子阴影不占用空间，不会影响其他盒子排列</strong><h3 id="4-1👉开发中阴影常用🔥"><a href="#4-1👉开发中阴影常用🔥" class="headerlink" title="4.1👉开发中阴影常用🔥"></a>4.1👉开发中阴影常用🔥</h3>原先盒子没有影子，当我们鼠标经过盒子就添加阴影效果</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>      <span class="token property">box-shadow</span><span class="token punctuation">:</span><span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px -<span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span></code></pre><h3 id="4-2、文字阴影"><a href="#4-2、文字阴影" class="headerlink" title="4.2、文字阴影"></a>4.2、文字阴影</h3><p>在 CSS3 中，我们可以使用 <mark>text-shadow</mark> 属性将阴影应用于文本。</p><pre class=" language-css"><code class="language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span> h-shadow v-shadow blur color</code></pre><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需, 水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需, 垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选, 模糊距离。</td></tr><tr><td>color</td><td>可选, 阴影的颜色。</td></tr></tbody></table><h2 id="5-传统网页布局的三种方式🔥"><a href="#5-传统网页布局的三种方式🔥" class="headerlink" title="5.传统网页布局的三种方式🔥"></a>5.传统网页布局的三种方式🔥</h2><p>网页布局的本质➡用 CSS 来摆放盒子。 把盒子摆放到相应位置</p><p>CSS 提供了三种传统布局方式：</p><ul><li>普通流（标准流）</li><li>浮动</li><li>定位<h3 id="5-1、标准流🔥"><a href="#5-1、标准流🔥" class="headerlink" title="5.1、标准流🔥"></a>5.1、标准流🔥</h3>所谓的标准流，就是标签按照规定好默认方式排列</li></ul><ol><li><p>块级元素会独占一行，从上向下顺序排列。</p><blockquote><p>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</p></blockquote></li><li><p>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。</p><blockquote><p>常用元素：span、a、i、em 等</p></blockquote></li></ol><p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p><p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式）。</p><h3 id="5-2、浮动🔥"><a href="#5-2、浮动🔥" class="headerlink" title="5.2、浮动🔥"></a>5.2、浮动🔥</h3><ol><li>提问：如何让多个块级盒子(div)水平排列成一行？</li></ol><p><img src="https://img-blog.csdnimg.cn/c50e979c23494017880f042cba73b776.png#pic_center"></p><p>比较难，虽然转换为行内块元素可以实现一行显示，但是他们之间会有大的空白缝隙，很难控制。</p><ol start="2"><li>提问：如何实现两个盒子的左右对齐？</li></ol><p><img src="https://img-blog.csdnimg.cn/c6c08da2c7684a629aca15f1d993a609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用</p><p>浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p><h3 id="5-2-1、浮动的典型应用🔥"><a href="#5-2-1、浮动的典型应用🔥" class="headerlink" title="5.2.1、浮动的典型应用🔥"></a>5.2.1、浮动的典型应用🔥</h3><ul><li><p>浮动最典型的应用：<strong>可以让多个块级元素一行内排列显示</strong>。</p></li><li><p>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</p></li></ul><blockquote><p>什么是浮动？</p></blockquote><ul><li><code>float</code>属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘</li></ul><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><ul><li>网页布局的第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</li><li>网页布局第二准则：<strong>先设置盒子大小，之后设置盒子的位置</strong>。<h3 id="5-2-2、浮动的特性🔥"><a href="#5-2-2、浮动的特性🔥" class="headerlink" title="5.2.2、浮动的特性🔥"></a>5.2.2、浮动的特性🔥</h3>设置了浮动（float）的元素的最重要的特性：</li></ul><ol><li>脱标：浮动元素会脱离标准流<ul><li>浮动的盒子<strong>不再保留原先的位置</strong></li></ul></li></ol><p><img src="https://img-blog.csdnimg.cn/c6416c483c96451092a80ada9785b347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><ol start="2"><li>如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列<ul><li>浮动的元素是相互贴靠在一起的（<strong>不会有缝隙</strong>），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li></ul></li></ol><p><img src="https://img-blog.csdnimg.cn/8dd268845ede45a8bdedb52bf8bb0914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><ol start="3"><li>浮动元素会具有行内块元素特性<br>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后都具有<strong>行内块元素</strong>相似的特性。</li></ol><ul><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>如果行内元素有了浮动，则不需要转换块级\行内块元素就可以直接给高度和宽度</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的<h3 id="5-2-3、浮动元素经常和标准流父级搭配使用🔥"><a href="#5-2-3、浮动元素经常和标准流父级搭配使用🔥" class="headerlink" title="5.2.3、浮动元素经常和标准流父级搭配使用🔥"></a>5.2.3、浮动元素经常和标准流父级搭配使用🔥</h3>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</li></ul><p><mark>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</mark></p><p><img src="https://img-blog.csdnimg.cn/1eb22d8b2c8543d19d0078f8acc2575a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="5-2-4、浮动的注意点🔥"><a href="#5-2-4、浮动的注意点🔥" class="headerlink" title="5.2.4、浮动的注意点🔥"></a>5.2.4、浮动的注意点🔥</h3><ul><li>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</li><li>一个元素浮动了，理论上其余兄弟元素也要浮动<ul><li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动</li></ul></li><li><mark>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</mark><h3 id="5-2-5、清除浮动🔥"><a href="#5-2-5、清除浮动🔥" class="headerlink" title="5.2.5、清除浮动🔥"></a>5.2.5、清除浮动🔥</h3>我们前面浮动元素有一个标准流的父元素, 他们有一个共同的特点,</li></ul><p>都是有高度的.但是, 所有的父盒子都必须有高度吗?</p><p>理想中的状态, 让子盒子撑开父亲. 有多少孩子,我父盒子就有多高.</p><p>但是不给父盒子高度会有问题吗?..…</p><blockquote><p>为什么要清除浮动</p></blockquote><ul><li>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。</li></ul><p><img src="https://img-blog.csdnimg.cn/7ae44f5681f549a99c1b7d1f45e5205b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li><li>理想中的状态，让子盒子撑开父亲，有多少孩子，我父盒子就有多高<h3 id="5-2-6、清除浮动的本质🔥"><a href="#5-2-6、清除浮动的本质🔥" class="headerlink" title="5.2.6、清除浮动的本质🔥"></a>5.2.6、清除浮动的本质🔥</h3></li><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了。<br>语法：</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素(清除左侧浮动的影响)</td></tr><tr><td>right</td><td>不允许右侧有浮动元素(清除右侧浮动的影响)</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><ul><li>我们实际工作中，几乎只用<code>clear:both</code></li><li>清除浮动的策略是：<strong>闭合浮动</strong></li><li>只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。<h3 id="5-2-7、清除浮动的方法🔥"><a href="#5-2-7、清除浮动的方法🔥" class="headerlink" title="5.2.7、清除浮动的方法🔥"></a>5.2.7、清除浮动的方法🔥</h3></li></ul><ol><li><p>额外标签法也称为隔墙法，是W3C推荐的做法</p></li><li><p>父级添加 overflow 属性</p></li><li><p>父级添加 after 伪元素</p></li><li><p>父级添加双伪元素</p></li></ol><p><strong>①额外标签法</strong></p><ul><li><p>额外标签法会在浮动元素末尾添加一个空的标签,例如：</p></li><li><p>例如<code>&lt;div style="clear:both"&gt;&lt;/div&gt;</code>，或者其他标签（如<code>&lt;/br&gt;</code>等）</p></li><li><p>注意：<strong>要求这个新的空标签必须是块级元素</strong></p></li><li><p>优点：通俗易懂，书写方便</p></li><li><p>缺点：添加许多无意义的标签，结构化较差</p></li><li><p>实际工作可能会遇到,但是不常用</p></li></ul><p><strong>②overflow</strong></p><ul><li>可以给<mark>父级</mark>添加<code>overflow</code>属性，将其属性值设置为<code>hidden</code>,<code>auto</code>或<code>scroll</code></li><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li></ul><p><strong>③after伪元素法🔥</strong></p><p><mark>:after</mark> 方式是额外标签法的升级版。也是给父元素添加</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* IE6,7专有*/</span>      *<span class="token property">zoom</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：需要照顾低版本浏览器</li><li>代表网站：百度、淘宝、网易等</li></ul><p><strong>④双伪元素🔥</strong></p><ul><li>也是给父元素添加</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:before</span>,<span class="token class">.clearfix</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>     <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>优点：代码更简洁</li><li>缺点：需要照顾低版本浏览器</li><li>表网站：小米、腾讯等<h3 id="5-2-8、浮动总结🔥"><a href="#5-2-8、浮动总结🔥" class="headerlink" title="5.2.8、浮动总结🔥"></a>5.2.8、浮动总结🔥</h3><blockquote><p>为什么需要清除浮动？</p></blockquote></li></ul><p>①：父级没高度</p><p>②：子盒子浮动了</p><p>③：影响下面布局了，我们就应该清除浮动了。</p><table><thead><tr><th>清除浮动方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法(隔墙法)</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差</td></tr><tr><td>父级overflow:hidden;</td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级after伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after，兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after，兼容性问题</td></tr></tbody></table><h2 id="5-3、定位🔥"><a href="#5-3、定位🔥" class="headerlink" title="5.3、定位🔥"></a>5.3、定位🔥</h2><p>提问：以下情况使用标准流或者浮动能实现吗？</p><ol><li>某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子。</li><li>当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</li></ol><p>以上效果，标准流或浮动都无法快速实现，此时需要定位来实现</p><ul><li><p>浮动可以让多个块级盒子一行没有缝隙的排列显示，经常用于横向排列盒子</p></li><li><p>定位则是可以让盒子自由的在某个盒子内移动位置或固定屏幕中某个位置，并且可以压住其他盒子</p></li><li><p>定位：<mark>将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子</mark></p><h3 id="5-3-1、定位的组成🔥"><a href="#5-3-1、定位的组成🔥" class="headerlink" title="5.3.1、定位的组成🔥"></a>5.3.1、定位的组成🔥</h3><p><mark>定位 = 定位模式 +边偏移</mark></p></li><li><p>定位模式用于指定一个元素在文档中的定位方式</p></li><li><p>边偏移则决定了该元素的最终位置</p><blockquote><p>定位模式</p></blockquote></li><li><p>定位模式决定元素的定位方式 ，它通过 CSS 的 <mark>position</mark> 属性来设置，其值可以分为四个</p></li></ul><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><blockquote><p>边偏移</p></blockquote><p>边偏移就是定位的盒子移动到最终位置。</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top: 80px</td><td>顶端偏移量，定义元素相对于其父元素的上边线的距离</td></tr><tr><td>bottom</td><td>bottom: 80px</td><td>底部偏移量，定义元素相对于其父元素的下边线的距离</td></tr><tr><td>right</td><td>right: 80px</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr><tr><td>left</td><td>left: 80px</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr></tbody></table><h3 id="5-3-2、静态定位static-了解"><a href="#5-3-2、静态定位static-了解" class="headerlink" title="5.3.2、静态定位static(了解)"></a>5.3.2、静态定位static(了解)</h3><ul><li>静态定位是元素的<strong>默认定位方式，无定位</strong>的意思</li><li>静态定位按照标准流特性摆放位置，它没有边偏移</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-3、相对定位relative🔥"><a href="#5-3-3、相对定位relative🔥" class="headerlink" title="5.3.3、相对定位relative🔥"></a>5.3.3、相对定位relative🔥</h3><ul><li>相对定位是元素在移动位置的时候，是相对于它<strong>原来的位置</strong>来说的</li><li><strong>特点</strong>：<ul><li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）</li><li><mark>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待。（不脱标，继续保留原来位置）</mark></li><li>因此，相对定位并没有脱标，它最典型的应用是给绝对定位当爹的。<h3 id="5-3-4、绝对定位absolute🔥"><a href="#5-3-4、绝对定位absolute🔥" class="headerlink" title="5.3.4、绝对定位absolute🔥"></a>5.3.4、绝对定位absolute🔥</h3></li></ul></li><li>绝对定位是元素在移动位置的时候，是相对于它的祖先元素来说的</li><li><strong>特点</strong>：<ul><li>如果没有祖先元素，或者祖先元素没定位，则以浏览器为准进行定位(Document 文档)</li><li>如果祖先元素父级有定位(相对、绝对、固定定位)，则以最近一级的有定位祖先元素为参考点移动位置</li><li><mark>绝对定位不再占用原先的位置（脱标）</mark></li></ul></li></ul><p>所以绝对定位是脱离标准流的</p><p><strong>①绝对定位盒子水平居中🔥</strong></p><ul><li>加了绝对定位的盒子不能通过margin: 0 auto水平居中</li><li>但是可以通过以下计算方法实现水平和垂直居中<ul><li><code>left:50%</code> : 让盒子的左侧移动到父级元素的水平中心位置</li><li><code>margin-left</code> : -100px; 让盒子向左移动自身宽度的一半</li></ul></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 1.left走50%，父容器宽度的一半 */</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 2.margin 负值往左边走 自己盒子宽度的一半 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -xx<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-5、子绝父相🔥"><a href="#5-3-5、子绝父相🔥" class="headerlink" title="5.3.5、子绝父相🔥"></a>5.3.5、子绝父相🔥</h3><p>意思：<strong>子级使用绝对定位，父级则需要相对定位</strong></p><p>①：子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p><p>②：父盒子需要加定位限制子盒子在父盒子内显示</p><p>③：父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p><p>总结：<strong>因为父级需要占有位置，因此是相对定位，子盒子不要占有位置，则是绝对定位</strong></p><h3 id="5-3-6、固定定位fixed🔥"><a href="#5-3-6、固定定位fixed🔥" class="headerlink" title="5.3.6、固定定位fixed🔥"></a>5.3.6、固定定位fixed🔥</h3><p><strong>固定定位</strong>是元素<strong>固定于浏览器的可视区的位置</strong></p><p>主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变</p><ul><li>特点🔥：<ul><li>以浏览器的可视窗口为参照点移动元素</li><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li><li>固定定位<strong>不再占有原先的位置</strong>(脱标)</li></ul></li></ul><p>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</p><h3 id="👉固定定位小技巧🔥"><a href="#👉固定定位小技巧🔥" class="headerlink" title="👉固定定位小技巧🔥"></a>👉固定定位小技巧🔥</h3><p>固定定位小技巧： 固定在版心右侧位置</p><p>小算法：</p><ol><li>让固定定位的盒子 left : 50%. 走到浏览器可视区（也可以看做版心）的一半位置。</li><li>让固定定位的盒子 margin-left : 版心宽度的一半距离。多走版心宽度的一半位置</li></ol><p>就可以让固定定位的盒子贴着版心右侧对齐了。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 1.left走50%，父容器宽度的一半 */</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 2.margin 负值往左边走 自己盒子宽度的一半 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -xx<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-7、粘性定位sticky-了解"><a href="#5-3-7、粘性定位sticky-了解" class="headerlink" title="5.3.7、粘性定位sticky(了解)"></a>5.3.7、粘性定位sticky(了解)</h3><p>粘性定位可以被认为是相对定位和固定定位的混合</p><ul><li><strong>特点</strong>：<ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有<strong>原先的位置</strong>（相对定位的特点）</li><li>必须添加top，left，right，bottom其中一个才有效</li></ul></li></ul><p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>sticky<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-8、定位模式总结🔥"><a href="#5-3-8、定位模式总结🔥" class="headerlink" title="5.3.8、定位模式总结🔥"></a>5.3.8、定位模式总结🔥</h3><table><thead><tr><th>定位模式</th><th>是否脱标</th><th>移动位置</th><th>是否常用</th></tr></thead><tbody><tr><td>static静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td>relative相对定位</td><td>否（占有位置）</td><td>相对于自身位置移动</td><td>常用</td></tr><tr><td>absolute绝对定位</td><td>是（不占有位置）</td><td>带有定位的父级</td><td>常用</td></tr><tr><td>fixed固定定位</td><td>是（不占有位置）</td><td>浏览器可视区</td><td>常用</td></tr><tr><td>sticky</td><td>否（占有位置）</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><ul><li>一定要记住相对定位，固定定位，绝对定位的两个大特点：<ol><li>是否占有位置（脱标否）</li><li>以谁为基准点移动</li></ol></li><li>重点学会子绝父相（儿子绝对定位，父亲必须相对定位）<h3 id="5-3-9定位叠放次序z-index🔥"><a href="#5-3-9定位叠放次序z-index🔥" class="headerlink" title="5.3.9定位叠放次序z-index🔥"></a>5.3.9定位叠放次序z-index🔥</h3></li><li>在使用定位布局时候，可能会出现盒子重叠的情况</li><li>此时，可以用 <mark>z-index</mark> 来控制盒子的前后次序(z轴)</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><ol><li><p>数值可以是正整数，负整数或者0，默认是auto，数值越大，盒子越靠上</p></li><li><p>如果属性值相同，则按照书写顺序，后来居上</p></li><li><p>数字后面不能加单位</p></li><li><p><strong>只有定位</strong>的盒子才有 <mark>z-index</mark> 属性</p><h3 id="5-3-10、定位的扩展🔥"><a href="#5-3-10、定位的扩展🔥" class="headerlink" title="5.3.10、定位的扩展🔥"></a>5.3.10、定位的扩展🔥</h3></li><li><p>绝对定位的盒子居中<br> 加了绝对定位的盒子不能通过 margin : 0 auto 水平居中，但是可以通过以下计算方法实现水平和垂直居中</p><p> ①：left : 50%; 让盒子的左侧移动到父级元素的水平中心位置</p><p> ②：margin-left : -100px; 让盒子向左移动自身宽度的一半</p></li><li><p>定位特殊特性<br> 绝对定位和固定定位也和浮动类似。</p><p> ①：行内元素添加绝对或者固定定位，可以直接设置高度和宽度</p><p> ②：块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p></li><li><p>脱标的盒子不会触发外边距塌陷<br> 浮动元素、绝对定位(固定定位)元素都不会触发外边距合并的问题。</p></li><li><p>绝对定位(固定定位)会完全压住盒子</p><p> ①：浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p><p> ②：但是绝对定位（固定定位） 会压住下面标准流所有的内容。</p><p> ③：浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素</p></li></ol><h3 id="5-4、网页布局总结🔥"><a href="#5-4、网页布局总结🔥" class="headerlink" title="5.4、网页布局总结🔥"></a>5.4、网页布局总结🔥</h3><p>通过盒子模型，清楚知道大部分html标签是一个盒子</p><p>通过CSS浮动、定位 可以让每个盒子排列成为网页</p><p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法</p><ol><li><p>标准流 : </p><p> 可以让盒子上下排列或者左右排列，垂直的块级盒子显示就用标准流布局。</p></li><li><p>浮动 :</p><p> 可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子水平显示就用浮动布局。</p></li><li><p>定位 :</p><p> 定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。如果元素自由在某个盒子内移动就用定位布局。</p></li></ol><h2 id="6、元素的隐藏与显示🔥"><a href="#6、元素的隐藏与显示🔥" class="headerlink" title="6、元素的隐藏与显示🔥"></a>6、元素的隐藏与显示🔥</h2><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p><p>本质：<strong>让一个元素在页面中隐藏或者显示出来</strong></p><h3 id="6-1、display显示隐藏🔥"><a href="#6-1、display显示隐藏🔥" class="headerlink" title="6.1、display显示隐藏🔥"></a>6.1、display显示隐藏🔥</h3><p><code>display</code>属性用于设置一个元素应如何显示</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*隐藏对象*/</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*除了转换为块级元素之外，同时还有显示元素的意思*/</span></code></pre><ul><li>display隐藏元素后，不再占有原来的位置</li></ul><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。</p><h3 id="6-2、visibility显示隐藏🔥"><a href="#6-2、visibility显示隐藏🔥" class="headerlink" title="6.2、visibility显示隐藏🔥"></a>6.2、visibility显示隐藏🔥</h3><p><code>visibility</code>属性用于指定一个元素应可见还是隐藏</p><pre class=" language-css"><code class="language-css"><span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*元素可视*/</span><span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*元素隐藏*/</span></code></pre><ul><li><strong>visibility 隐藏元素后，继续占有原来的位置</strong>。</li><li>如果隐藏元素想要原来位置， 就用 <code>visibility：hidden</code></li><li>如果隐藏元素不想要原来位置， 就用 <code>display：none</code> (用处更多 重点）<h3 id="6-3、overflow溢出显示隐藏🔥"><a href="#6-3、overflow溢出显示隐藏🔥" class="headerlink" title="6.3、overflow溢出显示隐藏🔥"></a>6.3、overflow溢出显示隐藏🔥</h3><mark>overflow</mark> 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度）时，会发生什么。</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td>scroll</td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</p><p>但是如果有定位的盒子， 请慎用 <mark>overflow:hidden</mark> 因为它会隐藏多余的部分。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础班笔记(一)</title>
      <link href="/2022/04/10/css-ji-chu-ban-bi-ji-yi/"/>
      <url>/2022/04/10/css-ji-chu-ban-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="目录总览"><a href="#目录总览" class="headerlink" title="目录总览"></a>目录总览</h1><p><img src="https://img-blog.csdnimg.cn/53e73b851fa04cf395325296fe89ea75.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="1、标签基础选择器🔥"><a href="#1、标签基础选择器🔥" class="headerlink" title="1、标签基础选择器🔥"></a>1、标签基础选择器🔥</h2><h3 id="1-1、标签选择器🔥"><a href="#1-1、标签选择器🔥" class="headerlink" title="1.1、标签选择器🔥"></a>1.1、标签选择器🔥</h3><ul><li>标签选择器的作用是为页面中<mark>某一类</mark>标签指定统一的CSS样式</li><li>优点是能快速为页面中同类型的标签统一设置样式</li><li>缺点是不能设计差异化样式，只能选择全部的当前标签</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">标签名 </span><span class="token punctuation">{</span>    属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul </span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><ul><li>规范：<ul><li>属性值前面，冒号后面，保留一个空格</li><li>标签名和大括号中间保留空格</li></ul></li></ul><h3 id="1-2、类选择器🔥"><a href="#1-2、类选择器🔥" class="headerlink" title="1.2、类选择器🔥"></a>1.2、类选择器🔥</h3><p>如果想要差异化选择不同的标签，单独选一个或者几个标签，可以使用<mark>类选择器</mark></p><pre class=" language-css"><code class="language-css"><span class="token selector">.类名 </span><span class="token punctuation">{</span>    属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token number">.....</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.red</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>结构需要用<mark>class</mark>属性来调用<pre class=" language-css"><code class="language-css">&lt;div class=<span class="token string">'red'</span>>  变红色 &lt;/div></code></pre>注意：</li></ul><ol><li>类选择器在 HTML 中以<mark>class</mark>属性表示，在CSS中，类选择器以一个点 . 号表示</li><li>记忆口诀：样式点定义，结构类调用<h3 id="1-2-1、类选择器多类名🔥"><a href="#1-2-1、类选择器多类名🔥" class="headerlink" title="1.2.1、类选择器多类名🔥"></a>1.2.1、类选择器多类名🔥</h3>我们可以给一个标签指定<mark>多个类名</mark>，简单理解就是一个标签有多个名字<pre class=" language-css"><code class="language-css">&lt;div class=<span class="token string">"red font20"</span>>林晓&lt;/div></code></pre></li></ol><ul><li>在标签<mark>class</mark>属性中写多个类名</li><li>多个类名中间必须用空格分开</li><li>这个标签就可以分别具有这些类名的样式</li></ul><p>✍多类名开发中使用场景：</p><ol><li>可以把一些标签元素相同的样式(公共的部分)放到一个类里面</li><li>这些标签都可以调用这个公共的类，然后再调用自己独有的类</li><li>从而节省CSS代码，统一修改也方便<h3 id="1-3、id选择器🔥"><a href="#1-3、id选择器🔥" class="headerlink" title="1.3、id选择器🔥"></a>1.3、id选择器🔥</h3></li></ol><ul><li>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式</li><li>HTML 元素以<mark>id属性</mark>来设置 id 选择器，CSS中 id 选择器 以 “<mark>#</mark>” 来定义</li></ul><pre class=" language-css"><code class="language-css">  <span class="token selector">&lt;style>        <span class="token id">#pink</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;body>    &lt;div id=<span class="token string">"pink"</span>>秦大林子&lt;/div>&lt;/body></code></pre><p>注意：</p><ul><li><p>id 属性只能在每个 HTML 文档中出现一次。</p></li><li><p>记忆口诀：样式 # 定义，结构 id 调用。只能调用一次，别人切勿使用</p><h3 id="1-3-1、区别🔥"><a href="#1-3-1、区别🔥" class="headerlink" title="1.3.1、区别🔥"></a>1.3.1、区别🔥</h3><p>id选择器和类选择器的区别？</p></li><li><p>类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用</p></li><li><p>id 选择器好比人的身份证号码，全中国是唯一的，不得重复。</p></li><li><p>id 选择器和类选择器最大的不同在于使用次数上</p></li><li><p>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</p></li></ul><p>记忆口诀：</p><ul><li>样式<strong>点</strong>定义，结构<strong>类</strong>调用</li><li>样式 <strong>#</strong> 定义，结构 <strong>id</strong>调用<h3 id="1-5、通配符选择器🔥"><a href="#1-5、通配符选择器🔥" class="headerlink" title="1.5、通配符选择器🔥"></a>1.5、通配符选择器🔥</h3></li><li>CSS 中， 通配符使用<code>*</code>定义，它表示选取页面中所有元素(标签)。</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>    属性<span class="token number">1</span>：属性值<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token number">....</span><span class="token punctuation">}</span></code></pre><ul><li>通配符选择器不需要调用，自动就给所有的元素使用样式</li><li>一般是用于清楚元素标签的内外边距</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-6、基础选择器总结🔥"><a href="#1-6、基础选择器总结🔥" class="headerlink" title="1.6、基础选择器总结🔥"></a>1.6、基础选择器总结🔥</h3><table><thead><tr><th>基础选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>语法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签</td><td>不能差异化选择</td><td>较多</td><td>p {color: red}</td></tr><tr><td>类选择器</td><td>可以选出1个或者多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.nav {color: red}</td></tr><tr><td>id 选择器</td><td>一次只能选择1个标签</td><td>ID 属性只能在每个 HTML 文档中出现一次</td><td>一般和 js 搭配</td><td>#nav {color: red}</td></tr><tr><td>通配符选择器</td><td>选择所有的标签</td><td>选择的太多，有部分不需要</td><td>特殊情况使用</td><td>* {color: red}</td></tr></tbody></table><h2 id="2、CSS字体属性🔥"><a href="#2、CSS字体属性🔥" class="headerlink" title="2、CSS字体属性🔥"></a>2、CSS字体属性🔥</h2><p>CSS 字体属性用于定义<mark>字体系列</mark>、大小、粗细和文字样式(如斜体)</p><h3 id="2-1、font-family🔥"><a href="#2-1、font-family🔥" class="headerlink" title="2.1、font-family🔥"></a>2.1、font-family🔥</h3><p>CSS 使用 <mark>font-family</mark> 属性设置文本的字体系列</p><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span> <span class="token property">font-family</span><span class="token punctuation">:</span>Arial,<span class="token string">"Microsoft Yahe"</span>,<span class="token string">"微软雅黑"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li><li>最常见的几个字体：<pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Microsoft Yahe"</span>,tahoma,arial,<span class="token string">"Hiragino Sans GB"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2、font-size🔥"><a href="#2-2、font-size🔥" class="headerlink" title="2.2、font-size🔥"></a>2.2、font-size🔥</h3>CSS 使用 <mark>font-size</mark> 属性设置字体大小<pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>px (像素)大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为 16px<h3 id="2-3、font-weight🔥"><a href="#2-3、font-weight🔥" class="headerlink" title="2.3、font-weight🔥"></a>2.3、font-weight🔥</h3></li><li>CSS 使用 <mark>font-weight</mark> 属性设置字体的粗细<pre class=" language-css"><code class="language-css"><span class="token property">font-weight</span><span class="token punctuation">:</span>  normal | bold |  bolder  | lighter |number</code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值(不加粗的)，相当于number=400</td></tr><tr><td>bold</td><td>定义粗体(加粗的)，相当于number=700</td></tr><tr><td>bolder</td><td>定义特粗体</td></tr><tr><td>100-900</td><td>400等同于 normal，700等同于 bold，注意这个数字后面不跟单位</td></tr></tbody></table></li></ul><p>实际开发中，我们更喜欢用<strong>数字表示粗细</strong></p><h3 id="2-4、font-style🔥"><a href="#2-4、font-style🔥" class="headerlink" title="2.4、font-style🔥"></a>2.4、font-style🔥</h3><p>CSS 使用 <mark>font-style</mark> 属性设置文字样式</p><pre class=" language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值，浏览器会显示标准的字体样式</td></tr><tr><td>italic</td><td>浏览器会显示<em>斜体</em>的字体样式</td></tr></tbody></table><p>注意：<strong>平时我们很少给文字加斜体，反而要给斜体标签( em , i )改为不倾斜字体</strong></p><h3 id="2-5、字体属性复合写法🔥"><a href="#2-5、字体属性复合写法🔥" class="headerlink" title="2.5、字体属性复合写法🔥"></a>2.5、字体属性复合写法🔥</h3><p>字体复合属性可以把以上文字样式综合来写，这样写更节约代码，例如：</p><pre class=" language-css"><code class="language-css">&lt;style>        <span class="token comment" spellcheck="true">/* 想要div 文字变倾斜 加粗 字号设置为16像素 并且是微软雅黑 */</span>                <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Microsoft yahe'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 复合属性：简写的方式  节约代码*/</span>            <span class="token comment" spellcheck="true">/* 顺序：font-style font-weight  font-size/line-height  font-family */</span>            <span class="token property">font</span><span class="token punctuation">:</span> italic <span class="token number">700</span> <span class="token number">16</span>px <span class="token string">'Microsoft yahe'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>&lt;/style></code></pre><ul><li><strong>顺序：文字样式 文字粗细 文字大小 文字字体</strong></li><li>使用font属性时，必须按照上面语法格式中的顺序书写，<strong>不能更换顺序</strong>，并且各个属性间以<strong>空格</strong>隔开</li><li>不需要设置的属性可以省略(取默认值)，但必须保留 <code>font-size</code> 和 <code>font-family</code> 属性，否则 font 属性将不起作用</li></ul><h3 id="2-6、字体属性总结🔥"><a href="#2-6、字体属性总结🔥" class="headerlink" title="2.6、字体属性总结🔥"></a>2.6、字体属性总结🔥</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>font-style</td><td>字体样式</td><td>记住倾斜是 italic，不倾斜是 normal，实际开发最常用 normal</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>加粗是 700 或者 bold ，不加粗是 normal 或者 400，记住数字不加单位</td></tr><tr><td>font-size</td><td>字号</td><td>我们通常用的单位是 px ，一定要跟上单位</td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按照团队约定来写字体</td></tr><tr><td>font</td><td>字体连写</td><td>①字体连写是有顺序的，不能随意换位置 ② <strong>字体和字号必须同时出现</strong></td></tr></tbody></table><h2 id="3、CSS文本属性🔥"><a href="#3、CSS文本属性🔥" class="headerlink" title="3、CSS文本属性🔥"></a>3、CSS文本属性🔥</h2><p>CSS 文本属性可以设置文本的<mark>外观</mark>，比如文本颜色、对齐文本、装饰文本、文本缩进、行间距的等</p><h3 id="3-1、color🔥"><a href="#3-1、color🔥" class="headerlink" title="3.1、color🔥"></a>3.1、color🔥</h3><ul><li><mark>color</mark> 属性用于定义文本的颜色<pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th>表示</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red，green，blue，pink等</td></tr><tr><td>十六进制</td><td>#FF0000, #FF6600，#29D794</td></tr><tr><td>RGB代码</td><td>rgb（255，0，0） 或rgb(100%，0%，0%)</td></tr></tbody></table></li></ul><p>实际开发中最常用的是十六进制。</p><h3 id="3-2、text-align🔥"><a href="#3-2、text-align🔥" class="headerlink" title="3.2、text-align🔥"></a>3.2、text-align🔥</h3><ul><li><mark>text-align</mark> 属性用于设置文本内容的水平对齐方式<pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table></li></ul><h3 id="3-3、text-decoration🔥"><a href="#3-3、text-decoration🔥" class="headerlink" title="3.3、text-decoration🔥"></a>3.3、text-decoration🔥</h3><ul><li><mark>text-decoration</mark> 属性用于装饰文本，可以给文本添加下划线，删除线，上划线等<pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。没有装饰线(最常用)</td></tr><tr><td>underline</td><td>下划线，链接自带下划线（常用）</td></tr><tr><td>overline</td><td>上划线(几乎不用)</td></tr><tr><td>line-through</td><td>删除线 (不常用)</td></tr></tbody></table></li></ul><p>重点记住如何添加下划线，如何删除下划线，其余了解即可。</p><h3 id="3-4、text-indent🔥"><a href="#3-4、text-indent🔥" class="headerlink" title="3.4、text-indent🔥"></a>3.4、text-indent🔥</h3><ul><li><mark>text-indent</mark> 属性用于指定文本的第一行缩进，通常是将<mark>段落的首行缩进</mark></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span><span class="token punctuation">{</span>   <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>通过设置该水属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值</p></li><li><p>em是一个相对单位，就是当前元素(font-size)<strong>1个文字的大小</strong></p></li><li><p>如果当前元素没有设置大小，则会按照父元素的一个文字大小</p></li></ul><h3 id="3-5、line-height🔥"><a href="#3-5、line-height🔥" class="headerlink" title="3.5、line-height🔥"></a>3.5、line-height🔥</h3><ul><li><mark>line-height</mark> 属性用于设置行间的距离(行高)，可以控制文字行与行之间的距离</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>   <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">26</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/64c38bf516e9498096d8f3ebbc7b6ded.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>行间距包括<strong>上间距、文本高度、下间距</strong></p><h3 id="3-6、文本属性总结🔥"><a href="#3-6、文本属性总结🔥" class="headerlink" title="3.6、文本属性总结🔥"></a>3.6、文本属性总结🔥</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td><td>通常用十六进制，而且是简写形式 #fff</td></tr><tr><td>text-align</td><td>文本对齐</td><td>可以设定文字水平的对齐方式</td></tr><tr><td>text-indent</td><td>文本缩进</td><td>段落首行缩进</td></tr><tr><td>text-decoration</td><td>文本修饰</td><td>记住添加下划线 underline 取消下划线 none</td></tr><tr><td>line-height</td><td>行高</td><td>控制行与行之间的距离</td></tr></tbody></table><h2 id="4、CSS复合选择器🔥"><a href="#4、CSS复合选择器🔥" class="headerlink" title="4、CSS复合选择器🔥"></a>4、CSS复合选择器🔥</h2><p>复合选择器：是由两个或多个基础选择器，通过不同的方式组合而成的</p><p>常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器</p><h3 id="4-1、后代选择器🔥"><a href="#4-1、后代选择器🔥" class="headerlink" title="4.1、后代选择器🔥"></a>4.1、后代选择器🔥</h3><ul><li>后代选择器又称为<mark>包含选择器</mark>，<strong>可以选择父元素里面的子元素</strong></li><li>其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就称为外层标签的后代</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">元素1 元素2 </span><span class="token punctuation">{</span>    样式声明<span class="token punctuation">}</span></code></pre><p>上述语法表示**选择元素1里面的所有元素2(后代元素)**，例如</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*选择ul 里面的所有 li 标签元素*/</span><span class="token selector">ul li </span><span class="token punctuation">{</span>        样式声明    <span class="token punctuation">}</span>     </code></pre><ul><li>元素1 和 元素2 中间用空格隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是<strong>元素2</strong><h3 id="4-2、子选择器🔥"><a href="#4-2、子选择器🔥" class="headerlink" title="4.2、子选择器🔥"></a>4.2、子选择器🔥</h3></li><li><strong>子元素选择器</strong>只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。<pre class=" language-css"><code class="language-css"><span class="token selector">元素1 > 元素2</span><span class="token punctuation">{</span>  样式声明<span class="token punctuation">}</span></code></pre>上述语法表示<strong>选择元素1 里面的所有直接后代(子元素)元素2</strong>，例如<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*选择div里面所有最近一级 P 标签元素*/</span> <span class="token selector">div > p</span><span class="token punctuation">{</span>  样式声明<span class="token punctuation">}</span></code></pre></li><li>元素1 和 元素2 中间用<strong>大于号</strong>隔开</li><li>元素1 是父级，元素2 是子级，<strong>最终选择的是元素2</strong></li><li>元素2必须是<strong>亲儿子</strong>，其孙子、重孙之类都不归他管<h3 id="4-3、并集选择器🔥"><a href="#4-3、并集选择器🔥" class="headerlink" title="4.3、并集选择器🔥"></a>4.3、并集选择器🔥</h3></li></ul><p><strong>并集选择器可以选择多组标签，同时为它们定义相同的样式。</strong></p><ul><li>并集选择器是各选择器通过<strong>英文逗号</strong>连接而成</li><li>任何形式的选择器都可以作为并集选择器的一部分<pre class=" language-css"><code class="language-css"><span class="token selector">元素1,元素2 </span><span class="token punctuation">{</span>  样式声明<span class="token punctuation">}</span>   </code></pre>上述语法表示选择<strong>元素1和元素2</strong>，例如<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*选择  ul  和  div 标签元素 */</span><span class="token selector">ul,div </span><span class="token punctuation">{</span>  样式声明<span class="token punctuation">}</span> </code></pre></li><li>元素1 和 元素2 中间用<strong>逗号隔开</strong></li><li>逗号可以理解为<mark>和</mark>的意思</li><li>并集选择器通常用于集体声明<h3 id="4-4、伪类选择器🔥"><a href="#4-4、伪类选择器🔥" class="headerlink" title="4.4、伪类选择器🔥"></a>4.4、伪类选择器🔥</h3></li><li><strong>伪类选择器</strong>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素</li><li>伪类选择器书写最大的特点是<strong>用冒号</strong>表示，比如 <code>:hover</code>、<code>:first-child</code></li><li>伪类选择器很多，比如有链接伪类、结构伪类，这里先记录常用的链接伪类选择器<h3 id="4-4-1、链接伪类选择器🔥"><a href="#4-4-1、链接伪类选择器🔥" class="headerlink" title="4.4.1、链接伪类选择器🔥"></a>4.4.1、链接伪类选择器🔥</h3></li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* a是标签选择器 */</span><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>gray<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* :hover 是链接伪类选择器，鼠标经过 */</span><span class="token selector">a <span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*鼠标经过的时候，由原来的灰色  变成了红色*/</span>   <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="4-4-2、-focus伪类选择器🔥"><a href="#4-4-2、-focus伪类选择器🔥" class="headerlink" title="4.4.2、 :focus伪类选择器🔥"></a>4.4.2、 :focus伪类选择器🔥</h3><ul><li><code>:focus</code>伪类选择器用于<strong>选取获得焦点的表单元素</strong></li><li>焦点就是光标，一般情况<code>&lt;input&gt;</code>类表单元素才能获取，因此这个选择器也主要针对表单元素来说</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">input : focus </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-5、复合选择器总结🔥"><a href="#4-5、复合选择器总结🔥" class="headerlink" title="4.5、复合选择器总结🔥"></a>4.5、复合选择器总结🔥</h3><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是空格 .nav a</td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是大于 .nav&gt;p</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集团声明</td><td>较多</td><td>符号是逗号 .nav,.header</td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住a{}和a:hover ，实际开发的写法</td></tr><tr><td>:focus选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>input:focus 记住这个写法</td></tr></tbody></table><h2 id="5、CSS元素显示模式🔥"><a href="#5、CSS元素显示模式🔥" class="headerlink" title="5、CSS元素显示模式🔥"></a>5、CSS元素显示模式🔥</h2><h3 id="5-1、块元素🔥"><a href="#5-1、块元素🔥" class="headerlink" title="5.1、块元素🔥"></a>5.1、块元素🔥</h3><ol><li><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标签是最典型的块元素。</p></li><li><p>块级元素的特点：</p><p> ①：比较霸道，自己独占一行</p><p> ②：<mark>高度，宽度，外边距以及内边距</mark>都可以控制</p><p> ③：宽度默认是容器（父级宽度）的100%</p><p> ④：是一个容器及盒子，里面可以放行内或块级元素</p></li><li><p>注意：</p><p> ①：文字类的元素内不能使用块级元素</p><p> ②：<code>&lt;p&gt;</code> 标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></p><p> ③：同理，<code>&lt;h1&gt;~&lt;h6&gt;</code>等都是文字类块级标签，里面也不能存放其他块级元素。</p></li></ol><h3 id="5-2、行内元素🔥"><a href="#5-2、行内元素🔥" class="headerlink" title="5.2、行内元素🔥"></a>5.2、行内元素🔥</h3><ol><li><p>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等</p></li><li><p>其中<code>&lt;span&gt;</code>标签是<strong>最典型的行内元素</strong>。有的地方也将行内元素称为<strong>内联元素</strong>。</p></li><li><p><strong>行内元素的特点</strong>：</p><p> ①：相邻行内元素在一行上，一行可以显示多个</p><p> ②：高，宽直接设置是无效的</p><p> ③：默认宽度就是它本身内容的宽度</p><p> ④：行内元素只能容纳文本或其他行内元素</p></li></ol><p><strong>注意</strong>：</p><ul><li>链接里面不能再放链接</li><li>特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式最安全<h3 id="5-3、行内块元素🔥"><a href="#5-3、行内块元素🔥" class="headerlink" title="5.3、行内块元素🔥"></a>5.3、行内块元素🔥</h3></li></ul><ol><li><p>在行内元素中有几个特殊的标签 —— <code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>，它们同时具有块元素和行内元素的特点</p></li><li><p>有些资料称它们为<strong>行内块</strong>元素</p></li><li><p><mark>特点</mark>：</p><p> ①：和相邻行内元素在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)</p><p> ②：默认宽度就是它本身内容的宽度(行内元素特点)</p><p> ③：高度，行高，外边距以及内边距都可以控制(块级元素特点)</p></li></ol><h3 id="5-4、元素显示模式总结🔥"><a href="#5-4、元素显示模式总结🔥" class="headerlink" title="5.4、元素显示模式总结🔥"></a>5.4、元素显示模式总结🔥</h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h3 id="5-5、元素显示模式转换🔥"><a href="#5-5、元素显示模式转换🔥" class="headerlink" title="5.5、元素显示模式转换🔥"></a>5.5、元素显示模式转换🔥</h3><ul><li>转换为块元素： <code>display:block</code></li><li>转换为行内元素： <code>display:inline</code></li><li>转换为行内块元素: <code>display:inline-block</code></li></ul><h3 id="5-6、👉小技巧🔥"><a href="#5-6、👉小技巧🔥" class="headerlink" title="5.6、👉小技巧🔥"></a>5.6、👉小技巧🔥</h3><p>CSS没有给我们提供文字垂直居中的代码，这里我们可以用一个小技巧来实现单行文字垂直居中</p><p>解决方案：</p><ul><li>让文字的行高等于盒子的高度，就可以让文字在当前盒子内垂直居中。</li></ul><p><img src="https://img-blog.csdnimg.cn/9c556ac433af41b5888802765754b8f5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></p><p>简单理解：</p><ul><li>行高的上空隙和下空隙把文字挤到中间了</li><li>如果是行高小于盒子高度，文字会偏上，如果行高大于盒子高度，则文字偏下</li></ul><h2 id="6、CSS背景🔥"><a href="#6、CSS背景🔥" class="headerlink" title="6、CSS背景🔥"></a>6、CSS背景🔥</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。</p><p>背景属性可以设置<strong>背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定</strong>等。</p><h3 id="6-1、background-color🔥"><a href="#6-1、background-color🔥" class="headerlink" title="6.1、background-color🔥"></a>6.1、background-color🔥</h3><ul><li><mark>background-color</mark> 属性定义了元素的背景颜色<pre class=" language-css"><code class="language-css"><span class="token property">background-image</span> <span class="token punctuation">:</span> none | <span class="token url">url(url)</span></code></pre><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无背景图（默认）</td></tr><tr><td>url</td><td>使用绝对或相地址指定的背景图像</td></tr></tbody></table></li></ul><p>注意：<strong>背景图片后面的地址，千万不要忘记加URL，同时里面的路径不要加引号</strong>。</p><h3 id="6-3、background-repeat🔥"><a href="#6-3、background-repeat🔥" class="headerlink" title="6.3、background-repeat🔥"></a>6.3、background-repeat🔥</h3><ul><li><mark>background-repeat</mark> 属性定义背景图像的平铺<pre class=" language-css"><code class="language-css"><span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat| no-repeat| repeat-x| repeat-y</code></pre><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺(默认的)</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向平铺</td></tr></tbody></table></li></ul><h3 id="6-4、background-position🔥"><a href="#6-4、background-position🔥" class="headerlink" title="6.4、background-position🔥"></a>6.4、background-position🔥</h3><ul><li><mark>background-position</mark> 属性可以改变图片在背景中的位置<pre class=" language-css"><code class="language-css"><span class="token property">background-position</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span></code></pre></li><li>参数：X坐标 Y坐标</li><li>可以使用 方位名词 或者 精确单位</li></ul><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>length</td><td>百分数由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top、center、bottom、left、center、right 方位名词</td></tr></tbody></table><ol><li><p><mark>参数是方位名词</mark></p><p> ①：如果指定的两个值都是方位名词，则两个值前后顺序无关，比如<code>left top</code>和<code>top left</code></p><p> ②：如果只指定了一个方位名词，另一个值省略，则第二个值默认<strong>居中对齐</strong></p></li><li><p><mark>参数是精准单位</mark></p><p> ①：如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</p><p> ②：如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</p></li><li><p><mark>参数是混合单位</mark></p><p> ①：如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</p></li></ol><h3 id="6-5、background-attachment🔥"><a href="#6-5、background-attachment🔥" class="headerlink" title="6.5、background-attachment🔥"></a>6.5、background-attachment🔥</h3><ul><li><mark>background-attachment</mark> 属性设置背景图像是否固定或者随着页面的其余部分滚动<pre class=" language-css"><code class="language-css"><span class="token property">background-attachment</span> <span class="token punctuation">:</span> scroll | fixed</code></pre><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table></li></ul><h3 id="6-6、背景复合写法🔥"><a href="#6-6、背景复合写法🔥" class="headerlink" title="6.6、背景复合写法🔥"></a>6.6、背景复合写法🔥</h3><ul><li><code>background</code> ： 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置    <pre class=" language-css"><code class="language-css"><span class="token property">background</span> <span class="token punctuation">:</span> transparent <span class="token url">url(image.jpg)</span> repeat-y fixed top<span class="token punctuation">;</span></code></pre>这是实际开发中，我们更提倡的写法。</li></ul><h3 id="6-7、背景色半透明🔥"><a href="#6-7、背景色半透明🔥" class="headerlink" title="6.7、背景色半透明🔥"></a>6.7、背景色半透明🔥</h3><p>CSS3为我们提供了背景颜色半透明的效果</p><pre class=" language-css"><code class="language-css"><span class="token property">background</span> <span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li><p>最后一个参数是 <code>alpha</code> 透明度 ，取值范围在0~1之间</p></li><li><p>我们习惯把0.3的 0省略掉，写为<code>background(0,0,0,.3)</code>;</p></li><li><p>注意：<strong>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</strong></p><h3 id="6-8、背景总结🔥"><a href="#6-8、背景总结🔥" class="headerlink" title="6.8、背景总结🔥"></a>6.8、背景总结🔥</h3><table><thead><tr><th>属性</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td><td>预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td>背景图片</td><td>url(图片路径)</td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/ no-repeat /repeat-x/repeat-y</td></tr><tr><td>background-position</td><td>背景位置</td><td>length/position 分别是x 和y坐标</td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll(背景滚动) /fixed(背景固定)</td></tr><tr><td>背景简写</td><td>书写更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td></tr><tr><td>背景色半透明</td><td>背景颜色半透明</td><td>background : rgba(0,0,0,0.3);后面必须是四个值</td></tr></tbody></table></li></ol><p>背景图片:实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置.</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论速成笔记</title>
      <link href="/2022/03/13/shu-ju-ku-xi-tong-gai-lun-su-cheng-bi-ji/"/>
      <url>/2022/03/13/shu-ju-ku-xi-tong-gai-lun-su-cheng-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-数据库的四个基本概念"><a href="#1-数据库的四个基本概念" class="headerlink" title="(1)数据库的四个基本概念"></a>(1)数据库的四个基本概念</h2><p>①数据：描述事物的符号记录。    </p><p>②数据库：概括地讲，数据库数据具有永久存储、有组织和可共享的三个基本特点。</p><p>严格地讲：数据库是⻓期储存在计算机内、有组织的、可共享的⼤量数据的集合。数据库中的数据按⼀定的数据模型组织、描述和储存，具有较⼩的冗余度、较⾼的数据独⽴性和易扩展性，并可为各种⽤户共享。</p><p>③数据库管理系统：是位于⽤户和操作系统之间的⼀层数据管理软件。和操作系统⼀样是计算机的基础软件。</p><p>主要功能：</p><ol><li><p>数据定义功能</p></li><li><p>数据组织、存储和管理</p></li><li><p>数据操纵功能</p></li><li><p>数据库的事务管理和运⾏管理、数据库的建⽴和维护功能、其他功能（通信功能，数据转换功能，互访和互操作功能等）</p></li></ol><p>④数据库系统：是由数据库、数据库管理系统（及其应⽤开发⼯具）、应⽤程序和数据库管理员（DBA）组成的存储、管理、处理和维护数据的系统。</p><p><img src="https://img-blog.csdnimg.cn/8dfa2ae3e84745bf8c2095a593e1fae3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="2-数据库的发展阶段"><a href="#2-数据库的发展阶段" class="headerlink" title="(2)数据库的发展阶段"></a>(2)数据库的发展阶段</h2><ol><li><p>⼈⼯管理阶段：数据不保存、不共享，不具有独⽴性。</p></li><li><p>⽂件系统阶段：可保存，但共享性差，冗余度⼤，独⽴性差。</p></li><li><p>数据库管理系统：数据库系统的出现使信息系统从以加⼯数据的程序为中⼼转向围绕共享的数据库为中⼼的新阶段</p></li></ol><p>实现整体数据的结构化</p><p>数据的共享性⾼、冗余度低且易扩充：数据共享可以⼤⼤减少数据冗余，节约存储空间</p><p>数据独⽴性⾼：</p><p>物理独⽴性：是指⽤户的应⽤程序与数据库中数据的物理存储是相互独⽴的。</p><p>逻辑独⽴性：是指⽤户的应⽤程序与数据库的逻辑结构是相互独⽴的。</p><p>数据由数据库管理系统统⼀管理和控制</p><p>(3) 数据模型:</p><p>（1）两类数据模型：概念模型+逻辑模型和物理模型 （⼈们⾸先将现实世界抽象为信息世界，然后将信息世界转还为机器世界） </p><ol><li>概念模型：也称信息模型，它是按⽤户观点来对数据和信息建模，主要⽤于数据库设计。</li></ol><p>基本概念： </p><p>实体：客观存在并可相互区别的事物。 ⼈ </p><p>属性：实体所具有的某⼀特性。 ⼈的⿐⼦、 嘴巴 </p><p>码：唯⼀标识实体的属性。 学号 </p><p>实体型：⽤实体名及其属性集合来抽象和刻画同类实体。 含有⿐⼦和嘴巴的⼈ </p><p>实体集：同⼀类型实体的集合。学校 </p><p>联系：实体之间的联系通常是指不同实体集之间的联系。 </p><p>实体之间的联系有⼀对⼀、⼀对多和多对多等多种联系。 </p><p>概念模型的⼀种表示⽅法：实体-联系⽅法。</p><p>⽤E-R图来描述现实世界的概念模型，E-R⽅法也称为E-R模型。 </p><ol start="2"><li>逻辑模型：它是按计算机系统的观点对数据建模，主要⽤于数据库管理系统的实现。</li></ol><p>包括: </p><pre><code>1. 层次模型    2. ⽹状模型       3. 关系模型(第三章我们主要讲它) </code></pre><p>物理模型：是对数据最底层的抽象，它描述数据在系统内部的表示⽅法和存取⽅法，或在磁盘或磁带上的存储⽅式和存取⽅法，是⾯向计算机系统的。</p><p>联系:</p><p>实体之间的联系通常是指不同实体集之间的联系。</p><p>实体之间的联系有⼀对⼀、⼀对多和多对多等多种联系。</p><p>实体内部的联系通常是指实体各属性之间的联系</p><h2 id="3-ER图"><a href="#3-ER图" class="headerlink" title="(3) ER图"></a>(3) ER图</h2><p><img src="https://img-blog.csdnimg.cn/557feba7ddc84399a2b4962602ec1dd2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="4-常用的数据模型"><a href="#4-常用的数据模型" class="headerlink" title="(4) 常用的数据模型"></a>(4) 常用的数据模型</h2><p>常⽤的数据模型：层次模型，⽹状模型，关系模型。</p><p>⾯向对象数据模型，对象关系数据模型，半结构化数据模型。</p><p>层次模型：</p><p><mark>1.有且只有⼀个结点没有双亲结点，这个结点称为根结点。</mark></p><p><mark>2.根以外的其他结点有且只有⼀个双亲结点。</mark></p><p><img src="https://img-blog.csdnimg.cn/5798c05d1071455d9cc8d3b6966d52b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><mark>⽹状模型：</mark></p><p>条件：</p><ol><li><p>允许⼀个以上的结点⽆双亲。 </p></li><li><p>⼀个结点可以有多于⼀个双亲。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/de01a7e787904a678b49b615cc6dd93b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><mark>关系模型:</mark></p><p><img src="https://img-blog.csdnimg.cn/4b4b4f0de91649b4a7e003160d5c450a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>关系：⼀个关系对应通常说的⼀张表。 元组：表中的⼀⾏。属性：表中的⼀列。码：也称码键，表中的某个属性组。域：是⼀组具有相同数据类型的值的集合。分量：元组中的⼀个属性。</code></pre><h2 id="5-数据库系统的结构"><a href="#5-数据库系统的结构" class="headerlink" title="(5) 数据库系统的结构"></a>(5) 数据库系统的结构</h2><ol><li><p>模式数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及型的描述，不涉及具体的值。其⼀个具体值称为模式的⼀个实例。</p><p> 模式是相对稳定的，实例是相对变动的。</p><p> 三级模式结构：外模式+模式+内模式</p><p> 外模式：也称⼦模式或⽤户模式，它是数据库⽤户（包括应⽤程序员和最终用户）能够看⻅和使⽤的局部数据的逻辑结构和特征的描述，是数据库⽤户的数据视图，是与某⼀应⽤有关的数据的逻辑表示。</p><p> 模式：也称为逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有⽤户的公共数据</p><p> 内模式：也称存储模式，⼀个数据库只有⼀个内模式。它是数据物理结构和存储⽅式的描述，是数据在数据库内部的组织⽅式。</p></li><li><p>⼆级映像：</p><p> 外模式/模式映像：当模式改变时，由数据库管理员对各个外模式/模式映像作相应改变，可以使外模式保持不变。</p><p> 应⽤程序不必修改。保证了数据与程序的逻辑独⽴性。</p><p> 模式/内模式映像：当数据库的存储结构改变时，有数据库管理员对模式/内模式作相应改变，可以使模式保持不变,从⽽应⽤程序也不⽤改变。保证了数据与程序的物理独⽴性。</p><p> 数据与程序之间的独⽴性使得数据的定义和描述可以从应⽤程序中分离出去。</p><p> 另外，由于数据的存取由数据库管理系统管理，</p><p> 从⽽简化了应⽤程序的编制，⼤⼤减少了应⽤程序的维护和修改。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/3867716bc94e4c059ac03ce567db89a4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="6-数据库系统的组成"><a href="#6-数据库系统的组成" class="headerlink" title="(6) 数据库系统的组成"></a>(6) 数据库系统的组成</h2><ol><li><p>硬件平台及数据库：⾜够⼤内存、磁盘或磁盘阵列等设备，较高的通道能⼒以提高数据的传输能力</p></li><li><p>软件：数据库管理系统，⽀持数据库管理系统运⾏的操作系统，具有与数据库接⼝的⾼级语⾔及其编译系统，以数据库管理系统为核⼼的应⽤开发⼯具，为特定应⽤环境开发的数据库应⽤系统。</p></li><li><p>⼈员：开发、管理和使⽤数据库的⼈员主要包括数据库管理员、系统分析员和数据库设计⼈员、应⽤程序员和最终⽤户。</p></li></ol><p>数据库管理员职责：决定数据库中的信息内容和结构、决定数据库的存储结构和存取策略、定义数据的安全性要求和完整性约束条件、监控数据库的使⽤和运⾏、数据库的改进和重组、重构。</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="（1）关系模式-了解即可"><a href="#（1）关系模式-了解即可" class="headerlink" title="（1）关系模式(了解即可)"></a>（1）关系模式(了解即可)</h2><p>关系模式：对关系的描述 </p><p>那么什么是关系？</p><p>关系是⼀张表，⼀张⼆维表</p><p>关系有哪些需要描述？ P41</p><ol><li>关系中有哪些属性</li><li>这些属性来⾃哪些域</li><li>属性与域之间的映射关系</li></ol><p>可以形象地表示为</p><p>R(U,D,DOM,F)</p><p>R:关系名</p><p>U:所有属性名</p><p>D：属性来⾃哪些域</p><p>DOM：属性和域的映射</p><p>F:属性间的依赖关系</p><p>关系数据库：</p><p>关系数据库也有关系数据库模式</p><h2 id="（2）关系操作-后面会讲"><a href="#（2）关系操作-后面会讲" class="headerlink" title="（2）关系操作 (后面会讲)"></a>（2）关系操作 (后面会讲)</h2><p>1 关系操作：</p><p>插⼊、查询、删除、修改 </p><p>其中查询操作分为：选择、投影、连接、除法、并、差、交、笛卡尔积 </p><p>查询操作的基本操作：选择、投影、并、差、笛卡尔积 </p><h2 id="（3）关系语言的分类"><a href="#（3）关系语言的分类" class="headerlink" title="（3）关系语言的分类"></a>（3）关系语言的分类</h2><p>分为</p><ul><li>关系代数语言(重点重点) </li><li>关系演算语言(不重要) </li><li>SQL语言(后⾯重点讲) <h3 id="关系代数语言"><a href="#关系代数语言" class="headerlink" title="关系代数语言"></a>关系代数语言</h3>关系代数是⼀种抽象的查询语⾔，它⽤对关系的运算来表达查询。</li></ul><p>三⼤要素：运算对象（关系）、运算符（集合运算符和专⻔的关系运算符）和运算结果（关系）</p><p><img src="https://img-blog.csdnimg.cn/4060e1af2722455da944235dfddc7f32.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p> 关系代数运算：5种基本运算：并，差，笛卡⼉积，选择，投影及交，连接，除。</p><p> <strong>交</strong></p><p> <img src="https://img-blog.csdnimg.cn/57d7f4e335e14426a13a6a575db594a3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p> <strong>并</strong></p><p> <img src="https://img-blog.csdnimg.cn/502878d87d7e45eaa99c9d994d5d239c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_10,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>差</strong></p><p><img src="https://img-blog.csdnimg.cn/bac3ffd381654cdc92ce9ade49ddcfef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_11,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>笛卡尔积</strong></p><p><img src="https://img-blog.csdnimg.cn/d95de39a21184bbb8d6ff3172e7d1fc7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>选择</strong></p><p><img src="https://img-blog.csdnimg.cn/a0bf9a4f484541f38fcb0af18001eab9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/840b5174cc434077a7e6a463078e8154.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>投影</strong></p><p><img src="https://img-blog.csdnimg.cn/2025c26e48af4de3b099df9a3fa90e7e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>连接</strong></p><p><img src="https://img-blog.csdnimg.cn/5a0d296ebde54370b94e16266172164d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_9,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><mark>自然连接: 把共同属性进行等值连接 :</mark></p><p><img src="https://img-blog.csdnimg.cn/e38b8139c3cd43a08616c79b259c8b31.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>悬浮元组（Dangling tuple） :</p><p>两个关系R和S在做⾃然连接时，关系R中某些元组有可能在S中<mark>不存在公共属性上值相等的元组</mark>，从⽽造成R中这些元组在操作时被<mark>舍弃</mark>了，这些被舍弃的元组称为<mark>悬浮元组</mark>。</p><p> 1 外连接（Outer Join）</p><p>如果把悬浮元组也保存在结果关系中，⽽在其他属性上填空值(Null)，就叫做外连接</p><p>左外连接(LEFT OUTER JOIN或LEFT JOIN)</p><p>只保留左边关系R中的悬浮元组</p><p>右外连接(RIGHT OUTER JOIN或RIGHT JOIN)</p><p>只保留右边关系S中的悬浮元组</p><p><strong>除 保留R中满足S的,而且R中列要去掉S的列</strong></p><p><img src="https://img-blog.csdnimg.cn/96c79d98e9334cc5948e9645ef863806.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/96c79d98e9334cc5948e9645ef863806.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="（4）关系的完整性"><a href="#（4）关系的完整性" class="headerlink" title="（4）关系的完整性"></a>（4）关系的完整性</h2><ol><li><p>实体完整性 主码唯一且非空 </p></li><li><p>参照完整性 外码要么为空,要么对应另一表的主码 </p></li><li><p>用户定义完整性 你自己写的要完整,比如学号多少,姓名,班级,专业之类</p></li></ol><h1 id="第三章-SQL语言-上"><a href="#第三章-SQL语言-上" class="headerlink" title="第三章 SQL语言(上)"></a>第三章 SQL语言(上)</h1><h2 id="（1）SQL的基本概念"><a href="#（1）SQL的基本概念" class="headerlink" title="（1）SQL的基本概念"></a>（1）SQL的基本概念</h2><pre><code>SQL是Structured Query Language的缩写，意思是结构化查询语⾔，是⼀种在数据库管理系统中查询或对数据库⾥⾯的数据进⾏更改的语⾔</code></pre><p><strong>而数据库管理系统呢,主要是 :</strong></p><p><img src="https://img-blog.csdnimg.cn/1099cc56ab1d4dfbb8de11abf44b09d8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>不同数据库管理系统的SQL语言略有不同</strong></p><p>⼀、 数据定义语⾔DDL（Data Ddefinition Language）</p><p>SQL数据定义语⾔主要⽤来定义逻辑结构，包括定义基表，视图和索引。</p><p>删除表 定义表 修改表</p><p>⼆、 数据查询语⾔DQL（Data Query Language</p><p>SQL的数据查询语⾔主要⽤来对数据库中的各种数据对象进⾏查询。</p><p>三、 数据操纵语⾔DML（Data Manipulation Language）</p><p>SQL的数据操纵语⾔，⽤于改变数据库中的数据，包括插⼊，删除，修改</p><p>四、 数据控制功能DCL（Data Control Language）</p><p>SQL的数据控制语⾔，对表和视图的授权，完整性规则的描述以及事务开始和结束等控制语句。</p><h2 id="（2）SQL语言的特点"><a href="#（2）SQL语言的特点" class="headerlink" title="（2）SQL语言的特点"></a>（2）SQL语言的特点</h2><p>1.综合统⼀(独⽴完成数据库⽣命周期中的全部活动，包括定义关系模式、录⼊数据、建⽴数据库、査询、更新、维护、数据库重构、数据库安全性控制等⼀系列操作)</p><p>2.⾼度⾮过程化 (⽤户只需提出“做什么”，⽽不必指明“怎么做”。)</p><p>3.⾯向集合的操作⽅式 (SQL采⽤集合操作⽅式)</p><p>4.以同⼀种语法结构提供两种使⽤⽅式(SQL既是⾃含式语⾔，⼜是嵌⼊式语⾔。</p><pre><code>SQL语句能够嵌⼊到⾼级语⾔程序中</code></pre><p>5.语⾔简洁，易学易⽤ (SQL语⾔语法简单，接近英语⼝语，因此容易学习，也容易使⽤。) </p><h2 id="（3）SQL的基本语法"><a href="#（3）SQL的基本语法" class="headerlink" title="（3）SQL的基本语法"></a>（3）SQL的基本语法</h2><p><strong>1. 我们学习下SQL的数据类型(变量类型)</strong></p><p><img src="https://img-blog.csdnimg.cn/79317d6fed9c4b568c19db66e678104a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>2. 首先我们看模式定义&amp;删除</strong></p><p><mark>模式定义</mark></p><p><img src="https://img-blog.csdnimg.cn/0e3ae8b16c394444af2c497def865ee7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><mark>模式定义+视图</mark></p><p><img src="https://img-blog.csdnimg.cn/c30a4ed1895044c9a1caf1c4208a8b77.png#pic_center"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">schema</span> <span class="token string">"Learn"</span> <span class="token keyword">authorization</span> zhangxu <span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span> age <span class="token keyword">int</span> <span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><mark>模式删除</mark></p><p><img src="https://img-blog.csdnimg.cn/1032ffc8e4684a4fbd9a120a56d84889.png#pic_center"></p><p>删除模式, 其中 CASCADE 和RESTRICT 必须⼆选⼀, </p><p>CASCADE是(级联) 删除模式的同时也把该模式的所有数据库对象删除. </p><p>RESTRICT(限制) 如果该模式下有下属对象,⽐如表视图 就拒绝这个删除语句的执⾏</p><p><strong>3. 表的定义和删除和修改</strong></p><p><mark>定义</mark></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span> 字段名 类型 字段约束<span class="token punctuation">,</span> 字段名 类型 字段约束<span class="token punctuation">,</span> 字段名 类型 字段<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//创建表</span>⽐如<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">,</span>sex char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><mark>删除</mark></p><p><img src="https://img-blog.csdnimg.cn/d8da9a9182644f3faf907fd3331ab47d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>CASCADE呢 是如果表有外键,视图,触发器的话,也会强⾏删除, RESTRICT恰恰相反</p><p><mark>修改</mark></p><p><img src="https://img-blog.csdnimg.cn/0c7186950aab4fd1afe57baa3a5a66b5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>4. 索引的建立与修改&amp;删除</strong></p><p>数据量⽐较⼤的时候, 查询耗时间⻓, 建⽴索引可以有效减少消耗时间</p><p>索引可以建⽴在⼀列或者多列上</p><p><mark>建立</mark></p><p><img src="https://img-blog.csdnimg.cn/eebde40f3b374606afa6ec498a34dc2f.png#pic_center"></p><p>CLUSTER :聚簇索引: 物理顺序与索引的逻辑顺序相同。⽐如买书</p><p>UNIQUE 唯⼀索引</p><p><img src="https://img-blog.csdnimg.cn/e58f327869dc4b79a9e4620eeffeed47.png#pic_center"></p><p><mark>修改</mark></p><p><img src="https://img-blog.csdnimg.cn/ab695b9f2e5543c683038ce786f96c17.png#pic_center"></p><p><mark>删除</mark></p><p><img src="https://img-blog.csdnimg.cn/89c23c19fa88435197a123433a7668e8.png#pic_center"></p><h1 id="第四章-SQL语言-中"><a href="#第四章-SQL语言-中" class="headerlink" title="第四章 SQL语言(中)"></a>第四章 SQL语言(中)</h1><h2 id="1-查询所有-amp-查询部分列"><a href="#1-查询所有-amp-查询部分列" class="headerlink" title="1. 查询所有 &amp; 查询部分列"></a>1. 查询所有 &amp; 查询部分列</h2><p><img src="https://img-blog.csdnimg.cn/22dc7fa448204bbeb13769b7e79704bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Student</code></pre><h2 id="2-查询给列起别名-给表起别名也是一样"><a href="#2-查询给列起别名-给表起别名也是一样" class="headerlink" title="2. 查询给列起别名&nbsp; 给表起别名也是一样"></a>2. 查询给列起别名&nbsp; 给表起别名也是一样</h2><p><img src="https://img-blog.csdnimg.cn/b83e77ac36a94f42a6f0a91614a4b7ce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_10,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> username 姓名 <span class="token keyword">from</span> Student等价于<span class="token keyword">select</span> username <span class="token keyword">as</span> 姓名 <span class="token keyword">from</span> Student</code></pre><p><img src="https://img-blog.csdnimg.cn/ad56dd957a284a548d9500e4888326b8.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/506af11e9370437aaf86af020af1d196.png#pic_center"></p><h2 id="3-结果去重"><a href="#3-结果去重" class="headerlink" title="3. 结果去重"></a>3. 结果去重</h2><p><mark>加上DISTINCT关键字就好</mark></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> title <span class="token keyword">from</span> edu_course</code></pre><h2 id="4-查询结果加条件"><a href="#4-查询结果加条件" class="headerlink" title="4. 查询结果加条件"></a>4. 查询结果加条件</h2><p><strong>首先我们看下条件</strong></p><p><img src="https://img-blog.csdnimg.cn/6470ccc45a6243dab73cf7172a4107a2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/0dc3ec329dba47089fe7be648a5984f2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> edu_course <span class="token keyword">where</span> price<span class="token operator">></span><span class="token number">2</span><span class="token comment" spellcheck="true">//查询出edu_course表中price>2的全部数据</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2fa4b6b28c83437e83ffe31a4eb88270.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> edu_course <span class="token keyword">where</span> price <span class="token operator">between</span> <span class="token number">21</span> <span class="token operator">and</span> <span class="token number">50</span><span class="token comment" spellcheck="true">//查询出edu_course表中price在21~50之间的的全部数据</span></code></pre><p><img src="https://img-blog.csdnimg.cn/c808f8c81dc4449da2f30250607772d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>%可以代替多个字符</code></pre><p><img src="https://img-blog.csdnimg.cn/5ece5a099b204ba89fb2905c433a4910.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>_只能替换⼀个字符</code></pre><p><img src="https://img-blog.csdnimg.cn/a9cd696343ce42a7911310fa1cc1dc4e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/9a651cb60c06443bb253723363c99d74.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>查询price&gt;2并且teacher_id=1 和 title=mysql速成的所有数据</code></pre><p><img src="https://img-blog.csdnimg.cn/73771dc59d19499891ae0536a435b3dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>按照lesson_num的顺序排列</code></pre><p><img src="https://img-blog.csdnimg.cn/4456b6fadd784648a0444bc3b827ea09.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>按照lesson_num的顺序降序排列</code></pre><h2 id="5-聚集函数的使用"><a href="#5-聚集函数的使用" class="headerlink" title="5.聚集函数的使用"></a>5.聚集函数的使用</h2><p><img src="https://img-blog.csdnimg.cn/3970d94eef7d4e269d6ce5d3876ed801.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>加上DISTINCT是去除列⾥⾯重复的项来计算</code></pre><p><img src="https://img-blog.csdnimg.cn/ed1144e53ace48d9b6a3b47d71654fc6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>title的总数</code></pre><p><img src="https://img-blog.csdnimg.cn/ceaa9e44c1cf402fbe10464d9e9c8590.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>去掉重复项后title的总数</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">AVG</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> edu_course  <span class="token comment" spellcheck="true">//查询price的平均值</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> edu_course  <span class="token comment" spellcheck="true">//查询price的最大值</span><span class="token keyword">select</span> <span class="token function">MIN</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> edu_course  <span class="token comment" spellcheck="true">//查询price的最小值</span></code></pre><h2 id="6-分组查询"><a href="#6-分组查询" class="headerlink" title="6. 分组查询"></a>6. 分组查询</h2><p><strong>GROUP BY分组 ,如果要进行筛选,请使用<mark>Having</mark></strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> title <span class="token keyword">from</span> edu_course <span class="token keyword">group</span> <span class="token keyword">by</span> title</code></pre><p><img src="https://img-blog.csdnimg.cn/f7f32afaf0b44d47a98b866b35a72494.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="7-连接"><a href="#7-连接" class="headerlink" title="7. 连接"></a>7. 连接</h2><p><strong>等值,非等值连接 , 以where为关键词</strong></p><p><img src="https://img-blog.csdnimg.cn/25cbd2a0449e471088ba549701c0ac33.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="8-自身连接"><a href="#8-自身连接" class="headerlink" title="8. 自身连接"></a>8. 自身连接</h2><pre><code>⼀个表与⾃身连接 ,为本身这个表起两个别名,然后进⾏操作</code></pre><h2 id="9-外连接"><a href="#9-外连接" class="headerlink" title="9. 外连接"></a>9. 外连接</h2><pre><code>把被舍弃的值, 也保留在结果中,但是要加NULL</code></pre><p><img src="https://img-blog.csdnimg.cn/b8b034a7ac4641a2a055e92d11142b8a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="10-多表查询"><a href="#10-多表查询" class="headerlink" title="10. 多表查询"></a>10. 多表查询</h2><pre><code>两个表以上的连接</code></pre><p><img src="https://img-blog.csdnimg.cn/52aa61dbcaaf449c8570dcd2f8500303.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="11-嵌套查询"><a href="#11-嵌套查询" class="headerlink" title="11. 嵌套查询"></a>11. 嵌套查询</h2><p><img src="https://img-blog.csdnimg.cn/45e77c4150b44623a7e07db4a368b0db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="12-带有ANY-ALL的子查询"><a href="#12-带有ANY-ALL的子查询" class="headerlink" title="12. 带有ANY ALL的子查询"></a>12. 带有ANY ALL的子查询</h2><p><img src="https://img-blog.csdnimg.cn/cbfd6987398e4faf811faad7cd5a0a25.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/1e975b40a0c04809a49a04f2344ea1b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="13-带EXISTs-的子查询"><a href="#13-带EXISTs-的子查询" class="headerlink" title="13. 带EXISTs 的子查询"></a><mark>13. 带EXISTs 的子查询</mark></h2><pre><code>not exists 如果后⾯的⼦查询没有值,返回1 否则为0 exists 相反</code></pre><p><img src="https://img-blog.csdnimg.cn/5cba75c03fcc43f99482217af7c5e581.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>最里面的子查询是 这个⼈没选⼀⻔课程外⾯的⼦查询是 没有这样的课程</code></pre><h2 id="14-集合查询"><a href="#14-集合查询" class="headerlink" title="14. 集合查询"></a>14. 集合查询</h2><p><strong>并</strong></p><p><img src="https://img-blog.csdnimg.cn/117d355b944c44feb0a4e8548d9394e2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>交</strong></p><p><img src="https://img-blog.csdnimg.cn/393086a1e664423c9fa733f36792752c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>差</strong></p><p><img src="https://img-blog.csdnimg.cn/6f47c2197e764e2abf097e6435752ca3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h1 id="第五章-SQL语言-下"><a href="#第五章-SQL语言-下" class="headerlink" title="第五章 SQL语言(下)"></a>第五章 SQL语言(下)</h1><h2 id="1-数据插入-修改-删除"><a href="#1-数据插入-修改-删除" class="headerlink" title="1. 数据插入 修改 删除"></a>1. 数据插入 修改 删除</h2><p><strong>插入</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token punctuation">[</span><span class="token punctuation">(</span> 字段列表 <span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">values</span><span class="token punctuation">(</span> 值列表 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标准添加（指定所有字段，给定所有的值） </span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>classid<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string">'zhangsan'</span> <span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">,</span> <span class="token string">'m'</span> <span class="token punctuation">,</span> <span class="token string">'lamp138'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定部分字段添加值 </span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu<span class="token punctuation">(</span>name<span class="token punctuation">,</span>classid<span class="token punctuation">)</span> <span class="token keyword">value</span><span class="token punctuation">(</span> <span class="token string">'lisi'</span> <span class="token punctuation">,</span> <span class="token string">'lamp138'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不指定字段添加值</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu <span class="token keyword">value</span><span class="token punctuation">(</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'wangwu'</span> <span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">,</span> <span class="token string">'w'</span> <span class="token punctuation">,</span> <span class="token string">'lamp138'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//批量添加值</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu <span class="token keyword">values</span><span class="token punctuation">(</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'zhaoliu'</span> <span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">,</span> <span class="token string">'w'</span> <span class="token punctuation">,</span> <span class="token string">'lamp94'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'uu01'</span> <span class="token punctuation">,</span> <span class="token number">26</span> <span class="token punctuation">,</span> <span class="token string">'m'</span> <span class="token punctuation">,</span> <span class="token string">'lamp94'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'uu02'</span> <span class="token punctuation">,</span> <span class="token number">28</span> <span class="token punctuation">,</span> <span class="token string">'w'</span> <span class="token punctuation">,</span> <span class="token string">'lamp92'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'qq02'</span> <span class="token punctuation">,</span> <span class="token number">24</span> <span class="token punctuation">,</span> <span class="token string">'m'</span> <span class="token punctuation">,</span> <span class="token string">'lamp92'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'uu03'</span> <span class="token punctuation">,</span> <span class="token number">32</span> <span class="token punctuation">,</span> <span class="token string">'m'</span> <span class="token punctuation">,</span> <span class="token string">'lamp138'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">'qq03'</span> <span class="token punctuation">,</span> <span class="token number">23</span> <span class="token punctuation">,</span> <span class="token string">'w'</span> <span class="token punctuation">,</span> <span class="token string">'lamp94'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>修改</strong></p><pre class=" language-sql"><code class="language-sql">格式: <span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span> <span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span> <span class="token punctuation">,</span> 字段n <span class="token operator">=</span> 值 n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> 条件 <span class="token comment" spellcheck="true">-- //将 id 为 11 的 age 改为 35 ， sex 改为 m 值 </span><span class="token keyword">update</span> stu <span class="token keyword">set</span> age<span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">,</span>sex<span class="token operator">=</span> <span class="token string">'m'</span> <span class="token keyword">where</span> id<span class="token operator">=</span> <span class="token number">11</span> <span class="token punctuation">;</span></code></pre><p><strong>删除</strong></p><pre class=" language-sql"><code class="language-sql">格式：<span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件 <span class="token punctuation">]</span><span class="token comment" spellcheck="true">//删除stu表中id值为100的数据</span><span class="token keyword">delete</span> <span class="token keyword">from</span> stu <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span></code></pre><h2 id="2-创建视图"><a href="#2-创建视图" class="headerlink" title="2. 创建视图"></a>2. 创建视图</h2><p><strong>什么是视图?</strong></p><p>视图(VIEW)也被称作虚表，即虚拟的表，是⼀组数据的逻辑表示,其本质是对应于⼀条SELECT结果集被赋予⼀个名字，即视图名字。</p><p>视图本身并不包含任何数据，它只包含映射到基表的⼀个查询语句，当基表数据发⽣变化，视图</p><p>⽬的: ⽅便,简化数据操作 </p><p>当我们业务需求要查出多张表的数据,这时我们可能会关联多张表查询处理.</p><p>如果这个查询sql复杂的话也影响了查询效率.</p><p>这个时候我们就可以创建视图,查询时候只需要 <code>select * from view</code> 就可以</p><p><img src="https://img-blog.csdnimg.cn/07b093196b55443d93e77e5bd4262f45.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>加了WITH CHECK OPTION 可以防⽌⽤户对<mark>不属于</mark>试图范围的操作进⾏<mark>拒绝</mark></p><p><strong>删除视图:</strong></p><p><img src="https://img-blog.csdnimg.cn/dede11df726b40d8850086c6a1a1b66f.png#pic_center"></p><p><strong>查询视图:</strong></p><p><img src="https://img-blog.csdnimg.cn/aefebe69fc7d45e5b7ab43e2f88d19be.png#pic_center"></p><p><strong>更新视图:</strong></p><pre><code>视图是不存在的,所以我们对视图的操作,最终要反映到对基本表的操作</code></pre><p><img src="https://img-blog.csdnimg.cn/8dcc3f02fa93411d823c5362bdc80ea0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h1 id="第六章-数据库的安全性"><a href="#第六章-数据库的安全性" class="headerlink" title="第六章 数据库的安全性"></a>第六章 数据库的安全性</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>不安全因素 :</p><ol><li><p>⾮授权对数据库的恶意存取和破坏 </p></li><li><p>数据库中重要的数据泄露 </p></li><li><p>安全环境的脆弱性</p></li></ol><p>⾃主存取控制⽅法 :</p><ul><li>grant revoke</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token operator">&lt;</span>权限<span class="token operator">></span> <span class="token keyword">on</span> <span class="token keyword">table</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">to</span> <span class="token operator">&lt;</span>⽤户<span class="token operator">></span>  <span class="token keyword">revoke</span> <span class="token operator">&lt;</span>权限<span class="token operator">></span> <span class="token keyword">on</span> <span class="token keyword">table</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>⽤户<span class="token operator">></span></code></pre><p>⽤户、⻆⾊</p><h2 id="安全性控制"><a href="#安全性控制" class="headerlink" title="安全性控制"></a>安全性控制</h2><p>数据库安全性控制 :</p><ol><li><p>⽤户身份鉴别</p><ul><li><p>静态⼝令鉴别</p></li><li><p>动态⼝令鉴别</p></li><li><p>⽣物特征鉴别</p></li><li><p>智能卡鉴别</p></li></ul></li><li><p>存取控制</p></li><li><p>⾃主存取控制⽅法(重点讲解); 字⾯意思就是我们⽤户可以⾃定义和分配其他⽤户的操作</p></li></ol><p>主要通过grant revoke来进⾏控制</p><p>由两个元素构成: 数据库对象 和 操作权限</p><p>我们定义⽤户的存取权限 成为授权</p><p>主要存取权限</p><p><img src="https://img-blog.csdnimg.cn/d45d44d6c29f4150ad4aa7846436572f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>Reference权限代表是否允许创建外键 </p><ol start="4"><li>授权 Grant</li></ol><p>Grant单词翻译:</p><p>vt.承认；同意；准许；授予</p><p>n.拨款；补助⾦；授给物（如财产、授地、专有权、补助、拨款等）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Grant</span> <span class="token operator">&lt;</span>权限<span class="token operator">></span> <span class="token keyword">on</span> 表名<span class="token punctuation">[</span><span class="token punctuation">(</span>列名<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">to</span> ⽤户 <span class="token keyword">With</span> <span class="token keyword">grant</span> <span class="token keyword">option</span></code></pre><p>授权命令是由数据库管理员使⽤的，若给⽤户分配权限时带With grant option⼦句，则普通⽤户获权后,可把⾃⼰的权限授予其他⽤户。</p><p>回收权限 revoke</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">REVOKE</span> <span class="token operator">&lt;</span>权限<span class="token operator">></span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>数据对象<span class="token operator">></span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>⽤户名<span class="token operator">></span> <span class="token keyword">cascade</span></code></pre><p>revoke翻译:</p><p>vt.撤销，取消；废除</p><p><img src="https://img-blog.csdnimg.cn/1f70792a02414d63913d9982887b61a7.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/dfb41a35238a411d8ab437f35a1b6562.png#pic_center"></p><ol start="5"><li><p>数据库⻆⾊</p><p> ⻆⾊指的是⼀类⼈，⽐如说CEO 总监 普通职员 ,可以给⼀类⼈授权</p><ol><li><p>⻆⾊的创建: </p><p> create role &lt;⻆⾊名&gt; create role CEO</p></li><li><p>⻆⾊授权</p><p> grant &lt;权限&gt; on &lt;对象类型&gt; 对象名 to &lt;⻆⾊1&gt;,&lt;⻆⾊2&gt; </p><p> grant select on Student to CEO</p></li><li><p>把⻆⾊授权个其他⽤户或者⻆⾊</p><p> grant &lt;⻆⾊&gt; to ⻆⾊或者⽤户名字 [with admin option]</p><p> grant CEO to lihua</p><p> 如果加上with admin option ,意味着, 这个⽤户还可以吧这权限授予给其他⻆⾊或者⽤户</p></li><li><p>⻆⾊权限的收回</p><p> revoke &lt;权限&gt; on &lt;对象名&gt; from ⻆⾊名字</p><p> revoke select on Student from CEO</p></li></ol></li></ol><h2 id="视图机制"><a href="#视图机制" class="headerlink" title="视图机制"></a>视图机制</h2><p>为不同的⽤户定义不同的视图，把不需要的数据给隐藏起来，这样⽤户就不会进⾏误操作</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> CS_Student<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> sdept<span class="token operator">=</span><span class="token string">'IS'</span><span class="token keyword">grant</span> <span class="token keyword">select</span> <span class="token keyword">on</span> CS_Student <span class="token keyword">to</span> 王平<span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> CS_Student <span class="token keyword">to</span> 王平</code></pre><p><img src="https://img-blog.csdnimg.cn/51eb0558611c4b13960dfd00b149b72f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><p>把对数据库的所有操作都记录到审计⽇志中，然后就可以通过⽇志审查这个⾥⾯是否有⼀些⾮法操作</p><pre class=" language-sql"><code class="language-sql">对修改SC数据的操作进⾏审计 audit <span class="token keyword">update</span> <span class="token keyword">on</span> SC<span class="token punctuation">;</span>取消对SC表的⼀切审计noaudit <span class="token keyword">update</span> <span class="token keyword">on</span> SC<span class="token punctuation">;</span></code></pre><h2 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h2><pre><code>通过⼀些加密算法，把明⽂变成密⽂，这样别⼈就⽆法查看</code></pre><h1 id="第七章-数据库的完整性"><a href="#第七章-数据库的完整性" class="headerlink" title="第七章 数据库的完整性"></a>第七章 数据库的完整性</h1><h2 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h2><pre><code>符合现实世界的描述</code></pre><h2 id="相容性"><a href="#相容性" class="headerlink" title="相容性"></a>相容性</h2><pre><code>同⼀对象在不同表⾥⾯是符合逻辑的 ⽐如我的地址,年龄 在两个表⾥⾯都应⼀致 </code></pre><h2 id="维护完整性"><a href="#维护完整性" class="headerlink" title="维护完整性"></a>维护完整性</h2><ol><li><p>提供定义完整性约束条件的机制</p></li><li><p>提供完整性检查的⽅法</p></li><li><p>进⾏违约处理</p></li></ol><h2 id="三大完整性"><a href="#三大完整性" class="headerlink" title="三大完整性"></a>三大完整性</h2><ol><li><p>实体完整性</p><p> 主码唯⼀,且⾮空</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> course <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>time <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token keyword">create</span> <span class="token keyword">table</span> course <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>time <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><hr><ol start="2"><li><p>参照完整性</p><p> 外码的要么没有,要么只有⼀个</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> course <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>time <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>teacher_id <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">references</span> course_description<span class="token punctuation">(</span>course_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><hr><ol start="3"><li><p>⽤户定义完整性</p><ol><li>⾮空</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span><span class="token keyword">no</span> char<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> age <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>列值唯⼀</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span><span class="token keyword">no</span> char<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> age <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>满⾜某⼀个条件表达式 check来写<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span><span class="token keyword">no</span> char<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> sex char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">check</span> <span class="token punctuation">(</span>sex <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'⼥'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li></ol><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> assertion <span class="token operator">&lt;</span>断言名<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">check</span>⼦句<span class="token operator">></span> <span class="token comment" spellcheck="true">-- 其中check字句 与where⼦句的表达式类似</span></code></pre><p><img src="https://img-blog.csdnimg.cn/ed0598e2d9f9476eb7e2c4a042bbcdd0.png#pic_center"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 删除断言名称: </span><span class="token keyword">drop</span> assertion 断言名字<span class="token punctuation">;</span></code></pre><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器也叫做 事件-&gt;条件-&gt;动作 </p><p>规则:</p><ul><li><p>当对⼀个表增,删,改时候, 对触发器里面的条件进⾏检查;</p></li><li><p>如果成⽴,就执⾏触发器里面的动作.否则不执⾏里面的动作.</p></li></ul><p><img src="https://img-blog.csdnimg.cn/8294d092edcf4691ba55ddf599f58e25.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/6aa0ba20ec2b42e196f99c54f2c3ccc4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 删除触发器:</span><span class="token keyword">drop</span> <span class="token keyword">trigger</span> <span class="token operator">&lt;</span>触发器名<span class="token operator">></span> <span class="token keyword">on</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span></code></pre><h1 id="第八章-关系数据理论"><a href="#第八章-关系数据理论" class="headerlink" title="第八章 关系数据理论"></a>第八章 关系数据理论</h1><h2 id="为什么引入范式"><a href="#为什么引入范式" class="headerlink" title="为什么引入范式?"></a>为什么引入范式?</h2><ol><li><p>数据冗余</p></li><li><p>更新异常</p></li><li><p>插⼊异常</p></li><li><p>删除异常</p></li></ol><h2 id="范式分类"><a href="#范式分类" class="headerlink" title="范式分类"></a>范式分类</h2><p>设计关系数据库时，遵从不同的规范要求，这些不同的规范要求被称为不同的范式</p><p>各种范式呈递次规范，越<mark>高</mark>的范式数据库冗余越<mark>小</mark>。 </p><p>⽬前关系数据库有六种范式：</p><ol><li><p>第⼀范式（1NF）</p></li><li><p>第⼆范式（2NF）</p></li><li><p>第三范式（3NF）</p></li><li><p>巴斯-科德范式（BCNF）</p></li><li><p>第四范式(4NF）</p></li><li><p>第五范式（5NF，⼜称完美范式）</p></li></ol><p>⼀般来说，数据库只需满⾜第三范式(3NF）就⾏了。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p><img src="https://img-blog.csdnimg.cn/edc29300e7c946c8be9a01c1859ae95b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="候选码"><a href="#候选码" class="headerlink" title="候选码"></a>候选码</h2><p>概念: 可以推出所有属性</p><p>如何选出候选码?</p><ol><li><p>只出现在左边的⼀定是候选码 </p></li><li><p>只出现在右边的⼀定不是候选码 </p></li><li><p>左右都出现的不⼀定</p></li><li><p>左右都不出现的⼀定是候选码</p></li><li><p>再求确的候码的闭包,如果可以推出全部,那么当前确定的就是候选码</p></li></ol><p>否则 你要每⼀个可能的值 放进当前确定的候选码里面进⾏求 闭包</p><p>⽐如</p><p>R&lt;U,F&gt; ,U(A,B,C,D,E,G) , F={AB–&gt;C,CD–&gt;E,E–&gt;A,A–&gt;G) ,求候选码:</p><p>B⼀定是候选码 D⼀定是候选码</p><p>G⼀定不是候选码</p><p>A不⼀定 C不⼀定 E不⼀定</p><p>BD-&gt;啥也推不出来,所以要把每⼀个可能的求闭包</p><p>(BDA)<sup>+</sup>= 可推出C E A G 所以可以推出ABCDEG</p><p>(BDC)<sup>+</sup>= 可推出 E A G 所以可以推出ABCDEG</p><p>(BDE)<sup>+</sup>= A G C 可以推出ABCDEG</p><p>那么他的候选码最终是{ (BDA),(BDC),(BDE) };</p><p>超码: 能表示出所有属性的集合, ⽐如 (BDA),(BDC),(BDE) BDCA BDEA ABCDE</p><p>候选码是最⼩的超码.</p><p>主码: 从候选码⾥⾯任意跳出⼀个 作为主码</p><p>主属性: 包含在所有候选码的属性 ⽐如ABCDE</p><p>⾮主属性: 不包含在候选码中的属性 ,上题为G</p><p>全码: 所有的属性都是主码</p><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><h2 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h2><pre><code>所有字段值都是不可分解的原⼦值</code></pre><p><img src="https://img-blog.csdnimg.cn/4495e38f6520457c8863acd7bb0af251.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>⽐如某些数据库系统中需要⽤到“地址”这个属性，本来直接将“地址”属性计成⼀个数据库表</p><p>但是如果系统经常会访问“地址”属性中的“城市”部分,那么就⾮要将“地址这个属性重新拆分为省份、城市、详细地址等多个部分进⾏存储</p><p>这样在对地址中某⼀部分操作的时候将⾮常⽅便</p><h2 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h2><pre><code>在1NF的基础上，消除⾮主属性对主码的部分函数依赖。⼀个表中只能保存⼀种数据,不可以把多种数据保存在同⼀张数据库表中</code></pre><p><img src="https://img-blog.csdnimg.cn/f12777551b074abd8ec80106b05cbbfb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>⼀个表中只能保存⼀种数据，不可以把多种数据保存在同⼀张数据库表中</p><p>该表中商品名称、单位、商品价格等信息不与该表的主键相关，⽽仅仅是与商品编号相关。所以在这⾥违反了第⼆范式的设计原则</p><p><img src="https://img-blog.csdnimg.cn/e6fe8e03c59f4fe78da64d0fd01590d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><img src="https://img-blog.csdnimg.cn/9bcc8b0ef2af4dfbae035e3ccbc1eb14.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h2><pre><code>在2NF的基础上，消除⾮主属性对主码的传递函数依赖。确保数据表中的每⼀列数据都和主键直接相关，⽽不能间接相关⽐如在设计⼀个订单数据表的时候，可以将客户编号作为⼀个外键和订单表建⽴相应的关系。⽽不可以在订单表中添加关于客户其它信息（⽐如姓名、所属公司等）的字段</code></pre><p><img src="https://img-blog.csdnimg.cn/afcc25519dbb4c6cad0de1968219d352.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h2><pre><code>在3NF的基础上，消除主属性对主码的部份依赖和传递依赖消除每⼀属性对候选键的传递依赖 ,BCNF是修正的第三范式</code></pre><p><img src="https://img-blog.csdnimg.cn/38f3af436e1c45e4a14628d30cee3bf3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>存在关系：</p><ul><li><p>书号→书名 </p></li><li><p>(书名、作者)→书号</p></li><li><p>上述关系存在传递依赖，不能是BCNF</p></li></ul><p><img src="https://img-blog.csdnimg.cn/2612d1aeace24491a0f914631f4ef02c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="公理系统"><a href="#公理系统" class="headerlink" title="公理系统"></a>公理系统</h2><p><img src="https://img-blog.csdnimg.cn/5f06d8adef5847378a991c99b5d13d0f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="求最小函数的依赖集"><a href="#求最小函数的依赖集" class="headerlink" title="求最小函数的依赖集"></a>求最小函数的依赖集</h2><p>什么是依赖?<br>依赖是指关系中⼀个或⼀组属性的值可以决定其它属性的值</p><p>⽐如 A-&gt;B这就是⼀个依赖</p><p>如何求最⼩依赖集? </p><ol><li><p>拆右边为多个元素的 ⽐如A-&gt;BC 拆为 A-&gt;B 和A-&gt;C</p></li><li><p>出去当前元素,求它的闭包,把集合里面所有元素都弄完</p></li><li><p>左边最⼩化(通过遮住元素来看能不能退出其他元素)</p></li></ol><p>⽐如BCD,遮住B看能退出CD吗 , 遮住C能退出BD吗 遮住D看能退出BC吗 </p><p>例题: </p><p>已知关系 R&lt;U,F&gt; ,U{A,B,C,D,E,F,G},F={BCD-&gt;A,BC-&gt;E,A-&gt;F,F-&gt;G,C-&gt;D,A-&gt;G} 求F的最⼩依赖集</p><ol><li><p>右边没有要拆分的</p></li><li><p>求各元素闭包：</p><p> (BCD)<sup>+</sup>=E // 把BCD-&gt;A去掉，用BCD推不出A</p><p> (BC)<sup>+</sup>=D // 把BC-&gt;E去掉，用BC推不出E</p><p> (A)<sup>+</sup>=G // 把A-&gt;F去掉，用A推不出F</p><p> (F)<sup>+</sup>=  // 把F-&gt;G去掉，用F推不出G</p><p> (C)<sup>+</sup>=  // 把C-&gt;D去掉，用C推不出D</p><p> (A)<sup>+</sup>=G // 把A-&gt;G去掉，A-&gt;F,F-&gt;G=&gt;A-&gt;G,所以可以把A-&gt;G去掉</p></li><li><p>BCD可以拆分为BC，其他不可以拆分</p><p> 把B去掉：CD推不出B</p><p> 把C去掉：BD推不出B</p><p> 把D去掉：BC能推出D</p></li></ol><p>所以，F的最小依赖集为：{BC-&gt;A,BC-&gt;E,A-&gt;F,F-&gt;G,C-&gt;D}</p><h2 id="模式分解"><a href="#模式分解" class="headerlink" title="模式分解"></a>模式分解</h2><p>准则: ⽆损连接和保持函数依赖</p><p>⽆损: 就是分解后再次连接,和分解之前⼀样</p><p>依赖: 依赖不变</p><p><img src="https://img-blog.csdnimg.cn/5a38d585a2144b4698b6dbd0e48eccc6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_11,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><pre><code>依赖: 科系-&gt;系主任 学号-&gt;科系</code></pre><p>例题：已知R(ABCDEGH) ,F={A-&gt;D,E-&gt;D,D-&gt;B,BC-&gt;D,DC-&gt;A} ,求保持函数依赖的3NF 的分解</p><ol><li><p>求出最⼩函数依赖集 </p></li><li><p>把不在F⾥⾯的属性都找出来,单独分⼀类</p></li><li><p>把每⼀个依赖左边相同的分成⼀类,没有⼀样的,那么就把A-&gt;D改{AD}<br>,如果⼀样{A-&gt;B,A-&gt;C} 那么久改为{ABC}</p></li><li><p>如果候选码没出现在分离⾥⾯, 把任意⼀个候选码作为⼀类</p></li></ol><p>最小函数依赖集F<sub>min={A-&gt;D,E-&gt;D,D-&gt;B,BC-&gt;D,DC-&gt;A} </sub></p><p>GH没在F⾥⾯, 单独⼀类{GH}</p><p>候选码: CE</p><p>{AD}{ED}{DB}{BCD}{DCA}{CE}{GH}</p><h1 id="第九章-数据库设计"><a href="#第九章-数据库设计" class="headerlink" title="第九章 数据库设计"></a>第九章 数据库设计</h1><h2 id="数据库设计的基本步骤"><a href="#数据库设计的基本步骤" class="headerlink" title="数据库设计的基本步骤"></a>数据库设计的基本步骤</h2><ol><li><p>需求分析</p></li><li><p>概念结构设计 ER图或者是设计数据字典</p></li><li><p>逻辑结构设计 把ER图转为逻辑模型 </p></li><li><p>物理结构设计 把逻辑模型转为物理模型</p></li><li><p>数据库实施 写SQL代码</p></li><li><p>数据库运⾏维护 性能检测</p></li></ol><h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><p><img src="https://img-blog.csdnimg.cn/104c735bbeb64f5ea4a2c107e5b0e1de.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>实体是长方形</p><p>属性则是椭圆形</p><p>关系为菱形 </p><p>1对1（1:1） ：1对1关系是指对于实体集A与实体集B，A中的每⼀个实体⾄多与B中⼀个实体有 反之，在实体集B中的每个实体⾄多与实体集A中⼀个实体有关系。 </p><p>1对多（1:N） ：1对多关系是指实体集A与实体集B中⾄少有N(N&gt;0)个实体有关系； 并且实体集B中每⼀个实体⾄多与实体集A中⼀个实体有关系。 </p><p>多对多（M:N） ：多对多关系是指实体集A中的每⼀个实体与实体集B中⾄少有M(M&gt;0)个实体有 并且实体集B中的每⼀个实体与实体集A中的⾄少N（N&gt;0）个实体有关系。</p><p><img src="https://img-blog.csdnimg.cn/dcb71e069ba748d189b225441c26ea38.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/2a829ce804b24c74968b338c76288a4a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/429f85556b504502a8756ee3c1eabab9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h1 id="第十章-数据库编程"><a href="#第十章-数据库编程" class="headerlink" title="第十章 数据库编程"></a>第十章 数据库编程</h1><h2 id="嵌入式SQL"><a href="#嵌入式SQL" class="headerlink" title="嵌入式SQL"></a>嵌入式SQL</h2><p>就是把SQL语句嵌⼊到 其他编程语⾔⾥⾯ ⽐如java</p><h2 id="嵌入式SQL的处理过程"><a href="#嵌入式SQL的处理过程" class="headerlink" title="嵌入式SQL的处理过程"></a>嵌入式SQL的处理过程</h2><ol><li><p>预编译转换为函数调⽤</p></li><li><p>主语言编译</p></li><li><p>边成主语言所编译的类型</p></li></ol><h2 id="SQL与主语言的通信"><a href="#SQL与主语言的通信" class="headerlink" title="SQL与主语言的通信"></a>SQL与主语言的通信</h2><ol><li><p>SQL给主语言传递状态 </p></li><li><p>主语言给SQL提供参数 </p></li><li><p>SQL把查询结果交给主语言处理(游标,和主变量实现)</p></li></ol><h1 id="第十一章-关系查询处理和查询优化"><a href="#第十一章-关系查询处理和查询优化" class="headerlink" title="第十一章 关系查询处理和查询优化"></a>第十一章 关系查询处理和查询优化</h1><h2 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h2><p><img src="https://img-blog.csdnimg.cn/91bee80285e048b28b9504e203240b2f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>查询优化的四个阶段:</p><ol><li><p>查询分析</p></li><li><p>查询检查</p></li><li><p>查询优化</p></li><li><p>查询执⾏</p></li></ol><p>查询优化包括代数优化,物理优化.</p><p>代数优化就是本章讲的重点, 优化树</p><p><img src="https://img-blog.csdnimg.cn/3eb99fff337b438ab5f4dde048e5745b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ul><li><p>选择运算尽量先做</p></li><li><p>把投影运算和选择运算同时执⾏</p></li><li><p>把投影同它前后的双⽬运算符连接起来</p></li></ul><h1 id="第十二章-数据恢复技术"><a href="#第十二章-数据恢复技术" class="headerlink" title="第十二章 数据恢复技术"></a>第十二章 数据恢复技术</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务的四⼤特性：ACID</p><p>A：原⼦性 autom: 要么全做，要么全不做 </p><p>C: ⼀致性 consistent: ⼀致性与原⼦性密切相关，要么全做要么全不做，否则就会造成数据不⼀致。⽐如说：银⾏汇钱</p><p>I：隔离性 isolate: ⼀个事务的执⾏不能被其他事务所⼲扰</p><p>D：持久性 duration: 数据库的改变是永久的。⽐如要落⼊磁盘 </p><h2 id="故障种类"><a href="#故障种类" class="headerlink" title="故障种类"></a>故障种类</h2><p>故障的种类：</p><ol><li><p>事物内部故障: 采取REDO重做和UNDO撤销技术</p></li><li><p>系统故障 DBMS: 系统突然停转，系统要重启</p></li><li><p>介质故障: 硬件损坏</p></li><li><p>计算机病毒</p></li></ol><h2 id="恢复方式"><a href="#恢复方式" class="headerlink" title="恢复方式"></a>恢复方式</h2><ol><li><p>数据转储: 对失败的事务重新执⾏</p></li><li><p>⽇志⽂件: 记录事务对数据的更新操作的⽂件</p></li></ol><h2 id="恢复策略"><a href="#恢复策略" class="headerlink" title="恢复策略"></a>恢复策略</h2><ol><li><p>事务故障的恢复: 事务异常终⽌，那么就撤销之前的所有操作</p></li><li><p>系统故障的恢复: 还没执⾏完的事务UNDO、丢失的事务REDO</p></li><li><p>介质故障的恢复: 重装数据库，重做已经完成的事务</p></li></ol><p><img src="https://img-blog.csdnimg.cn/9245adbab0eb4acba82c120ddf2a1cea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h1 id="第十三章-并发控制"><a href="#第十三章-并发控制" class="headerlink" title="第十三章 并发控制"></a>第十三章 并发控制</h1><h2 id="什么是并发"><a href="#什么是并发" class="headerlink" title="什么是并发?"></a>什么是并发?</h2><p>并发带来的问题</p><ol><li><p>丢失修改: 我修改的东⻄没⽣效。⽐如说我把票价改成99元，结果还是原来的299元</p></li><li><p>读脏数据: ⽐如，你要读取数据库中的字段A、字段B，你读取时恰巧有其他⽤户正在更新这2个字段，⽽且如果那个⽤户更新⼀半你就读取了，也就是说更新了A，正打算要更新B但尚未更新时，你就读取</p></li><li><p>不可重复读: 我在⼀个事务中，连续两次读到的数据不⼀样。</p><p> ⽐如我刚开始读到银⾏余额为10元。此时单位突然给发⼯资100到这张卡,那么我第⼆次读就变成110元</p></li></ol><p>解决⽅法: </p><ol><li><p>排它锁：也叫写锁</p><p> X锁</p></li><li><p>共享锁：也叫读锁</p><p> S锁</p></li></ol><p>封锁协议: </p><ol><li><p>⼀级封锁协议: </p><p> 修改时，必须加X锁，直到结束</p></li><li><p>⼆级封锁协议: </p><p> 读的时候，加S锁，⽤完就放</p></li><li><p>三级封锁协议: </p><p> 读的时候，加S锁，直到结束</p></li></ol><p>⼀级锁协议：解决丢失修改</p><p>⼆级锁协议：解决读脏数据</p><p>三级锁协议：解决不可重复度</p><p><img src="https://img-blog.csdnimg.cn/ec3b1f9e32b74fd59aca828120b3ed07.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA572R5LiK6YK75bGF5bCP6IuP,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="可串行性"><a href="#可串行性" class="headerlink" title="可串行性"></a>可串行性</h2><p>假设多种情况都可以,然后获得结果</p><p>如果并发执⾏的结果跟上⾯的结果⾥⾯任意⼀个⼀样就可以</p><p>事务T1: 读取B,A=B+1,写回A</p><p>事务T2: 读取A,B=A+1,写回B</p><p>那么结果假设先T1, 在T2 , 那么A=4,B =3;</p><p>假设先T2 ,那么A=3, B =4;</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络物理层</title>
      <link href="/2022/03/03/ji-suan-ji-wang-luo-wu-li-ceng/"/>
      <url>/2022/03/03/ji-suan-ji-wang-luo-wu-li-ceng/</url>
      
        <content type="html"><![CDATA[<h1 id="目录脑图"><a href="#目录脑图" class="headerlink" title="目录脑图"></a>目录脑图</h1><p><img src="https://img-blog.csdnimg.cn/ef02526eb8fd4ca0b07c12bb0df883b0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p><img src="https://img-blog.csdnimg.cn/3c9abf2f015d4c6ea781ad8f735d90a0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="1-1、物理层接口特性"><a href="#1-1、物理层接口特性" class="headerlink" title="1.1、物理层接口特性"></a>1.1、物理层接口特性</h2><p>物理层解决如何在连接各种计算机的传输媒体上<strong>传输数据比特流</strong>，而不是指具体的传输媒体。</p><p>物理层的主要任务：确定与传输媒体<strong>接口</strong>有关的一些特性-&gt;<mark>定义标准</mark></p><p><img src="https://img-blog.csdnimg.cn/ec582c8a0e9e422a9212a8ff29a56d8b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>举个例子：</p><ul><li>这有一个插排，插排有两孔的也有三孔的，这其实就是在定义接口上的标准。只有定义了这些标准，我们的充电线才能插进插孔并充电</li><li>有线路由器后面也有很多插孔，但是我们会发现，我们和朋友家的路由器后面的插孔都是一样的，这样我们将自己家的网线拿到朋友家也可以插，网线的接头都是一样的。这些都是在定义物理层接口特性的标准。</li></ul><p>物理层的接口特性：</p><ol><li>机械特性：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、<mark>引线数目</mark>、<mark>引脚数量</mark>和排列情况。</li><li>电气特性：规定传输二进制位时，线路上信号的<mark>电压范围</mark>、阻抗匹配、传输<mark>速率</mark>和<mark>距离</mark>限制等。</li><li>功能特性：指明某条线上出现的某一<mark>电平表示何种意义</mark>，接口部件的信号线的用途。</li><li>规程特性(过程特性):定义各条物理线路的工作<mark>规程和时序</mark>关系。</li></ol><p>例如：</p><blockquote><p>某网络在物理层规定，信号的电平用+10V ~ +15V表示二进制0，用-10V ~ +15V表示二进制1，电线长度限于15m以内。—<mark>电气特性</mark><br>描述一个物理层接口引脚处于高电平时的含义时。 —–<mark>功能特性</mark></p></blockquote><p>对此我们可以这样记忆：</p><p><mark>功能特性</mark>一般不会出现数字，“高电平处于什么含义、什么意义”</p><p><mark>电气特性</mark>一般都会出现数字，而且通常说电压说的是一个电压的范围</p><h2 id="1-2、数据通信基础知识"><a href="#1-2、数据通信基础知识" class="headerlink" title="1.2、数据通信基础知识"></a>1.2、数据通信基础知识</h2><h3 id="1-2-1、典型的数据通信模型"><a href="#1-2-1、典型的数据通信模型" class="headerlink" title="1.2.1、典型的数据通信模型"></a>1.2.1、典型的数据通信模型</h3><p><img src="https://img-blog.csdnimg.cn/0dc0388d4ba24dd1a5477cb4e387dcf0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>数据从计算机网卡发送出来是<mark>数字信号</mark>，再经过调制解调器调成<mark>模拟信号</mark>，放到广域网上面模拟信道上进行传输，再由调制解调器调成<mark>数字信号</mark>，最后数据才展现在我们眼前。以上的每一部分都有数据通信所对应的专业名词。</p><p>例如：</p><ul><li><p>输入端我们称为<mark>信源</mark>：信息的来源</p></li><li><p>发送端的调制解调器我们称为<mark>发送器</mark></p></li><li><p>数据中间要经过的广域网我们称为<mark>传输系统</mark></p></li><li><p>接收端的调制解调器我们称为<mark>接收器</mark>  </p></li><li><p>接收端我们称为<mark>信宿</mark>：信息的归宿</p></li></ul><p>同时我们还会再细分，例如：</p><ul><li><p>信源和发送器我们称为<mark>源系统</mark></p></li><li><p>传输系统我们称为<mark>传输系统</mark></p></li><li><p>接收器和信宿我们称为<mark>目的系统</mark></p></li></ul><h3 id="1-2-2、数据通信相关术语"><a href="#1-2-2、数据通信相关术语" class="headerlink" title="1.2.2、数据通信相关术语"></a>1.2.2、数据通信相关术语</h3><p>通信的目的是<mark>传送消息</mark>(消息：语音、文字、图像、视频等)</p><ul><li>数据data：传送信息的实体，通常是有意义的符号序列</li><li>信号：数据的电气/电磁的表现，是数据在传输过程中的<mark>存在形式</mark>。<ul><li>数字信号/离散信号：代表消息的参数的取值是离散的。</li><li>模拟信号/连续信号：代表消息的参数的取值是连续的。</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/d66426a5237d47408a40c885fec025b5.png#pic_center"></p><p>数据通信：数据通信指的是在不同计算机之间传输表示信息的二进制数0、1序列的过程</p><ul><li>信源：产生和发送数据的源头</li><li>信宿：接收数据的终点</li><li>信道：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。</li></ul><p>信道按传输信号分为：模拟信道和数字信道。</p><p>信道按传输介质分为：无线信道和有线信道。无线信道就是看不见摸不着的非导向型传输信道，比如微波通信、卫星通信等。有线信道就是看得见摸得着的导向型传输信道，比如网线。</p><p><img src="https://img-blog.csdnimg.cn/8e7712649c634aa5b797a556856150ea.png#pic_center"></p><p>思考：如果我们要设计数据通信系统，我们要考虑3个问题：</p><p><img src="https://img-blog.csdnimg.cn/aa9123cdb9614a6cb98cad30c4b17121.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h3 id="1-2-3、三种通信方式"><a href="#1-2-3、三种通信方式" class="headerlink" title="1.2.3、三种通信方式"></a>1.2.3、三种通信方式</h3><p><img src="https://img-blog.csdnimg.cn/0d2d08f88a014ac6bc9d7c8cc7ee3aa6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ol><li><p>单工通信</p><p> 只有一个方向的通信而没有反方向的交互，仅需要<mark>一条</mark>信道。例如：广播，只有播音员在说话</p></li><li><p>半双工通信/双向交替通信</p><p> 通信的双方都可以发送或者接收信息，但是任何一方都不能同时发送和接收，需要<mark>两条</mark>信道。例如：对讲机</p></li><li><p>全双工通信/双向同时通信</p><p> 通信双方可以同时发送和接收信息，也需要<mark>两条</mark>信道。例如：打电话</p></li></ol><h3 id="1-2-4、两种数据传输方式"><a href="#1-2-4、两种数据传输方式" class="headerlink" title="1.2.4、两种数据传输方式"></a>1.2.4、两种数据传输方式</h3><p><img src="https://img-blog.csdnimg.cn/ac6f4c8d4bf646de9b51a347d017823b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ul><li><p>串行传输：将表示一个字符的8位二进制数按由低位到高位的顺序依次发送。</p><ul><li>速度慢，费用低，适合远距离</li></ul></li><li><p>并行传输：将表示一个字符的8位二进制数同时通过8条信道发送。</p><ul><li>速度快，费用高，适合近距离</li></ul></li></ul><h3 id="1-2-5、同步传输和异步传输"><a href="#1-2-5、同步传输和异步传输" class="headerlink" title="1.2.5、同步传输和异步传输"></a>1.2.5、同步传输和异步传输</h3><p>同步传输：在同步传输的模式下，数据的传送是以一个数据区块为单位，因此同步传输又称为区块传输。在传送数据时，需要先送出1个或多个<mark>同步字符</mark>，再送出整批的数据。</p><p><img src="https://img-blog.csdnimg.cn/695af2aa16234d61afe07e67ed48ff77.png#pic_center"></p><p>异步传输：异步传输将比特分成小组进行传送，小组可以是8位的1个字符或更长。发送方可以在任何时刻发送这些比特组，而接收方不知道它们会在什么时候到达。传送数据时，<mark>加一个字符起始位和一个字符终止位</mark>。</p><p><img src="https://img-blog.csdnimg.cn/4ae9aa60b0b043c6b3ce309b92416c19.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>例如上图，我们可能先发送字节1，等会再发送字节2，心情高兴了再发送字节3。例如我们发送字节3，我们要加一个字符起始位、一个字符终止位，然后发送。</p><h2 id="1-3、数据通信进阶知识"><a href="#1-3、数据通信进阶知识" class="headerlink" title="1.3、数据通信进阶知识"></a>1.3、数据通信进阶知识</h2><h3 id="1-3-1、码元"><a href="#1-3-1、码元" class="headerlink" title="1.3.1、码元"></a>1.3.1、码元</h3><p>我们先来看一个例子，例如我们要发送数据，数据就是一系列二进制数的数据组合，如果要让数据在链路上传输，就要让数据转换成数字信号的形式，1对应的就是高电平信号，0代表的就是低电平信号。首先将1对应的高电平信号发送到链路，之后将0对应的低电平信号发送到链路，以此类推。接收方在接收数字信号时，遇到高电平信号，就将其转化为1，遇到低电平信号，就将其转化为0，最终将数据成功接收。</p><p><img src="https://img-blog.csdnimg.cn/cf75335e9ab64c5abfe59da703d1ab9d.png#pic_center"></p><p>码元是指用一个<mark>固定时长</mark>的<mark>信号波形(数字脉冲)</mark>，代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，这个时长内的信号称为<mark>k进制码云</mark>，而该时长称为码元宽度。当码元的离散状态有M个时(M&gt;2)，此时码元为M进制码元。(<strong>码元的离散状态也就是信号波形的状态，如上图信号波形只有两种一低一高，所以上图中称为二进制码元</strong>)</p><p><strong>1码元可以携带多个比特的信息量</strong>。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代表1状态。</p><p>思考：四进制码元可以携带多少比特呢？十六进制码元可以携带多少比特呢？</p><p>答案：4进制码元 -&gt; 码元的离散状态有4个 -&gt; 4种高低不同的信号波形。那么我们需要多少个比特才能够表示4种信号波形呢？答案是两个(log<sub>2</sub>4)比特，00、01、10、11 就可以表示4种信号波形。同理，16进制码元可以携带4(log<sub>2</sub>16)个比特。</p><blockquote><p>结论：n进制码元携带的比特为 log<sub>2</sub>n 个</p></blockquote><h3 id="1-3-2、码元传输速率和信息传输速率"><a href="#1-3-2、码元传输速率和信息传输速率" class="headerlink" title="1.3.2、码元传输速率和信息传输速率"></a>1.3.2、码元传输速率和信息传输速率</h3><p>数字通信系统数据传输速率的两种表示方法：</p><p>速率也叫数据率，是指数据的传输速率，表示单位时间内传输的数据量。可以用<mark>码元传输速率</mark>和<mark>信息传输速率</mark>表示。</p><ol><li>码元传输速率：别名码元速率、波形速率、调制速率、符号速率等。它表示单位时间内数字通信系统所传输的码元个数(也可称为<mark>脉冲个数或信号变化的次数</mark>)，单位是<mark>波特(Baud)</mark>。1波特表示数字通信系统每秒传输一个码元。<mark>所以码元传输速率也就是1s传输多少个码元</mark>。</li></ol><blockquote><p>信号变化的次数：例如我们的两个信号都是低信号，那么它们的图是 ————,这样我们也算作是信号变化的次数，从一个信号变化到另一个信号。</p></blockquote><p>例如：若2s内传输4800个码元。码元的传输速率是多少？</p><p>答案：2400B</p><blockquote><p>注意：数字信号有多进制和二进制之分，但<mark>码元速率与进制数无关</mark>，只与<mark>码元长度T</mark>有关。</p></blockquote><p>$$  R_B=\frac{1}{T}(B) $$</p><p>上述公式我们可以看出，码元速率和码元长度T的关系。</p><ol start="2"><li>信息传输速率：别名信息速率、比特率等，表示单位时间内数字通信系统传输的二进制码元个数(即比特数)，单位是比特/秒(b/s)。<mark>信息传输速率也就是1s传输多少个比特</mark>。</li></ol><blockquote><p>为什么这里说二进制码元个数就是比特数呢，因为二进制码元的信号波形只需要1个比特就可以表示，所以二进制码元个数也就是比特数。</p></blockquote><p><strong>关系</strong>：若一个码元携带 n bit 的信息量，则 M Baud的码元传输速率所对应的信息传输速率为 M*n bit/s</p><p>解释：假如一个码云的码元传输速率为 2Baud，也就是1s传输2个码元，一个码元携带 n bit 的信息量，则信息传输速率为 2*n bit/s</p><h3 id="1-3-3、思考题"><a href="#1-3-3、思考题" class="headerlink" title="1.3.3、思考题"></a>1.3.3、思考题</h3><ol><li>某一数字通信系统传输的是四进制码元，4s传输了8000个码元，求系统的码元传输速率是多少？信息传输速率是多少？若另一通信系统传输的是十六进制码元，6s传输了7200个码元，求他的码元传输速率是多少？信息传输速率是多少？并指出哪个系统传输速率快？</li></ol><p>四进制</p><p>码元传输速率：8000/4=2000 Baud<br>信息传输速率：2000 * log<sub>2</sub>4 = 4000 b/s</p><p>十六进制</p><p>码元传输速率： 7200/6 = 1200 Baud<br>信息传输速率： 1200 * log<sub>2</sub>16 = 4800 b/s</p><p>系统传输的是<mark>比特流</mark>，通常比较的是信息传输速率，所以传输十六进制码元的通信系统传输速率较快。</p><hr><ol start="2"><li>已知八进制数字信号的传输速率为1600B。试问变换成二进制数字信号时的传输速率是多少？<br>二进制数字信号 = 比特数，所以题目转化为求八进制数字信号的比特传输速率，其实也就是求八进制数字信号的信息传输速率(1s传输多少比特)</li></ol><p>1600 * log<sub>2</sub>8 = 4800 b/s</p><hr><ol start="3"><li>已知二进制数字信号的传输速率为2400b/s。试问变换成四进制数字信号时，传输速率为多少波特？</li></ol><p>四进制数字信号需要 2(log<sub>2</sub>4)个比特来表示，现在的信息传输速率是 2400b/s, 2400b/s ÷ 2 = 1200 Baud</p><h3 id="1-3-4、带宽"><a href="#1-3-4、带宽" class="headerlink" title="1.3.4、带宽"></a>1.3.4、带宽</h3><p><mark>模拟信号系统中</mark>：当输入的信号频率高或低到一定程度，使得系统的输出功率成为输入功率的一半时(即-3dB)，<mark>最高频率和最低频率间的差值就代表了系统的通频带宽，其单位为赫兹Hz</mark></p><p><mark>数字设备中</mark>：表示在单位时间内从网络中的某一点到另一点所能通过的”<mark>最高数据率</mark>“(或者说单位时间内通过链路的数量)，常用来表示网络的通信线路所能传输数据的能力。单位是<mark>比特每秒(bps)</mark></p><h2 id="1-4、奈氏准则、香农定理"><a href="#1-4、奈氏准则、香农定理" class="headerlink" title="1.4、奈氏准则、香农定理"></a>1.4、奈氏准则、香农定理</h2><h3 id="1-4-1、失真"><a href="#1-4-1、失真" class="headerlink" title="1.4.1、失真"></a>1.4.1、失真</h3><p><img src="https://img-blog.csdnimg.cn/2468b66a3ea745c9aaec025a5118a93e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>影响失真程度的因素：</p><ol><li>码元传输速率：传输速率越快，失真程度越严重</li><li>信号传输距离：传输距离越远，失真程度越严重</li><li>噪声干扰：噪声干扰越大，失真程度越严重</li><li>传输媒体质量：媒体质量越差，失真程度越严重</li></ol><blockquote><p>前三个与失真程度是正相关，最后一个是负相关</p></blockquote><h3 id="1-4-2、失真的一种现象-码间串扰"><a href="#1-4-2、失真的一种现象-码间串扰" class="headerlink" title="1.4.2、失真的一种现象-码间串扰"></a>1.4.2、失真的一种现象-码间串扰</h3><p><img src="https://img-blog.csdnimg.cn/b446fad91b7d4120940b77d33b9697f3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>码间串扰：<strong>接收端</strong>收到的信号波形失去了码元之间清晰界限的现象。</p><p>举个例子：唐人街探案3中秦风有一个任务是数清楚1分钟之内十字路口的人数通过人数，当时人来人往熙熙攘攘，人与人之间很近，没有清晰的界限，当然就很难数清楚了。这其实就是码间串扰的例子。</p><h3 id="1-4-3、奈氏准则-奈奎斯特定理"><a href="#1-4-3、奈氏准则-奈奎斯特定理" class="headerlink" title="1.4.3、奈氏准则(奈奎斯特定理)"></a>1.4.3、奈氏准则(奈奎斯特定理)</h3><p>奈氏准则：在理想低通(无噪声，带宽受限)条件下，为了避免码间串扰，极限码元传输速率为 2W Baud，W氏信道带宽，单位是Hz。</p><blockquote><p>注意：我们之前说带宽的单位都是 bit/s ，在计网中只有奈氏准则和香农定理这两个公式中带宽单位才用Hz</p></blockquote><p>在考研当中，为了混淆大家，还会让大家再求一步极限数据率，让我们感觉奈氏准则很像香农定理。我们要注意两者的侧重点不一样，奈氏准则只是限制码元传输速率有一个上限，但是香农定理才是真正的限制信息的传输速率，也就是比特率有一个上限。</p><p><img src="https://img-blog.csdnimg.cn/381edad2815e4796bc52d949f365277a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>公式中的V表示有几种码元/码元的离散电平数目，例如我们通常说信号当中有四种相位，也就是有四种波形，四种波形也就对应着四种码元。</p><p>根据奈氏准则，我们可以得出四条结论：</p><ol><li>在任何信道中，<mark>码元传输的速率是有上限的</mark>。若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能。</li><li>信道的频带越宽(<mark>即能通过的信号高频分量越多</mark>)，就可以用更高的速率进行码元的有效传输。也就是说我们公式当中的W越大，对应的极限码元的传输速率也越大，所以才会使用更高的速率进行码元的传输。</li></ol><blockquote><p>为什么说频带越宽就是通过信号的高频分量越多呢？频道越宽指的就是信道当中最高频与最低频的差差距越大，所以就越宽，所以信道当中可以通过的高频也就越多了。例如我们原本最高频可以到4000Hz，现在频带提高了，那我们可以通过的最高的高频分量就可能超过4000了，因此能通过的信号高频分量越多。</p></blockquote><ol start="3"><li><p><mark>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制</mark>。也就是说奈氏准则限制码元传输速率，但是不限制比特传输速率。</p></li><li><p>由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用多元制的调制方法。(原来我们一个码元对应一位二进制数，如果我们想让极限数据传输率更高，就需要使得一个码元需要携带更多个比特位，也就是说可能需要二位、三位、四位二进制数来表示一个码元，这就是多元制的调制方法)</p></li></ol><p>趁手做个题：</p><p>例：在无噪音的情况下，若某通信链路的带宽为 3kHz，采用4个相位，每个相位具有4种振幅的QAM调制技术，则该通信链路的最大数据传输率是多少？</p><p>答案：</p><ul><li>4个相位，每个相位有4种振幅，所以信号共有4*4=16种变化，也就是说有16种信号变化，也就是说有16种码元。V =16</li><li>带宽为 3000Hz，也就是 W = 3000</li><li>最大传输速率 = 2 * 3000 * log<sub>2</sub>16 = 24k b/s</li></ul><h3 id="1-4-4、香农定理"><a href="#1-4-4、香农定理" class="headerlink" title="1.4.4、香农定理"></a>1.4.4、香农定理</h3><p><mark>噪声</mark>存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声的影响相对较小。因此，<mark>信噪比</mark>就很重要。</p><p>举个例子：课堂上有学霸和学渣，学渣叽叽喳喳产生噪音，如果老师讲课的声音小于学渣产生的噪音，那么对于学霸的影响就会很大，如果老师带个喇叭讲课声音远远大于学渣产生的噪音，那么对于学霸的影响噪音几乎没有。</p><pre><code>信噪比 = 信号的平均功率 / 噪声的平均功率</code></pre><p>信噪比公式如上，常记为 S/N，并用分贝(dB)作为度量单位，一般题目都会直接给出信噪比，我们一般不需要计算，下面公式我们要记住：</p><pre><code>信噪比(dB) = 10lg(S/N)</code></pre><p>两者数值等价。</p><hr><p><strong>香农定理</strong>：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</p><blockquote><p>需要注意的是：奈氏准则是在带宽受限无噪声的信道，香农定理是在带宽受限且有噪声的信道 </p></blockquote><p><img src="https://img-blog.csdnimg.cn/7fcd0f75a20943438b7920b1b665e23b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><blockquote><p>这里的信噪比，一般题目当中都会直接给S/N，例如题目直接说信噪比为1000，没有单位dB，那我们直接带入公式即可。但是如果题目说信噪比为 1000dB，有单位dB,那么我们就需要根据信噪比公式进行转化，求出S/N，之后再带入公式即可。考研中多半给的都是有单位的dB，这样让我们多算一步！</p></blockquote><p>根据香农定理，我们可以得出一些结论：</p><ol><li><p>信道的<mark>带宽</mark>或信道中的<mark>信噪比</mark>越大，则信息的极限传输速率就<mark>越高</mark>。这个通过公式就可以看出来，W越大,S/N越大，数据极限传输速率就越大</p></li><li><p>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了。这个通过公式就可以看出来，W和S/N确定了，信息传输速率的极限就确定了</p></li><li><p>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现<mark>无差错的传输</mark>。</p></li><li><p>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少。</p></li><li><p>从香农定理可以看出，若信道带宽W或信噪比S/N没有上限(不可能)，那么信道的极限信息传输速率也就没有上限。</p></li></ol><p>来做一道题：</p><p>例：电话系统的典型参数是信道带宽为3000Hz，信噪比为30dB，则该系统最大数据传输速率是多少？</p><ul><li>W为3000 Hz</li><li>信噪比为 30dB，则 S/N = 1000</li><li>带入公式信道的极限传输速率 = Wlog<sub>2</sub>(1+S/N)=3000×log<sub>2</sub>(1+1000)≈30k b/s<h3 id="1-4-5、奈氏和香农"><a href="#1-4-5、奈氏和香农" class="headerlink" title="1.4.5、奈氏和香农"></a>1.4.5、奈氏和香农</h3>做题的时候我们怎么拿捏这两个公式？一般可以看是否有噪音，无噪音选奈氏，有噪音选香农。当然也不绝对，有时候既给了噪音，又给了V，那么我们就需要都算，取其最小值。<br><img src="https://img-blog.csdnimg.cn/92c9de248fda4cad87abc3c5b2001d7b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></li></ul><p>来，我们来看一道题：</p><p>例如：二进制信号在信噪比为127:1的4k Hz信道上传输，最大的数据速率可达到多少？</p><p>分析：4k 带宽W有了，信噪比S/N 127:1 有了，二进制信号也就是二进制码元，V=2 有了</p><p>基本上这种条件我们奈氏和香农都要求：</p><ul><li>奈氏极限数据传输率 = 2 × 4000 × log<sub>2</sub>2 = 8000 b/s</li><li>香农极限数据传输率 = 4000 × log<sub>2</sub>(1+127) = 28000 b/s</li><li>选择两者较小的奈氏极限数据传输率就是我们最大的数据传输速率</li></ul><h2 id="1-5、编码和调制基础知识"><a href="#1-5、编码和调制基础知识" class="headerlink" title="1.5、编码和调制基础知识"></a>1.5、编码和调制基础知识</h2><h3 id="1-5-1、基带信号和宽带信号"><a href="#1-5-1、基带信号和宽带信号" class="headerlink" title="1.5.1、基带信号和宽带信号"></a>1.5.1、基带信号和宽带信号</h3><p>我们来回顾一下我们之前学习的信道：<br><img src="https://img-blog.csdnimg.cn/49f67757a042411fa035f26b22d05c83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>基带信号和宽带信号是我们信道上传输的两种形式，除了数字信号和模拟信号，还可以把信道上的信号分为基带信号和宽带信号</p><p>基带信号：将数字信号1和0直接用两种不同的电压表示，再送到<mark>数字信道</mark>上去传输(<mark>基带传输</mark>)。</p><p><mark>来自信源的信号</mark>，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的<mark>直接表达了要传输的信息的信号</mark>，比如我们说话的声波就是基带信号。</p><p>宽带信号：将基带信号进行调制后形成的频分复用<mark>模拟信号</mark>，再传送到模拟信道上去传输(<mark>宽带传输</mark>)。</p><p>把基带信号经过<mark>载波调制</mark>后，把信号的<mark>频率范围搬移到较高的频段</mark>以便在信道中传输(即仅在一段频率范围内能够通过信道)。</p><blockquote><p>如果放到数字信道上传输，就是基带信号。如果放到模拟信道上传输，就是宽带信号。</p></blockquote><p>在传输距离较近时，计算机网络采用<mark>基带传输</mark>方式。(近距离衰减小，从而信号内容不易发生变化)</p><p>在传输距离较远时，计算机网络采用<mark>宽带传输/<mark>方式。(远距离衰减大，即使信号变化大也能最后过滤出来基带信号)</mark></mark></p><h3 id="1-5-2、编码与调制"><a href="#1-5-2、编码与调制" class="headerlink" title="1.5.2、编码与调制"></a>1.5.2、编码与调制</h3><p><img src="https://img-blog.csdnimg.cn/3130ba14fbef42f88db262ab97bee475.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ul><li>把数据转成<strong>数字信号</strong>，就是<mark>编码</mark>手段</li><li>把数据转成<strong>模拟信号</strong>，就是<mark>调制</mark>手段</li></ul><blockquote><p>所以我们区分编码还是调制，只需要区分数据最终转成的是数字信号还是模拟信号</p></blockquote><ul><li>数字数据通过数字发送器转换成数字信号，就是编码手段</li><li>数字数据通过调制器转换成模拟信号，就是调制手段</li><li>模拟数据通过PCM编码器转换成数字信号，就是编码手段</li><li>模拟数据通过放大器调制器转换成模拟信号，就是调制手段</li></ul><h2 id="1-6、编码与调制进阶知识"><a href="#1-6、编码与调制进阶知识" class="headerlink" title="1.6、编码与调制进阶知识"></a>1.6、编码与调制进阶知识</h2><h3 id="1-6-1、数字数据编码为数字信号"><a href="#1-6-1、数字数据编码为数字信号" class="headerlink" title="1.6.1、数字数据编码为数字信号"></a>1.6.1、数字数据编码为数字信号</h3><p>将数字数据编码为数字信号，有以下几种编码方式：</p><p><img src="https://img-blog.csdnimg.cn/eb7478fedc544c3bade20bf7feb76c01.png#pic_center"></p><h4 id="1、非归零编码"><a href="#1、非归零编码" class="headerlink" title="1、非归零编码"></a>1、非归零编码</h4><p>非归零编码：高电平用1表示，低电平用0表示。编码容易实现，但没有检错功能，且无法判断一个码元的开始和结束，以至于收发<mark>双方难以保持同步</mark>。</p><p><img src="https://img-blog.csdnimg.cn/c3bbf7144e6d4280947fac4786186864.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h4 id="2、归零编码"><a href="#2、归零编码" class="headerlink" title="2、归零编码"></a>2、归零编码</h4><p>归零编码：信号电平在一个码元之内都要恢复到零的这种编码方法。</p><p><img src="https://img-blog.csdnimg.cn/1e6149be3cd94a3a97e41da69d6aba4a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h4 id="3、反向不归零编码"><a href="#3、反向不归零编码" class="headerlink" title="3、反向不归零编码"></a>3、反向不归零编码</h4><p>反向不归零编码：信号电平翻转表示0，信号电平不变表示1。</p><p><img src="https://img-blog.csdnimg.cn/e29ea06df7364097b332dc588cfdcaa5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h4 id="4、曼彻斯特编码"><a href="#4、曼彻斯特编码" class="headerlink" title="4、曼彻斯特编码"></a>4、曼彻斯特编码</h4><p>曼彻斯特编码：将一个码元分成两个相等的间隔，前低后高表示码元1，前高后低表示码元0，当然也可以采取相反的规定。</p><p>该编码的特点是在每一个码元的中间出现电平跳变，位中间的跳变既作时钟信号(可用于同步)，又作数据信号，但它所占的频带宽度是原始的基带宽度的两倍。每一个码元都被调成两个电平，所以<mark>数据传输速率只有调制速率的1/2</mark></p><blockquote><p>同步是指发送方发送一个比特之后，接收方就能够知道你已经发送了一个比特，发送方在发第二个比特时，接收方也能察觉到这是在发第二个比特。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/9fb96242c68246318602fbc0baf9ebfc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h4 id="5、差分曼彻斯特编码"><a href="#5、差分曼彻斯特编码" class="headerlink" title="5、差分曼彻斯特编码"></a>5、差分曼彻斯特编码</h4><p>差分曼彻斯特编码：前半个码元的半个电平与上一个码元的后半个码元的电平相同则为1，前半个码元的半个电平与上一个码元的后半个码元的电平不同则为0(同1异0)。</p><p>该编码的特点是：在每个码元的中间，都有一次电平的跳转，可以实现自同步，且<mark>抗干扰性强于曼彻斯特编码</mark></p><p><img src="https://img-blog.csdnimg.cn/bb474fa5d58e4bc0808efc36fc705239.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h4 id="6、4B-x2F-5B编码"><a href="#6、4B-x2F-5B编码" class="headerlink" title="6、4B/5B编码"></a>6、4B/5B编码</h4><p>比特流中插入额外的比特以打破一连串的0或1，就是用5个比特来编码4个比特的数据，之后再传给接收方，因此成为4B/5B。编码效率为80%。只采用16种对应16种不同的4位码，其他的16种作为控制码(帧的开始和结束，线路的状态信息等)或保留</p><h3 id="1-6-2、数字数据调制为模拟信号"><a href="#1-6-2、数字数据调制为模拟信号" class="headerlink" title="1.6.2、数字数据调制为模拟信号"></a>1.6.2、数字数据调制为模拟信号</h3><p>数字数据调制技术在发送端将数字信号转换为模拟信号，而在接收端将模拟信号还原为数字信号，分别对应于调制解调器的调制和解调过程。</p><p><img src="https://img-blog.csdnimg.cn/d5adf9784cc54a81916022ab329abf83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ul><li>ASK调幅：0对应的就是没有振幅，1对应的是有振幅</li><li>FSK调频：0对应低频，1对应高频。(振动的频率越高，波形越多)</li><li>PSK调相：对相位的一种调制，0对应一种波形，1对应一种波形。这种波形一般是正弦波或者余弦波</li></ul><p>考研中一般都是 调幅+调相(QAM) ，来看一道题：</p><p>例：某通信链路的波特率是1200Baud，采用4个相位，每个相位有4种振幅的QAM调制技术，则该链路的信息传输速率是多少？</p><p>答案：</p><ul><li>4个相位，每个相位有4种振幅，所以共有 4*4=16种波形，对应16种码元，每个码元携带的比特数为 log<sub>2</sub>16=4</li><li>波特率是1200Baud，也就是说1s传输1200个码元，而每个码元携带4个比特</li><li>所以信息传输速率(1s传输多少个比特) = 1200*4 = 4800 b/s<h3 id="1-6-3、模拟数据编码为数字信号"><a href="#1-6-3、模拟数据编码为数字信号" class="headerlink" title="1.6.3、模拟数据编码为数字信号"></a>1.6.3、模拟数据编码为数字信号</h3>计算机内部处理的是二进制数据，处理的都是<mark>数字音频</mark>，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列(即实现<mark>音频数字化</mark>)</li></ul><p>最典型的例子就是对音频信号进行编码的脉码调制(PCM)，在计算机应用中，能够达到<mark>最高保真水平</mark>的就是PCM编码，被广泛用于素材保存及音乐欣赏，CD、DVD以及我们常见的WAV文件中均有应用。它主要包括三步：抽样、量化、编码。</p><p>抽样：对模拟信号周期性扫描，把时间上连续的信号变成时间上离散的信号。</p><p>为了使所得的离散信号能无失真地代表被抽样的模拟数据，要使用采样定理进行采样：<mark>f<sub>采样频率</sub> ≥ 2f<sub>信号最高频率</sub></mark></p><p>量化：把抽样取得的电平幅值按照一定的分级标度转化为对应的数字值，并取整数，这就把连续的电平幅值转换为离散的信号量。</p><p>编码：把量化的结果转换为与之对应的二进制编码。</p><h3 id="1-6-4、模拟数据调制为模拟信号"><a href="#1-6-4、模拟数据调制为模拟信号" class="headerlink" title="1.6.4、模拟数据调制为模拟信号"></a>1.6.4、模拟数据调制为模拟信号</h3><p>为了实现传输的有效性，可能需要较高的频率。这种调制方式还可以使用频分复用技术，充分利用带宽资源。在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式，模拟的声音数据是加载到模拟的载波信号中传输的。</p><p><img src="https://img-blog.csdnimg.cn/63390ea519144a9582d2b7377d0f72c5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>来看个例子：假如我是好男人曾小贤，我在电视台有自己的晚间广播主持节目”你的月亮我的心”，那么我开始节目要说我的台词：“好男人就是我，我就是曾小贤”。OK，这段台词的波形如上图左边第一个波形所示，为了让其他人也能清楚接收到我的台词，那么我们就需要将左边第一个波形转换成模拟信号波形，也就是第二个波形，我们可以看到频率明显变高了，这样就可以传输而尽量不受其他因素的影响，到达接收器前再转换为低频信号波形，这样接收器就可以接收，用户就可以听到：“好男人就是我，我就是曾小贤”。</p><h2 id="1-7、数据交换方式"><a href="#1-7、数据交换方式" class="headerlink" title="1.7、数据交换方式"></a>1.7、数据交换方式</h2><p><img src="https://img-blog.csdnimg.cn/963d4e27eb824e748520dcd778935d92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h3 id="1-7-1、电路交换"><a href="#1-7-1、电路交换" class="headerlink" title="1.7.1、电路交换"></a>1.7.1、电路交换</h3><p>电路交换的原理：在数据传输期间，源结点与目的结点之间有一条由中间结点构成的专用物理连接线路，在数据传输结束之前，这条线路一直保持。</p><p>电路交换的阶段：</p><p><img src="https://img-blog.csdnimg.cn/f3efd9c422b4405f8162d21f2397807f.png#pic_center"></p><p><strong>1、建立连接</strong></p><p>首先A主机会向离它最近的交换设备发送呼叫请求，这个呼叫请求包含主机A、主机B的ip地址，交换设备A要执行路由选择算法，算法执行结束选择了交换设备B，那么就转发呼叫请求到交换设备B，之后再执行路由选择算法，直到最后转发呼叫请求到主机B。</p><p><img src="https://img-blog.csdnimg.cn/111cdc4733444998a77c5163b1cf2390.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>若主机B目前可以进行连接，那么主机B就会原路返回直至到主机A来发送一个呼叫应答，至此主机A、B就算是建立连接了，也就是电路交换的第一阶段结束了。</p><p><img src="https://img-blog.csdnimg.cn/8b6dc4b948c44eec99099cd4f1aac495.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>2、通信</strong></p><p>建立连接完成后就可以进行通信了，这个通信双方都可以发送接收。类似于全双工通信</p><p><strong>3、释放连接</strong></p><p>若主机A想断开连接，那么主机A沿着之前的路径发送释放请求到主机B，主机B原路返回发送发送释放应答，至此主机A、B的本次通信就结束了</p><p><img src="https://img-blog.csdnimg.cn/77051248838e4dba84b5c4585694dd4c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>4、特点</strong></p><p>电路交换的特点：独占资源，用户始终占用端到端的固定传输宽带。电路交换适用于远程批处理信息传输或系统间实时性要求高的大量数据传输的情况。(若我们好不容易建立连接，结果才传输1byte的内容，那么就太浪费资源了)</p><p>5、电路交换的优缺点</p><table><thead><tr><th>电路交换优点</th><th>电路交换缺点</th></tr></thead><tbody><tr><td>传输时延小</td><td>建立连接时间长</td></tr><tr><td>数据顺序传送，无失序问题</td><td>线路独占，即使通信线路空闲，也不能供其他用户使用，信道使用效率低</td></tr><tr><td>实时性强，双方一旦建立物理通路，便可以实时通信，适用于交互式会话类通信</td><td>灵活性差，双方连接通路中的任何一点出了故障，必须重新拨号建立新连接，不适应突发性通信</td></tr><tr><td>全双工通信，没有冲突，通信双方有不同的信道，不会争用物理信道</td><td>无数据存储能力，难以平滑通信量</td></tr><tr><td>适用于模拟信号和数字信号</td><td>电路交换时，数据直达，不同类型、不同规格、不同速率的终端很难相互进行通信</td></tr><tr><td>控制简单，电路的交换设备及控制较简单</td><td>无法发现与纠正传输差错，难以在通信过程中进行差错控制</td></tr></tbody></table><h3 id="1-7-2、报文交换"><a href="#1-7-2、报文交换" class="headerlink" title="1.7.2、报文交换"></a>1.7.2、报文交换</h3><p><strong>报文</strong>：报文(message)是网络中交换与传输的数据单元，即站点<mark>一次性要发送的数据块</mark>。报文包含了将要发送的完整的数据信息，其长短很不一致，长度不限且可变。</p><p>报文交换的原理：无需在两个站点之间建立一条专用通路，其数据传输的单位是报文，传送过程采用<mark>存储转发</mark>方式。</p><p><img src="https://img-blog.csdnimg.cn/9646169cc44d4283944a781fbc389440.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>信息+报头=报文，报文里面包括源ip地址、目的ip地址以及其他一些控制信息，这样封装成的报文就可以传输了，首先这个报文到达交换设备A这里，交换设备A收下整个报文，暂存报文并且检查报文有无错误，如果无错误交换设备A会利用路由信息找到下一个交换设备且保证到达目的主机的距离最短，由图可知，下一个交换设备应该选择B可以保证离目的主机距离最短。</p><p><img src="https://img-blog.csdnimg.cn/ed7fa3a526f84f9fb08c6c349e6e4929.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>到达交换设备B时，交换设备A、C此时仍然可以进行其他报文传输，不像电路交换那样必须占用端到端的全部信道。</p><p>1、报文交换的优缺点</p><table><thead><tr><th>报文交换优点</th><th>报文交换缺点</th></tr></thead><tbody><tr><td>无需建立连接，无建立连接时延，用户可随时发送报文</td><td>实时性差，不适合传送实时或交互式业务的数据。数据进入交换节点后要经历存储转发过程，从而引起转发时延。</td></tr><tr><td>动态分配线路，动态选择报文通过的最佳路径，可以平滑通信量</td><td>只适用于数字信号</td></tr><tr><td>提高线路可靠性，某条传输路径发生故障，可重新选择另一条路径传输</td><td>由于报文长度没有限制，而每个中间结点都要完整地接收传来的整个报文，当输出线路不空闲时，还可能要存储几个完整报文等待转发，要求网络中每个结点有较大的缓冲区。为了降低成本，减少结点的缓冲存储器的容量，有时要把等待转发的报文存在磁盘上，进一步增加了传送时延</td></tr><tr><td>提高线路利用率，通信双方在不同的时间一段一段地部分占有这条物理通道，多个报文可共享信道</td><td></td></tr><tr><td>提供多目标服务：一个报文可同时发往多个目的地址</td><td></td></tr><tr><td>在存储转发中容易实现代码转换和速率匹配，甚至收发双发可以不同时处于可用状态。这样就便于类型、规格和速度不同的计算机之间进行通信</td><td></td></tr></tbody></table><h3 id="1-7-3、分组交换"><a href="#1-7-3、分组交换" class="headerlink" title="1.7.3、分组交换"></a>1.7.3、分组交换</h3><p>分组：大多数计算机网络都不能连续地传送任意长的数据，所以实际上网络系统把数据分割成小块，然后逐块的发送，这种小块就称作分组(packet)。</p><p><strong>分组交换的原理</strong>：分组交换与报文交换的工作方式基本相同，都采用存储转发形式，形式上的主要差别在于，分组交换网中要<mark>限制所传输的数据单位的长度</mark>，一般选128B。发送节点首先对从终端设备送来的数据报文进行接收、存储，而后将报文划分成一定长度的分组，并以分组为单位进行传输和交换。接收结点将收到的分组组装成信息或报文。</p><hr><p>首先将数据分割成一个个小数据块，小数据块+控制信息(源ip地址、目的ip地址、分组的编号)就是我们的分组，然后分组一组一组的传输到交换设备，交换设备暂存并检查是否有错误</p><p><img src="https://img-blog.csdnimg.cn/b114856ba8d64597972d821f1c4e7bb3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>1、分组交换的优缺点</strong></p><table><thead><tr><th>分组交换优点</th><th>分组交换缺点</th></tr></thead><tbody><tr><td>无建立时延，无需为通信双方预先建立一条专用通信线路，用户可随时发送分组</td><td>尽管分组交换比报文交换的传输时延少，但仍存在存储转发时延，而且其结点交换机必须具有更强的处理能力</td></tr><tr><td>提高线路利用率，通信双方在不同的时间一段一段地部分占有这条物理通道，多个分组可共享信道</td><td>每个分组都要加控制信息，一定程度上降低了通信效率，增加了处理的时间</td></tr><tr><td>简化了存储管理。因为分组的长度固定，相应的缓冲区的大小也固定，在交换结点中存储器的管理通常被简化为对缓冲区的管理，相对比较容易</td><td>当分组交换采用数据报服务时，可能出现失序、丢失或重新分组，分组到达目的结点时，要对分组按编号进行排序等工作，增加了麻烦。若采用虚电路服务，虽无失序问题，但有呼叫建立、数据传输和虚电路释放三个过程</td></tr><tr><td>加速传输，后一个分组的存储可以和前一个分组的转发并行操作；传输一个分组比一份报文所需缓冲区小，减少等待发送时间</td><td></td></tr><tr><td>减少出错几率和重发数据量，提高可靠性，减少传输时延</td><td></td></tr><tr><td>分组短小，适用于计算机之间突发式数据通信</td><td></td></tr></tbody></table><p><strong>2、数据报方式</strong></p><p><img src="https://img-blog.csdnimg.cn/6fbacb56e84f4531be19bc1ad28a4d65.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ol><li>源主机A<mark>将报文分成多个分组</mark>，依次发送到直接相连的结点A</li><li>结点A收到分组后，对每个分组<mark>差错检测</mark>和<mark>路由选择</mark>，不同分组的下一跳结点可能不同</li><li>例如结点C收到分组P1后，对分组P1进行<mark>差错检测</mark>，若正确则向A发送<mark>确认消息</mark>，A收到C确认后则丢弃分组P1副本</li><li>依次类推，所有分组都会发送到主机B</li></ol><p><strong>3、数据报方式的特点</strong></p><ol><li><mark>数据报</mark>的方式为网络层提高<mark>无连接服务</mark>。发送方可随时发送分组，网络中的结点可随时接收分组。<ul><li>无连接服务：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同</li></ul></li><li>同一报文的不同分组达到目的结点时可能发送<mark>乱序、重复与丢失</mark>。</li><li>每个分组在传输过程中都<mark>必须携带源地址和目的地址，以及分组号</mark></li><li>分组在交换结点存储转发时，需要排队等候处理，这会带来一定的时延，当通过交换结点的通信量较大或网络发生拥塞时，这种时延会大大增加，交换结点还可根据情况丢弃部分分组。</li><li>网络具有冗余路径，当某一交换结点或一段链路出现故障时，可相应地更新转发表，寻找另一条路径转发分组，对故障的适应能力强，适用于<mark>突发性通信</mark>，<mark>不适于</mark>长报文、会话式通信。</li></ol><p><strong>4、虚电路方式</strong> </p><p>虚电路将数据报方式和电路交换方式结合，以发挥两者优点。</p><p>虚电路：一条源主机到目的主机类似于电路的路径(<mark>逻辑连接</mark>)，路径上所有结点都要维持这条虚电路的建立，都维持一张虚电路表，每一项记录了一个打开的虚电路的信息。</p><p><img src="https://img-blog.csdnimg.cn/181173d77f144c7d8cb62b6d778b2b9f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>虚电路方式采用了电路交换方式的三个阶段：</p><p><img src="https://img-blog.csdnimg.cn/71f6ebe60db24ac489512b2e3daaf8fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>5、虚电路方式的特点</p><ol><li><mark>虚电路</mark>方式为网络层<mark>提供连接服务</mark>。源结点与目的结点之间建立一条<mark>逻辑连接</mark>，而非实际物理连接。<ul><li>连接服务：首先为分组的传输确定传输路径(建立连接)，然后沿该路径(连接)传输系列分组，系列分组传输路径相同，传输结束后拆除连接</li></ul></li><li>一次通信的所有分组都通过虚电路顺序传送，分组不需携带源地址、目的地址等信息，包含<mark>虚电信号</mark>，相对数据报方式开销小，同一报文的不同分组到达目的结点时<mark>不会乱序、重复或丢失</mark>。</li><li>分组通过虚电路上的每个结点时，结点<mark>只进行差错检测</mark>，<mark>不需进行路由选择</mark>。</li><li><mark>每个结点可能与多个结点</mark>之间建立多条虚电路，每条虚电路支持<mark>特定的</mark>两个端系统之间的数据传输，可以对两个数据端点的<mark>流量进行控制</mark>，两个端系统之间也可以有多条虚电路为不同的进程服务。</li><li>致命弱点：当网络中的某个结点或某条链路出故障而彻底失效时，则所有经过该结点或该链路的虚电路将遭到破坏。</li></ol><p><strong>6、数据报和虚电路</strong></p><table><thead><tr><th></th><th>数据报服务</th><th>虚电路服务</th></tr></thead><tbody><tr><td>连接的建立</td><td>不要</td><td>必须有</td></tr><tr><td>目的地址</td><td>每个分组都有完整的目的地址</td><td>仅在建立连接阶段使用，之后每个分组使用长度较短的虚电路号</td></tr><tr><td>路由选择</td><td>每个分组独立地进行路由选择和转发</td><td>属于同一条虚电路的分组按照同一路由转发</td></tr><tr><td>分组顺序</td><td>不保证分组的有序到达</td><td>保证分组的有序到达</td></tr><tr><td>可靠性</td><td>不保证可靠通信，可靠性由用户主机来保证</td><td>可靠性由网络保证</td></tr><tr><td>对网络故障的适应性</td><td>出故障的结点丢失分组，其他分组路径选择发生变化，可政策输出</td><td>所有经过故障结点的虚电路均不能正常工作</td></tr><tr><td>差错处理和流量控制</td><td>由用户主机进行流量控制，不保证数据报的可靠性</td><td>可由分组交换网负责，也可由用户主机负责</td></tr></tbody></table><h3 id="1-7-4、数据交换方式的选择"><a href="#1-7-4、数据交换方式的选择" class="headerlink" title="1.7.4、数据交换方式的选择"></a>1.7.4、数据交换方式的选择</h3><p><img src="https://img-blog.csdnimg.cn/b8f2868eb74a41f2aaea6963c30b6b7d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ol><li>传送数据量大，且传送时间远大于呼叫时，选择<mark>电路交换</mark>。电路交换传输时延最小。</li><li>当端到端的通路有很多段的链路组成时，采用<mark>分组交换</mark>传送数据较为合适。</li><li>从信道利用率上看，<mark>报文交换</mark>和<mark>分组交换</mark>优于电路交换，其中<mark>分组交换</mark>比报文交换的时延小，尤其<mark>适合于</mark>计算机之间的<mark>突发式的数据通信</mark>。</li></ol><h2 id="1-8、物理层传输介质"><a href="#1-8、物理层传输介质" class="headerlink" title="1.8、物理层传输介质"></a>1.8、物理层传输介质</h2><h3 id="1-8-1、传输介质及分类"><a href="#1-8-1、传输介质及分类" class="headerlink" title="1.8.1、传输介质及分类"></a>1.8.1、传输介质及分类</h3><p>传输介质也称传输媒体/传输媒介，它就是数据传输系统中在发送设备和接收设备之间的<mark>物理通路</mark>。</p><p><mark>传输媒体并不是物理层</mark>。传输媒体在物理层的下面，因为物理层是体系结构的第一层，因此有时称传输媒体为0层。在传输媒体中传输的是信号，但传输媒体并不知道所传输的信号代表什么意思。但物理层规定了<mark>电气特性</mark>，因此能够识别所传送的比特流。</p><p><img src="https://img-blog.csdnimg.cn/bf6a607560b148379f40a581b752aefa.png#pic_center"></p><h3 id="1-8-2、导向性传输介质-1-双绞线"><a href="#1-8-2、导向性传输介质-1-双绞线" class="headerlink" title="1.8.2、导向性传输介质-1.双绞线"></a>1.8.2、导向性传输介质-1.双绞线</h3><p>双绞线是古老、又最常用的传输介质，它由<mark>两根</mark>采用一定规则并排<mark>绞合</mark>的、相互绝缘的<mark>铜导线</mark>组成。</p><blockquote><p>绞合的目的：绞合可以减少对相邻导线的电磁干扰。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/48da894d34124384a22d4becfbe36023.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>根据高中的右手准则知识就可以知道，绞合之后会使得产生的电磁波相互抵消，所以才说绞合可以减少对相邻导线的电磁干扰。</p><p>同时为了进一步提高抗电磁干扰能力，可在双绞线的外面再加上一个由<mark>金属丝</mark>编织成的屏蔽层，这就是<mark>屏蔽双绞线(STP)</mark>,无屏蔽层的双绞线就称为<mark>非屏蔽双绞线(UTP)</mark></p><p><img src="https://img-blog.csdnimg.cn/7f9310aaf0a8435b9d085a469135178e.png#pic_center"></p><p>特点：双绞线价格便宜，距离太远时</p><ul><li>对于<strong>模拟传输</strong>，要用<mark>放大器</mark>放大衰减的信号</li><li>对于<strong>数字传输</strong>，要用<mark>中继器</mark>将失真的信号整形</li></ul><h3 id="1-8-3、导向性传输介质-2-同轴电缆"><a href="#1-8-3、导向性传输介质-2-同轴电缆" class="headerlink" title="1.8.3、导向性传输介质-2.同轴电缆"></a>1.8.3、导向性传输介质-2.同轴电缆</h3><p>同轴电缆由导体<mark>铜质芯线</mark>、<mark>绝缘层</mark>、<mark>网状编织屏蔽层</mark>和<mark>塑料外层</mark>构成。按特性阻抗数值不同，通常将同轴电缆分为两类：50Ω同轴电缆和75Ω同轴电缆。其中,<mark>50Ω同轴电缆</mark>主要用于传送基带数字信号，又称为<mark>基带同轴电缆</mark>。它在<mark>局域网</mark>中得到广泛应用，<mark>75Ω同轴电缆</mark>主要用于传送宽带信号，又称为<mark>宽带同轴电缆</mark>，它主要用于<mark>有线电视系统</mark>。</p><blockquote><p>这里不用记忆50、70的，只需要记住有两种分类</p></blockquote><p><img src="https://img-blog.csdnimg.cn/1968d755e6fa47659d7f850e3dc5c157.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>同轴电缆<mark>抗干扰特性</mark>比双绞线好，被广泛用于传输较高速率的数据，其<mark>传输距离更远</mark>，但<mark>价格</mark>较双绞线贵。</p><h3 id="1-8-4、导向性传输介质-3-光纤"><a href="#1-8-4、导向性传输介质-3-光纤" class="headerlink" title="1.8.4、导向性传输介质-3.光纤"></a>1.8.4、导向性传输介质-3.光纤</h3><p>光纤通信就是利用光导纤维(简称光纤)传递<mark>光脉冲</mark>来进行通信。有光脉冲表示1，无光脉冲表示0。而可见光的频率大约是108MHz，因此光纤通信系统的<mark>带宽远远大于</mark>目前其他各种传输媒体的带宽。</p><p>光纤在发送端有光源，可以采用发光二极管或半导体激光器，它们在电脉冲作用下能产生出光脉冲，在接收端用广电二极管做成光检测器，在检测到光脉冲时可还原出电脉冲。</p><p><img src="https://img-blog.csdnimg.cn/6edb0cc7e9354603a84416d7ff67e001.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>光纤主要由<mark>纤芯(实心的)</mark>和包层构成，光波通过纤芯进行传到，包层较纤芯有较低的折射率。当光线从高折射率的介质射向低折射率的介质时，其折射角将大于入射角。因此，如果入射角足够大，就会出现<mark>全反射</mark>，即光纤碰到包层的时候就会折射回纤芯，这个过程不断重复，光也就沿着光纤传输下去。</p><p><img src="https://img-blog.csdnimg.cn/5f714ded02f9446b8084d79c2b1ac4df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><table><thead><tr><th></th><th>定义</th><th>光源</th><th>特点</th></tr></thead><tbody><tr><td>多模光纤</td><td>有多种传输光信号模式的光纤</td><td>发光二极管</td><td>易失真，适合近距离传输(因为全反射弹来弹去也会有损耗)</td></tr><tr><td>单模光纤</td><td>一种在横向模式直接传输光信号的光纤</td><td>定向性很好的激光二极管</td><td>衰耗小，适合远距离传输</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/d49bdc30083c412f981b1b71bc3eddd2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>1、光纤的特点</strong></p><ol><li>传输<mark>损耗小</mark>，中继距离长，对远距离传输特别经济</li><li><mark>抗雷电和电磁干扰性能好</mark></li><li>无川音干扰，保密性好，也<mark>不易被窃听或截取数据</mark></li><li><mark>体积小，重量轻</mark></li></ol><h3 id="1-8-5、非导向型传输介质"><a href="#1-8-5、非导向型传输介质" class="headerlink" title="1.8.5、非导向型传输介质"></a>1.8.5、非导向型传输介质</h3><p><img src="https://img-blog.csdnimg.cn/17c169826c9f4a3d86f7e6e4f5d17e29.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="1-9、物理层设备"><a href="#1-9、物理层设备" class="headerlink" title="1.9、物理层设备"></a>1.9、物理层设备</h2><h3 id="1-9-1、中继器"><a href="#1-9-1、中继器" class="headerlink" title="1.9.1、中继器"></a>1.9.1、中继器</h3><p><strong>诞生原因</strong>：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度时将造成信号失真，因此会导致接收错误。</p><p><strong>中继器的功能</strong>：对信号进行<mark>再生和还原</mark>，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。</p><p><strong>中继器的两端</strong>：两端的网络部分是网段，而不是子网，适用于完全相同的<mark>两类</mark>网络的互连，且两个网段速率要相同。</p><ul><li>中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是否有错误数据或者不适于网段的数据</li><li>两端可连相同的媒体，也可连不同的媒体</li><li>中继器两端的网段一定要是同一个协议(中继器不会存储转发)</li></ul><blockquote><p>5-4-3规则：网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障。</p></blockquote><ul><li>5:最多不超过5个网段</li><li>4:5个网段内最多只能有4个物理层网络设备，可以是中继器，可以是集线器</li><li>3:只有3个段可以挂接计算机</li></ul><p><img src="https://img-blog.csdnimg.cn/6128ba8ce8da4a0c809c097437976b4b.png#pic_center"></p><h3 id="1-9-2、集线器-多口中继器"><a href="#1-9-2、集线器-多口中继器" class="headerlink" title="1.9.2、集线器(多口中继器)"></a>1.9.2、集线器(多口中继器)</h3><p>集线器的功能：对信号进行再生放大转发，对衰减的信号进行放大，接着转发到其他所有(除输入端口外[因为是输入端口发的信号])处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备。</p><p><img src="https://img-blog.csdnimg.cn/a4a2142dab7743e398c900525d692cc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>我们来解释以下上图：例如5台电脑都连接着集线器，距离为100m，其中相邻电脑要想通信，就需要走200m的距离，且中途经过集线器，就可以对衰减的信号进行放大，之后再传输到其他处于工作的端口上，这就是增加信号传输的距离，延长网络的长度。信号发送到集线器上再传输，是传输到所有工作的端口，也就是其他电脑也可以接收到，但是识别发现信号不是发送给自己的就不对信号做处理。这也就是不具备信号的定向传送能力，是一个共享式设备的意思。</p><p>集线器不能分割冲突域：如果第一台电脑和第二台电脑通信，第三台电脑也和第一台电脑要通信，这样就会发生冲突，怎么解决呢？停止其中一条通信，等过段时间再通信。</p><p>并且连接在集线器上的计算机是会平分宽带的，所以连接的计算机越多，传输速率也就越慢。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=426194882&amp;auto=1&amp;height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络绪论与体系结构</title>
      <link href="/2022/03/02/ji-suan-ji-wang-luo-xu-lun-yu-ti-xi-jie-gou/"/>
      <url>/2022/03/02/ji-suan-ji-wang-luo-xu-lun-yu-ti-xi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="目录脑图"><a href="#目录脑图" class="headerlink" title="目录脑图"></a>目录脑图</h1><p><img src="https://img-blog.csdnimg.cn/fc1d509a813643189b8d1a08b085b88b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="计网体系结构"><a href="#计网体系结构" class="headerlink" title="计网体系结构"></a>计网体系结构</h2><p><img src="https://img-blog.csdnimg.cn/9b5a019106b84727acbc9343e478d327.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="1-1、计算机网络"><a href="#1-1、计算机网络" class="headerlink" title="1.1、计算机网络"></a>1.1、计算机网络</h2><ul><li>计算机网络：是一个将分散的、具有独立功能的<mark>计算机系统</mark>，通过<mark>通信设备</mark>与<mark>线路</mark>连接起来，由功能完善的<mark>软件</mark>实现资源共享和信息传递的系统。</li><li>计算机网络是<mark>互联的</mark>、<mark>自治的</mark>计算机集合<ul><li>互联：通过通信链路互联互通</li><li>自治：无主从关系</li></ul></li></ul><h2 id="1-2、计算机网络的功能"><a href="#1-2、计算机网络的功能" class="headerlink" title="1.2、计算机网络的功能"></a>1.2、计算机网络的功能</h2><ol><li>数据通信</li><li>资源共享：同一个计算机网络上的其他计算机可使用某台计算机的计算机资源的行为，可共享<mark>硬件、软件、数据</mark>。</li><li>分布式处理：多台计算机各自承担同一工作任务的不同部分(Hadoop平台)</li><li>提高可靠性</li><li>负载均衡</li></ol><h2 id="1-3、计算机网络的发展"><a href="#1-3、计算机网络的发展" class="headerlink" title="1.3、计算机网络的发展"></a>1.3、计算机网络的发展</h2><h3 id="1-3-1、第一阶段"><a href="#1-3-1、第一阶段" class="headerlink" title="1.3.1、第一阶段"></a>1.3.1、第一阶段</h3><p><img src="https://img-blog.csdnimg.cn/bd69359b298549bb89bc0a39ed56331e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>网络把许多计算机连接在一起，而互联网则把许多网络连接在一起，因特网是世界上最大的互联网。  </p><h3 id="1-3-2、第二阶段"><a href="#1-3-2、第二阶段" class="headerlink" title="1.3.2、第二阶段"></a>1.3.2、第二阶段</h3><p><img src="https://img-blog.csdnimg.cn/7a6f0f06bbab4cafbdc73e751e6ecebe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center">  </p><h3 id="1-3-3、第三阶段"><a href="#1-3-3、第三阶段" class="headerlink" title="1.3.3、第三阶段"></a>1.3.3、第三阶段</h3><p><img src="https://img-blog.csdnimg.cn/71fdbf8e76d6432ca3e3ff5f0d5810fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h3 id="1-3-4、小结"><a href="#1-3-4、小结" class="headerlink" title="1.3.4、小结"></a>1.3.4、小结</h3><p><img src="https://img-blog.csdnimg.cn/af2dabe3482e4b89a548b7f888decab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="1-4、标准化工作"><a href="#1-4、标准化工作" class="headerlink" title="1.4、标准化工作"></a>1.4、标准化工作</h2><p>标准分为：</p><ul><li>法定标准：由权威机构指定的正式的、合法的标准 <mark>OSI</mark></li><li>事实标准：某些公司的产品在这些竞争中占据了主流，时间长了，这些产品中的协议和技术就成了标准 <mark>TCP/IP</mark></li></ul><h3 id="1-4-1、RFC"><a href="#1-4-1、RFC" class="headerlink" title="1.4.1、RFC"></a>1.4.1、RFC</h3><p>RFC：Request For Comments ，因特网标准的形式</p><p>RFC要上升为因特网正式标准的四个阶段：</p><ul><li>因特网草案(Internet Draft)：这个阶段还不是RFC文档</li><li>建议标准(Proposed Standard)：从这个阶段开始称为RFC文档</li><li>草案标准(Draft Standard)：2011年之后此标准就被取消了</li><li>因特网标准(Internet Standard)</li></ul><h3 id="1-4-2、标准化工作的相关组织"><a href="#1-4-2、标准化工作的相关组织" class="headerlink" title="1.4.2、标准化工作的相关组织"></a>1.4.2、标准化工作的相关组织</h3><ul><li>国际标准化组织ISO OSI模型、HDLC协议</li><li>国际电信联盟ITU 制定通信规则</li><li>电气和电子工程师协会IEEE 学术机构、IEEE802系列标准、5G</li><li>Internet工程任务组IETF 负责因特网相关标准的制定<br><img src="https://img-blog.csdnimg.cn/9348915cfc524c74bc9cc1d6b41fd65c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></li></ul><h2 id="1-5、组成和分类"><a href="#1-5、组成和分类" class="headerlink" title="1.5、组成和分类"></a>1.5、组成和分类</h2><h3 id="1-5-1、计网的组成"><a href="#1-5-1、计网的组成" class="headerlink" title="1.5.1、计网的组成"></a>1.5.1、计网的组成</h3><h3 id="1-5-2、计网的分类"><a href="#1-5-2、计网的分类" class="headerlink" title="1.5.2、计网的分类"></a>1.5.2、计网的分类</h3><p><img src="https://img-blog.csdnimg.cn/2fce0502cbbc4dfcbadd5b345d6978fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ol><li>按分布范围分：广域网WAN、城域网MAN、局域网LAN、个人区域网PAN</li><li>按使用者分：公用网、专用网</li><li>按交换技术分：电路交换、报文交换、分组交换</li><li>按拓扑结构分：总线型、星型、环型、网状型(常用于广域网)</li><li>按传输技术分：广播式网络(共享公共通信信道)、点对点网络(使用分组存储转发和路由选择机制)</li></ol><h3 id="1-5-3、脑图时刻"><a href="#1-5-3、脑图时刻" class="headerlink" title="1.5.3、脑图时刻"></a>1.5.3、脑图时刻</h3><p><img src="https://img-blog.csdnimg.cn/4712e9be7e5e4841a0dd7b58752ea5ad.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="1-6、性能指标"><a href="#1-6、性能指标" class="headerlink" title="1.6、性能指标"></a>1.6、性能指标</h2><p>性能指标之速率、带宽、吞吐量、时延、时延带宽积、往返时间RTT、利用率</p><h3 id="1-6-1、速率"><a href="#1-6-1、速率" class="headerlink" title="1.6.1、速率"></a>1.6.1、速率</h3><p>速率：速率即<mark>数据率</mark>或<mark>称数据传输率</mark>或<mark>比特率</mark></p><ol><li>什么是比特？</li></ol><p>计算机当中发送的信号都是以数字形式发送的，比特就是计算机当中数据量的一个单位。就好像我们去游乐园排队的时候，我们是一个人一个人进游乐园，在计算机数据传输的过程中，也是一个比特一个比特的进入信道。<strong>数据传输的单位就是比特。比特就是数字1或者0，单位是位。</strong></p><p>连接在计算机网络上的<strong>主机</strong>在数字信道上传送数据<strong>位数的速率</strong>。单位是 b/s、kb/s、Mb/s、Gb/s、Tb/s。如下图，在1s内将10位数据发送完毕，说明其速率就是 10b/s。</p><p><img src="https://img-blog.csdnimg.cn/7b4ae317f3ac4ef6a9de8761c926759c.png#pic_center"></p><table><thead><tr><th>速率</th><th>存储容量 1Byte(字节)=8bit(比特)</th></tr></thead><tbody><tr><td>千 1kb/s=10<sup>3</sup>b/s</td><td>1KB=2<sup>10</sup>B=1024B=1024*8b</td></tr><tr><td>兆 1Mb/s=10<sup>3</sup>kb/s=10<sup>6</sup>b/s</td><td>1MB=2<sup>10</sup>KB=1024KB</td></tr><tr><td>吉 1GB=10<sup>3</sup>Mb/s=10<sup>6</sup>kb/s=10<sup>9</sup>b/s</td><td>1GB=2<sup>10</sup>MB=1024MB</td></tr><tr><td>太 1TB=10<sup>3</sup>GB=10<sup>6</sup>Mb/s=10<sup>9</sup>kb/s=10<sup>12</sup>b/s</td><td>1TB=2<sup>10</sup>GB=1024GB</td></tr></tbody></table><h3 id="1-6-2、带宽"><a href="#1-6-2、带宽" class="headerlink" title="1.6.2、带宽"></a>1.6.2、带宽</h3><ul><li>“带宽”原本指某个信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹(Hz)</li><li>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的”最高数据率”。单位是”比特每秒”，b/s，kb/s，Mb/s，Gb/s。</li></ul><p>带宽可以理解为<strong>网络设备所支持的最高速度</strong>。<br><img src="https://img-blog.csdnimg.cn/9c01c94b4f464ca3bdf01784c4d5914e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>链路带宽=1MB/S：1s可以向链路上发送1MB，也就是1us内可向链路发送1bit数据。</p><p>经过1us之后，主机向链路发送1bit数据，再经过1us，第一个比特在链路上向前传播200m，第二个比特从主机发送到链路上，再经过1us，第一个比特继续向前传播200m，第二个比特向前传播200m，第三个比特从主机发送到链路上。</p><p><img src="https://img-blog.csdnimg.cn/2101c42ed28448e3abfd7a6b6746d2c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><blockquote><p>链路带宽指的是在入口发送数据的速率，而不是在链路上传播的速率。链路上传播的速率是以电磁波的形式传播。</p></blockquote><h3 id="1-5-3、吞吐量"><a href="#1-5-3、吞吐量" class="headerlink" title="1.5.3、吞吐量"></a>1.5.3、吞吐量</h3><p>表示在单位时间内通过某个网络(或信道、接口)的数据量。单位b/s，kb/s，Mb/s等</p><p>吞吐量受网络的带宽或网络的额定速率的限制。</p><p><img src="https://img-blog.csdnimg.cn/e85caafb63ba4edcb5bc4915c006865f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>链路带宽100MB/S,这是发送的速率，服务器1接收的速率为20MB/S，服务器2接收的速率为10MB/S。吞吐量是30MB/s。</p><p>举个例子：”我”是一个大胃王,我一秒能吃100桶方便面，白象厂家给了我20桶方便面，康师傅厂家给了我10桶方便面，那么我这一秒只能吃30桶了。因为只有30桶，我自身是可以吃100桶的。</p><h3 id="1-5-4、时延"><a href="#1-5-4、时延" class="headerlink" title="1.5.4、时延"></a>1.5.4、时延</h3><p>时延指数据(报文/分组/比特流)从网络(或链路)的一端传送到另一端所需的时间。也叫<code>延迟</code>或<code>迟延</code>，单位是<code>s</code></p><ul><li>发送时延(传输时延)：从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间。<ul><li><strong>发送时延 = 数据长度 / 信道带宽(发送速率)</strong></li></ul></li><li>传播时延：取决于电磁波传播速度和链路长度<ul><li><strong>传播时延 = 信道长度 / 电磁波在信道上的传播速率</strong></li></ul></li><li>排队时延：等待输出 (入链路可用)</li><li>处理时延：检错找出口</li></ul><p>例如A、B两个主机通信，通过链路进行连接，中间放置一个路由器。</p><p><img src="https://img-blog.csdnimg.cn/fe7cfaeb1c284038bb343adeeb198b8c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>发送时延</strong>：A主机有10位比特，A主机将所有数据从自身发送到链路信道上，直到最后一个比特到信道上为止，这样的一段时间就叫做发送时延。</p><p>假如说A主机口的带宽是10b/s,也就是说A主机1s可以将10个比特发送到信道上，则发送时延如下：<br>$$发送时延=\frac{数据长度}{信道带宽}\quad=\frac{10b}{10b/s}=1s \quad $$<br><img src="https://img-blog.csdnimg.cn/a6b9c04783c948a58ecdfad1c1d54221.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>传播时延：电磁波在信道上传播一定距离所花费的时间。取决于<strong>电磁波传播速度</strong>和<strong>链路长度</strong>。</p><p>假设电磁波传播速度在这条线路上的速度是10m/s，先不考虑路由器，就只看A和B之间的通信，假如AB之间的距离是100m,则传播时延：<br>$$传播时延=\frac{信道长度}{电磁波在信道上的传播速率}\quad = \frac{100m}{10m/s} =10s\quad$$</p><hr><p>如图,10个比特已经到路由器了,但是路由器比较忙,所以需要这10个比特等待，等待的时间就是<strong>排队时延</strong>。</p><p>在10个比特上路由器之前，路由器还会对比特进行检查是否有错并看这10个比特要发送到哪里去，这一段时间就叫做<strong>处理时延</strong>。</p><hr><p><strong>高速链路</strong>：我们这里的信道带宽是10b/s，如果我们将带宽改为100b/s，那么我们的发送时延就会大大减少，所以高速链路指的是发送速率提高，而并不会影响到电磁波的传播速率。</p><h3 id="1-5-5、时延带宽积"><a href="#1-5-5、时延带宽积" class="headerlink" title="1.5.5、时延带宽积"></a>1.5.5、时延带宽积</h3><p>时延带宽积(bit) = 传播时延(s) × 带宽(b/s)</p><p>时延带宽积又称为<mark>以比特为单位的链路长度</mark>，即”某段链路现在有多少比特[容量]<br><img src="https://img-blog.csdnimg.cn/97366d1c72a54ea2b035d3a6910c4c29.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>带宽指的是发送速率，就是A端一直发送速率，1个比特经过1个传播时延会从A走向B，当第一个比特碰到B为止，发送停止，<strong>此时时延带宽积就是链路里面所有的比特</strong>。</p><h3 id="1-5-6、往返时延RTT"><a href="#1-5-6、往返时延RTT" class="headerlink" title="1.5.6、往返时延RTT"></a>1.5.6、往返时延RTT</h3><p>往返时延RTT：<strong>从发送方发送数据开始，到发送方收到接收方的确认(接收方收到数据后立即发送确认)，总共经历的时延</strong></p><ul><li>RTT越大，在收到确认之前，可以发送的数据越多</li><li>RTT包括<ul><li>往返传播时延 = 传播时延 * 2</li><li>末端处理时间</li></ul></li></ul><p>我们可以打开cmd窗口，使用 <code>ping www.baidu.com</code> 命令就可以测出往返时延。</p><h3 id="1-5-7、利用率"><a href="#1-5-7、利用率" class="headerlink" title="1.5.7、利用率"></a>1.5.7、利用率</h3><p>来个形象的例子：<br><img src="https://img-blog.csdnimg.cn/974c99b1d4564f20bc0f34852c887f44.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>如果主机A和主机B进行通信，它们之间的这条链路，如果链路上一直都有数据传输，那么利用率就高，如果偶尔有数据传输，那么利用率就低。</p><p><strong>利用率分为</strong>：</p><ul><li>信道利用率<ul><li>信道利用率 = 有数据通过的时间 / 总(有+无)数据通过的时间</li></ul></li><li>网络利用率<ul><li>信道利用率加权平均值</li></ul></li></ul><blockquote><p>时延与利用率的关系<br><img src="https://img-blog.csdnimg.cn/5507c1b5a30d4061ae64e1a0269494b5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center"></p></blockquote><p>随着利用率趋近于1的时候，时延是急剧增大的。因为如果车道利用率很高，说明上面都是车，那么每辆车移动起来就会很缓慢，时延就会增大。</p><h3 id="1-5-8、脑图时刻"><a href="#1-5-8、脑图时刻" class="headerlink" title="1.5.8、脑图时刻"></a>1.5.8、脑图时刻</h3><p><img src="https://img-blog.csdnimg.cn/f96cabd09163451984e985d2068374dc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>速率就是实际传输的速率，带宽主要指的是理想条件下能达到的最高的速率，吞吐量就是所有信道加一块1s内可以接收到多少比特。</p><h2 id="1-6、分层结构"><a href="#1-6、分层结构" class="headerlink" title="1.6、分层结构"></a>1.6、分层结构</h2><p><img src="https://img-blog.csdnimg.cn/63b8dfdef3e54de2934b07e9cc0517d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>发送文件前要完成的工作：</p><ol><li>发起通信的计算机必须将数据通信的通路进行激活</li><li>要告诉网络如何识别目的主机</li><li>发起通信的计算机要查明目的主机是否开机，并且与网络连接正常</li><li>发起通信的计算机要弄清楚，对方计算机中文件管理程序是否已经做好准备工作</li><li>确保差错和意外可以解决</li></ol><p>分层的基本原则：</p><ol><li><p>各层之间相互独立，每层只实现一种相对独立的功能。</p></li><li><p>每层之间界面自然清晰，易于理解，相互交流尽可能少</p></li><li><p>结构上可分隔开。每层都采用最合适的技术来实现。</p></li><li><p>保持下层对上层的独立性，上层单向使用下层提供的服务。(犹如下级给上级领导敬酒)</p></li><li><p>整个分层结构应该能促进标准化工作</p></li></ol><h3 id="1-6-1、正确认识分层结构"><a href="#1-6-1、正确认识分层结构" class="headerlink" title="1.6.1、正确认识分层结构"></a>1.6.1、正确认识分层结构</h3><ol><li>实体：第n层中的活动元素称为n层实体。同一层的实体叫对等实体。</li></ol><p>例如主机A的第5层和主机B的第5层实体就叫对等实体</p><ol start="2"><li><p>协议：为进行网络中的对等实体数据交换而建立的规则、标准或约定称为网络协议。协议是水平的，因为只能在对等实体之间进行。协议有三大要素：</p><ol><li>语法：规定传输数据的格式</li><li>语义：规定所要完成的功能</li><li>同步：规定各种操作的顺序</li></ol></li><li><p>接口(访问服务点SAP)：上层使用下层服务的入口。</p><ul><li>每两个相邻层之间都会有接口，这个接口如同桥梁，使得下层可以为上层提供服务。</li></ul></li><li><p>服务：下层为相邻上层提供的功能调用。服务是单向的，只有下层为上层提供服务，服务也是垂直的。</p><ul><li>例如第4层使用第3层的服务，同时它为第5层提供服务。也就是说每一个中间层次都为上层提供服务，同时使用下层及下面所有层次服务的总和。</li></ul></li></ol><p><img src="https://img-blog.csdnimg.cn/03e66fd2b46b466bad121a7bf8c23912.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ol><li><p>SDU服务数据单元：为完成用户所要求的功能而应传送的数据。</p><ul><li>也就是每一层要传输的数据，也就是有用的数据，就叫做SDU。</li></ul></li><li><p>PCI协议控制信息：控制协议操作的信息</p></li><li><p>PDU协议数据单元：对等层次之间传送的数据单位</p><ul><li>PCI + SDU = PDU，第4层的PDU作为下一层的SDU，又加上PCI，得到第3层的PDU。</li></ul></li></ol><h3 id="1-6-2、概念总结"><a href="#1-6-2、概念总结" class="headerlink" title="1.6.2、概念总结"></a>1.6.2、概念总结</h3><ul><li>网络体系结构是从功能上描述计算机网络结构。</li><li>计算机网络体系结构简称网络体系结构是分层结构。</li><li>每层遵循某个/些网络协议以完成本层功能。</li><li>计算机网络体系结构是计算机网络的各层及其协议的集合。</li><li>第n层在向n+1层提供服务时，此服务不仅包含第n层本身的功能，还包含由下层服务提供的功能。</li><li>仅仅在相邻层间有接口，且所提供服务的具体实现细节对上一层完全屏蔽。</li><li>体系结构是抽象的，而实现是指能运行的一些软件和硬件。</li></ul><h2 id="1-7、OSI参考模型"><a href="#1-7、OSI参考模型" class="headerlink" title="1.7、OSI参考模型"></a>1.7、OSI参考模型</h2><p><img src="https://img-blog.csdnimg.cn/4875c276916b4230b6a11ecebac77ec8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/4f361e4e9f484e6fb1e4a63e5bbcb90f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>将每一层的第一个字提取出来，由第一层到第7层，得到一个记忆口诀：<mark>物联网淑慧试用</mark></p><p>7层模型上面3层负责数据处理，下面3层负责数据通信</p><h3 id="1-7-1、OSI参考模型解释通信过程"><a href="#1-7-1、OSI参考模型解释通信过程" class="headerlink" title="1.7.1、OSI参考模型解释通信过程"></a>1.7.1、OSI参考模型解释通信过程</h3><p><img src="https://img-blog.csdnimg.cn/c2ef9c2db0284f13980900e4839aab96.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>比如我们有两个主机A、B进行通信，中间有中间系统(路由器,网桥交换机等)。数据在主机要经过7层，在中间系统要经过下3层。所以上面4层我们称为端到端传输，下面3层我们称为点到点传输。</p><p><img src="https://img-blog.csdnimg.cn/9306f28045984fcf8d91b4a29787f4f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>物理层之间有传输介质，对等实体(层次)之间都会有协议。</p><p>数据信息从A应用层传输到最下层物理层，在中间每一层都会对数据进行加工处理，之后物理层传输至中间系统物理层，中间系统将数据向上层传输对数据信息进行还原，还原之后继续向下层传输对数据进行加工，之后将数据传送至B物理层，B物理层向上层传输对数据信息进行还原，这样数据就由A传输到B了。</p><hr><p>我们来看一下每层对数据的加工：</p><p><img src="https://img-blog.csdnimg.cn/8383b81d94f04952a0a08e5f161b7d26.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ol><li>A应用层对数据加了首部PCI协议控制信息，因为 PCI + SDU = PDU，第7层的PDU作为下一层的SDU，又加上PCI，得到第6层的PDU</li><li>数据链路层不仅加了首部，而且加了尾部。</li><li>物理层不会进行处理，只是会形成比特流，将比特流放到传输介质上传输。</li><li>然后比特流传输到B，由于A、B对等实体之间协议的存在，可以使得B每一层对数据进行去掉头部还原数据，最终可以得到原始的A传输的数据。<h3 id="1-7-2、应用层"><a href="#1-7-2、应用层" class="headerlink" title="1.7.2、应用层"></a>1.7.2、应用层</h3>应用层：所有能和用户交互产生网络流量的程序，用户与网络的界面。</li></ol><p>例如我们平常电脑连上网之后才能试用的软件，如果不连网也能使用的那就不叫作应用层。</p><p>典型应用层服务：</p><ul><li>文件传输(FTP)</li><li>电子邮件(SMTP)</li><li>万维网(HTTP)</li></ul><h3 id="1-7-3、表示层"><a href="#1-7-3、表示层" class="headerlink" title="1.7.3、表示层"></a>1.7.3、表示层</h3><p>表示层：用于处理在两个通信系统中交换信息的表示方式(语法和语义)</p><p>功能：</p><ol><li><p>数据格式变换(翻译官)</p><p> 由于不同系统的计算机的编码和表示方式不太一样，所以为了使不同的主机能够进行数据和信息的交换，就需要表示层实现数据格式变换的功能。</p></li><li><p>数据加密解密</p></li><li><p>数据压缩和恢复</p></li></ol><h3 id="1-7-4、会话层"><a href="#1-7-4、会话层" class="headerlink" title="1.7.4、会话层"></a>1.7.4、会话层</h3><p>会话层：向表示层实体/用户进程提供<strong>建立连接</strong>并在连接上<strong>有序</strong>地<strong>传输</strong>数据。这是会话，也是<strong>建立同步</strong>(SYN)</p><p>例如我们在网页中打开百度和一个视频，这时网页就与百度窗口和视频窗口建立了会话，此时对视频进行快进不会影响百度窗口会话，因为会话之间是彼此独立的。</p><p>会话层的功能：</p><ol><li>建立、管理、终止会话</li><li>使用校验点可使会话在通信失效时从校验点/同步点继续恢复通信，实现数据同步。(适用于传输大文件)</li></ol><h3 id="1-7-5、传输层"><a href="#1-7-5、传输层" class="headerlink" title="1.7.5、传输层"></a>1.7.5、传输层</h3><p>传输层：负责主机中两个进程的通信，即端到端的通信。传输单位是<strong>报文段</strong>或用户数据报。</p><p>传输层功能：</p><ol><li><strong>可</strong>靠传输、不可靠传输</li><li><strong>差</strong>错控制</li><li><strong>流</strong>量控制</li><li>复<strong>用</strong>分用<br>记忆口诀：可查的也能留用？我们来看一下这几个功能的应用场景：</li></ol><p><img src="https://img-blog.csdnimg.cn/6ce77d837dbb44dbb11eca77c9744dbe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ol><li><p>例如我们两台电脑之间要传输文件，如果此文件比较大，那么文件会被分成好几个报文段，首先确认建立连接，然后发送报文段，只有另一台主机确认接收到第一个报文段，第二个报文段才能发送，这种确认机制就是<strong>可靠传输</strong>。<mark>可靠传输适用于大文件传输</mark>。</p></li><li><p>如果我们仅仅发送一个”在吗”给另一台电脑，那么我们不用确认是否建立连接，不用确认另一台电脑是否已经接收，这种就是<strong>不可靠传输</strong>。<mark>不可靠传输适用于小文件传输</mark></p></li><li><p><strong>差错控制</strong>就是对传输过程中的一些差错进行控制，例如报文段丢失、失序等，传输层就负责纠正这些错误。</p></li><li><p><strong>流量控制</strong>就是控制发送方的速度，因为有时候接收方来不及接收很多报文段，此时传输层就会控制使得发送方发的慢一点。</p></li><li><p>复用：多个应用层进程可同时使用下面运输层的服务</p><p> 分用：运输层把收到的信息分别交付给上面应用层中相应的进程。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/30952bb144c2480bb73b36f3e4400305.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>例如两个手机，都开了两个进程，分别是QQ、微信，每个进程都会被独立分配一个端口号，QQ的端口号是1，微信的端口号是2。此时QQ、微信都要发送信息给另一台手机，信息出了被分成报文段外，还会添加相应的端口号，这样到了另一台手机接收到报文段可以根据端口号来将信息发给不同的进程。这就是复用分用的体现。</p><h3 id="1-7-6、网络层"><a href="#1-7-6、网络层" class="headerlink" title="1.7.6、网络层"></a>1.7.6、网络层</h3><p>网络层：主要任务是把<strong>分组</strong>从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位是<strong>数据报</strong>。<strong>数据报</strong>过长的时候，就会将<strong>数据报</strong>切割分成<strong>分组</strong>。</p><p>网络层功能：</p><ol><li>路由选择</li><li>流量控制</li><li>差错控制</li><li>拥塞控制</li></ol><p>我们来看一下这几个功能：</p><ol><li><p>例如两台主机进行信息交互，中间要经过中间系统(路由器)，选择哪几个路由器来传输就是路由选择</p></li><li><p>协调接收端和发送端的速度就是流量控制</p></li><li><p>通信两结点之间约定一些特定的规则，接收方就会根据规则来检验接收到的数据是否有错，若有错就会修改</p></li><li><p>若所有结点都来不及接收分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解这种拥塞。</p></li></ol><h3 id="1-7-7、数据链路层"><a href="#1-7-7、数据链路层" class="headerlink" title="1.7.7、数据链路层"></a>1.7.7、数据链路层</h3><p>数据链路层：主要任务是把网络层传下来的数据报<strong>组装成帧</strong>。数据链路层/链路层的传输单位是<strong>帧</strong>。</p><p>数据链路层功能：</p><ol><li><p>成帧(定义帧的开始和结束)</p></li><li><p>差错控制 <strong>帧错+位错</strong></p></li><li><p>流量控制</p></li><li><p>访问(接入)控制-控制对信道的访问</p></li></ol><p><img src="https://img-blog.csdnimg.cn/c4248b15bb2545288932571eb583a5d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h3 id="1-7-8、物理层"><a href="#1-7-8、物理层" class="headerlink" title="1.7.8、物理层"></a>1.7.8、物理层</h3><p>物理层：主要任务是在<strong>物理媒体(同轴电缆、双绞线等)上实现比特流的透明传输</strong>。物理层的传输单位是<strong>比特</strong>。物理层主要就是把比特流转化为电信号，然后放到链路上进行传送。</p><p>透明传输：不管所传数据是什么样的比特组合，都应当能在链路上传送。</p><blockquote><p>“透明”在计算机里面指的是看不见摸不着的，现实生活中指的是清晰明了</p></blockquote><p>物理层功能：</p><ol><li><p>定义接口特性</p></li><li><p>定义传输模式(单工、半双工、双工)</p><p> 单工：同一时刻只能有一个人在发送或者接收</p><p> 半双工：两个人都可以作为发送方和接收方，但是同一时刻还是只能有一个人发送信息(对讲机)</p><p> 双工：两个人可以双向同时的接收和发送(打电话)</p></li><li><p>定义传输速率</p></li><li><p>比特同步(发送方发一个1，接收端就可以准确无误接收一个1)</p></li><li><p>比特编码</p></li></ol><h3 id="1-8、TCP-x2F-IP参考模型"><a href="#1-8、TCP-x2F-IP参考模型" class="headerlink" title="1.8、TCP/IP参考模型"></a>1.8、TCP/IP参考模型</h3><p><img src="https://img-blog.csdnimg.cn/ec8dad0256f54a1c9d3802dca7f4356a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h3 id="1-8-1、OSI与TCP-x2F-IP参考模型"><a href="#1-8-1、OSI与TCP-x2F-IP参考模型" class="headerlink" title="1.8.1、OSI与TCP/IP参考模型"></a>1.8.1、OSI与TCP/IP参考模型</h3><p>相同点：</p><ol><li>都分层</li><li>基于独立的协议栈的概念</li><li>可以实现异构网络互联(可以实现不同厂家生产的设备进行通信)</li></ol><p>不同点：</p><ol><li>OSI定义三点：服务、协议、接口</li><li>OSI先出现，参考模型先于协议发明，但是不偏向特定协议。TCP/IP是先发明协议，再出现参考模型</li><li>TCP/IP设计之初就考虑到异构网互联问题，将IP作为重要层次。</li><li></li></ol><table><thead><tr><th></th><th>ISO/OSI参考模型</th><th>TCP/IP模型</th></tr></thead><tbody><tr><td>网络层</td><td>无连接+面向连接</td><td>无连接</td></tr><tr><td>传输层</td><td>面向连接</td><td>无连接+面向连接</td></tr></tbody></table><p>面向连接分为三个阶段：</p><ol><li>第一是建立连接，在此阶段，发出一个建立连接的请求。</li><li>只有在连接成功建立之后，才能开始数据传输，这是第二阶段</li><li>接着，当数据传输完毕，必须释放连接。</li></ol><p>而面向无连接没有这么多阶段，它直接进行数据传输。</p><h2 id="1-9、5层参考模型"><a href="#1-9、5层参考模型" class="headerlink" title="1.9、5层参考模型"></a>1.9、5层参考模型</h2><p><img src="https://img-blog.csdnimg.cn/034a60e02bd1496ab5da33a2f7b765c5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h3 id="1-9-1、5层参考模型的数据封装与解封装"><a href="#1-9-1、5层参考模型的数据封装与解封装" class="headerlink" title="1.9.1、5层参考模型的数据封装与解封装"></a>1.9.1、5层参考模型的数据封装与解封装</h3><p><img src="https://img-blog.csdnimg.cn/cc1ea4f40c07482cb254e009c78ce424.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><ol><li><p>首先对于数据，应用层会加一定的控制信息(头部)，这样就组成了报文</p></li><li><p>接下来把这个报文切分成段，切分成段之后放到传输层上，传输层加上控制协议(头部)，这样就形成了报文段。</p></li><li><p>接下来将报文段放到网络层，网络层加上控制信息(头部)，这样就形成了数据报。</p></li><li><p>接下来将数据报放到数据链路层，加上头部和尾部，这样就形成了帧</p></li><li><p>接下来将帧放到物理层，物理层将其转成比特流，传输单元就是比特，将比特流放在链路上进行传输。</p></li><li><p>之后传输到主机B进行解封装。</p></li></ol><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1844668204&amp;auto=1&amp;height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML笔记：HTML入门与进阶以及HTML5</title>
      <link href="/2022/03/01/html-bi-ji-html-ru-men-yu-jin-jie-yi-ji-html5/"/>
      <url>/2022/03/01/html-bi-ji-html-ru-men-yu-jin-jie-yi-ji-html5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1、前端开发最核心技术"><a href="#1、前端开发最核心技术" class="headerlink" title="1、前端开发最核心技术"></a>1、前端开发最核心技术</h2><p>我们知道，用所谓的网页三剑客已经不能满足需求了，那前端开发究竟要学习什么技术呢？网页最主要由3部分组成：结构、表现和行为。网页现在新的标准是W3C，目前模式是HTML、CSS和JavaScript。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5sdnllc3R1ZHkuY29tL0FwcF9pbWFnZXMvbGVzc29uL2hqLzEtMS0xLnBuZw?x-oss-process=image/format,png"></p><p>前端开发最核心的3个技术</p><h3 id="（1）HTML是什么？"><a href="#（1）HTML是什么？" class="headerlink" title="（1）HTML是什么？"></a>（1）HTML是什么？</h3><p>HTML，全称“Hyper Text Markup Language（超文本标记语言）”，简单来说，网页就是用HTML语言制作的。HTML是一门描述性语言，是一门非常容易入门的语言。</p><h3 id="（2）CSS"><a href="#（2）CSS" class="headerlink" title="（2）CSS"></a>（2）CSS</h3><p>CSS，全称“（层叠样式表）”。以后我们在别的地方看到“层叠样式表”、“CSS样式”，指的就是CSS。</p><h3 id="（3）JavaScript"><a href="#（3）JavaScript" class="headerlink" title="（3）JavaScript"></a>（3）JavaScript</h3><p>JavaScript是一门脚本语言。</p><h2 id="2、前端开发其他技术"><a href="#2、前端开发其他技术" class="headerlink" title="2、前端开发其他技术"></a>2、前端开发其他技术</h2><p>前端技术最核心的是HTML、CSS和JavaScript，但是对于一个真正的前端工程师来说，哪怕你精通这三个，你也不能称为一个真正的“前端工程师”。因为前端技术除了HTML、CSS和JavaScript这三种，还需要学习Ajax、SEO等。</p><p>（1）Ajax</p><p>Ajax，即“Asynchronous Javascript And XML（异步JavaScript和XML）”，是指一种创建交互式网页应用的网页开发技术。</p><p>通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用Ajax）如果需要更新内容，必须重载整个页面。</p><p>Ajax是前后端交互的技术，主要实现在前端。（不懂？！没关系，我们在Ajax教程中会讲解到）</p><p>（2）SEO</p><p>SEO，即“Search Engine Optimization（搜索引擎优化）”。SEO优化是专门利用搜索引擎的搜索规则来提高目前网站在有关搜索引擎内的自然排名的方式（国内常见的搜索引擎有百度、360、搜狗等）。</p><p>简单来说，你建好了网站并不代表你网站就能被搜索引擎搜索到，我们一般使用百度搜索资料时，搜索出来的网页有很多，但是我们一般看了搜索结果的第一、二页就不再往下看了。SEO，就是为了我们的网站能排在搜索结果的前面，这样你的网站才会有流量。你做网站，相信你也是想让你网站有更多人浏览的吧。</p><h1 id="二、基础内容"><a href="#二、基础内容" class="headerlink" title="二、基础内容"></a>二、基础内容</h1><h2 id="1-基础总结"><a href="#1-基础总结" class="headerlink" title="1.基础总结"></a>1.基础总结</h2><p>1、从web1.0到web2.0，网页制作已经变为前端开发了。现在对于前端开发，你要学的不是什么“网页三剑客”，而是“HTML+CSS+JavaScript”；</p><p>2、前端技术核心元素的是HTML、CSS和JavaScript，但是我们还要学习一些Ajax、SEO知识；</p><p>3、前端技术只能开发静态网页，而进一步学习了后端技术，你能开发一个用户交互性更好、功能更加强大的网站；</p><p>4、后端技术有ASP.NET（或PHP）、SQL Server等；</p><p>5、学习路线：HTML入门→CSS入门→HTML进阶→CSS进阶→JavaScript入门→jQuery入门→ASP.NET入门（或PHP入门）→Ajax→ASP.NET进阶（或PHP进阶）；</p><p>6、学习HTML就是学习各种标签，然后针对你想要的内容来使用相应的标签；</p><p>7、HTML标签即“HTML元素”；</p><p>8、HTML基本结构：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5sdnllc3R1ZHkuY29tL0FwcF9pbWFnZXMvbGVzc29uL2hqLzMtMS0xLnBuZw?x-oss-process=image/format,png"></p><h2 id="2-HTML的基本标签"><a href="#2-HTML的基本标签" class="headerlink" title="2.HTML的基本标签"></a>2.HTML的基本标签</h2><h3 id="1-HTML标签"><a href="#1-HTML标签" class="headerlink" title="(1)HTML标签"></a>(1)HTML标签</h3><p>整个网页是从<code>&lt;html&gt;</code>这里开始的，然后到<code>&lt;/html&gt;</code>结束。<br>1.HTML 标签是由尖括号包围的关键词，例如 <code>&lt;html&gt;</code><br>2.HTML 标签通常是成对出现的，例如 <code>&lt;html&gt;</code>和<code>&lt;/html&gt;</code> ，我们称为双标签。标签对中的第一个标签是开始标签，第二个标签是结束标签。<br>3.有些特殊的标签必须是单个标签（极少情况），例如<code>&lt;br /&gt;</code>，我们称为单标签。</p><h3 id="2-head标签"><a href="#2-head标签" class="headerlink" title="(2)head标签"></a>(2)head标签</h3><p>head标签代表页面的“头”，定义一些特殊内容，这些内容往往都是“不可见内容”（在浏览器不可见）。</p><table><thead><tr><th>head内部标签</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;title&gt;</code></td><td>定义网页的标题</td></tr><tr><td><code>&lt;meta&gt;</code></td><td>定义网页的基本信息（供搜索引擎）</td></tr><tr><td><code>&lt;style&gt;</code></td><td>定义CSS样式</td></tr><tr><td><code>&lt;link&gt;</code></td><td>链接外部CSS文件或脚本文件</td></tr><tr><td><code>&lt;script&gt;</code></td><td>定义脚本语言</td></tr><tr><td><code>&lt;base&gt;</code></td><td>定义页面所有链接的基础定位（用得很少）</td></tr></tbody></table><h3 id="3-body标签"><a href="#3-body标签" class="headerlink" title="(3)body标签"></a>(3)body标签</h3><p>body标签代表页面的“身”，定义网页展示内容，这些内容往往都是“可见内容”（在浏览器可见）。</p><p>后续课程讲解的标签都是在<code>&lt;body&gt;</code>标签内部的各种标签。</p><h3 id="4-段落与文字标签"><a href="#4-段落与文字标签" class="headerlink" title="(4) 段落与文字标签"></a>(4) 段落与文字标签</h3><table><thead><tr><th>标签</th><th>语义</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code></td><td>header</td><td>标题</td></tr><tr><td><code>&lt;p&gt;</code></td><td>paragraph</td><td>段落</td></tr><tr><td><code>&lt;br&gt;</code></td><td>break</td><td>换行</td></tr><tr><td><code>&lt;hr&gt;</code></td><td>horizontal rule</td><td>水平线</td></tr><tr><td><code>&lt;span&gt;</code></td><td>span</td><td>区域（行内元素）</td></tr></tbody></table><h3 id="5-文本格式化标签"><a href="#5-文本格式化标签" class="headerlink" title="(5) 文本格式化标签"></a>(5) 文本格式化标签</h3><table><thead><tr><th>标签</th><th>语义</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;strong&gt;</code></td><td>strong（加强）</td><td>加粗</td></tr><tr><td><code>&lt;em&gt;</code></td><td>emphasized（强调）</td><td>斜体</td></tr><tr><td><code>&lt;cite&gt;</code></td><td>cite（引用）</td><td>斜体</td></tr><tr><td><code>&lt;sup&gt;</code></td><td>superscripted（上标）</td><td>上标</td></tr><tr><td><code>&lt;sub&gt;</code></td><td>subscripted（下标）</td><td>下标</td></tr><tr><td><code>&lt;del&gt;</code></td><td>delete（删除）</td><td>删除线</td></tr><tr><td><code>&lt;ins&gt;</code></td><td>下划线</td><td>下划线</td></tr></tbody></table><h3 id="6-盒子标签"><a href="#6-盒子标签" class="headerlink" title="(6) 盒子标签"></a>(6) 盒子标签</h3><ul><li><code>&lt;div&gt;&lt;/div&gt;</code> :一行只能放一个大盒子  </li><li><code>&lt;span&gt;&lt;/span&gt;</code> : 一行可以放多个小盒子</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>今日价格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="7-图像标签"><a href="#7-图像标签" class="headerlink" title="(7) 图像标签"></a>(7) 图像标签</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pink1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是szh<span class="token punctuation">"</span></span>  <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是szh<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ul><li>src是<code>&lt;img&gt;</code>标签的必须属性，它用于指定图像文件的路径和文件</li></ul><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本（当图片不能显示时候显示的文字）</td></tr><tr><td>title</td><td>文本</td><td>提示文本（鼠标放到图像上，显示的文字）</td></tr></tbody></table><h3 id="8-路径"><a href="#8-路径" class="headerlink" title="(8) 路径"></a>(8) 路径</h3><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图形文件位于 HTML 文件同一级 如<code>&lt;img src="1.png"&gt;</code></td></tr><tr><td>下一级路径</td><td>/</td><td>图形文件位于 HTML 文件下一级 如 <code>&lt;img src="images/1.png"&gt;</code></td></tr><tr><td>上一级路径</td><td>../</td><td>图形文件位于 HTML 文件上一级 如 <code>&lt;img src="../1.png"&gt;</code></td></tr></tbody></table><ul><li>绝对路径：是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。  <h3 id="9-超链接标签"><a href="#9-超链接标签" class="headerlink" title="(9) 超链接标签"></a>(9) 超链接标签</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本或图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址。<mark>必须属性</mark></td></tr><tr><td>target</td><td>用于指定连接页面的打开方式。<code>_self</code>为默认值，<code>_blank</code>为在新窗口中打开</td></tr></tbody></table><ul><li>如果 href 里面地址是一个文件或者压缩包，会下载这个文件  <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img.zip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h3 id="10-锚点链接"><a href="#10-锚点链接" class="headerlink" title="(10) 锚点链接"></a>(10) 锚点链接</h3>作用：点击链接，可以快速定位到页面中的某个位置  </li><li>在链接文本的<code>href</code>属性中，设置属性值为 <strong>#名字</strong>  </li><li>找到目标位置标签，里面添加一个<strong>id属性=刚才的名字</strong>  <h3 id="11-注释"><a href="#11-注释" class="headerlink" title="(11) 注释"></a>(11) 注释</h3></li><li>注释快捷键为 <code>ctrl + / </code> </li><li>注释以 <code>&lt;!-- </code>开始，以<code>--&gt;</code> 结束   <pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--  注释语句    --></span></code></pre><h3 id="12-特殊字符"><a href="#12-特殊字符" class="headerlink" title="(12) 特殊字符"></a>(12) 特殊字符</h3><img src="https://img-blog.csdnimg.cn/d387d9bdf9ba47acbc0a9173fc7bfb5d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center"></li></ul><p>重点记住：<mark>空格、大于号、小于号</mark>这三个，其余的使用的很少，如果需要使用回头查阅即可  </p><h3 id="13-表格标签"><a href="#13-表格标签" class="headerlink" title="(13) 表格标签"></a>(13) 表格标签</h3><ul><li><code>table</code> 用来定义表格的标签  </li><li><code>tr</code> 用来定义表格中的行，必须嵌套在<code>&lt;table&gt;&lt;/table&gt;</code> 标签中  </li><li><code>td</code>用来定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code> 标签中  </li><li><code>th</code> 用来定义表格中的表头，表头单元格里面的内容加粗居中显示  <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>szh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>szh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>szh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="14-表格属性"><a href="#14-表格属性" class="headerlink" title="(14) 表格属性"></a>(14) 表格属性</h3>表格标签的属性实际开发并不常用，因为基本都是通过后面的CSS来设置的  <table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left,center,right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td>border</td><td>1或者’’ ‘’</td><td>规定表格单元是否拥有边框，默认为” “，表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认2像素</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格的宽度</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h4>为了更好的表示表格的语义，可以将表格分割成 表格头部 和表格主体两大部分  </li><li>用 <code>&lt;thead&gt;&lt;/thead&gt;</code> 标签表示表格的头部区域，<code>&lt;thead&gt;</code>内部必须拥有<code>&lt;tr&gt;</code>标签，一般是位于第一行</li><li>用<code>&lt;tbody&gt;&lt;/tbody&gt;</code> 标签表示表格的主体区域，主要是用于放数据本体</li><li>以上标签都是放在<code>&lt;table&gt;&lt;/table&gt;</code>标签中<br><img src="https://img-blog.csdnimg.cn/b20e2df070ce41b8ba0d5ea101efd153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center">  <h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4></li><li>跨行合并：<code>rowspan=“合并单元格的个数”</code></li><li>跨列合并：<code>colspan="合并单元格的个数"</code><pre class=" language-html"><code class="language-html">&lt;td colspan = "2"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></code></pre><h3 id="15-列表标签"><a href="#15-列表标签" class="headerlink" title="(15) 列表标签"></a>(15) 列表标签</h3></li><li>无序列表：<code>&lt;ul&gt;</code></li><li>有序列表：<code>&lt;ol&gt;</code></li><li>自定义列表：<code>&lt;dl&gt;</code></li></ul><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;ul&gt;&lt;/ul&gt;</code></td><td>无序列表</td><td>里面只能包含li，没有顺序。li里面可以包含任何标签</td></tr><tr><td><code>&lt;ol&gt;&lt;/ol&gt;</code></td><td>有序列表</td><td>里面只能包含li，有顺序</td></tr><tr><td><code>&lt;dl&gt;&lt;/dl&gt;</code></td><td>自定义列表</td><td>里面只能包含dt和dd，dt和dd里面可以放任何标签</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>关注我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>新浪微博<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><h3 id="16-表单标签"><a href="#16-表单标签" class="headerlink" title="(16) 表单标签"></a>(16) 表单标签</h3><p>一个完整的表单通常由<strong>表单域，表单控件（表单元素）和提示信息</strong>3部分组成<br><img src="https://img-blog.csdnimg.cn/ccddea3e9d4b42b0b4ac8713741bde00.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center">  </p><h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h4><ul><li><mark>表单域</mark>是一个包含表单元素的区域</li><li><code>&lt;form&gt;&lt;/from&gt;</code>标签用于定义表单域，会把它范围内的表单元素信息提交给服务器</li></ul><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单数据的提交方式，其取值为get或post</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url地址<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交方式<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表单域的名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h4 id="表单控件-表单元素"><a href="#表单控件-表单元素" class="headerlink" title="表单控件(表单元素)"></a>表单控件(表单元素)</h4><p>①input输入表单元素</p><ul><li><code>input</code>输入表单元素</li><li><code>input</code>是个单标签，<code>type</code> 属性设置不同的属性用来指定不同的控件类型(文本字段、复选框、单选按钮、按钮等)</li></ul><p><mark>type</mark> 属性的属性值及描述如下：  </p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击按钮(多数情况下，用于通过JavaScript启动脚本)</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义输入字段和”浏览”按钮，供文件上传。</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段</td></tr><tr><td>image</td><td>定义图像形式的提交按钮</td></tr><tr><td>password</td><td>定义密码字段。该字段中的字符被掩码</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>reset</td><td>定义重置按钮。重置按钮会清楚表单中的所有数据。</td></tr><tr><td>submit</td><td>定义提交按钮。提交按钮会把表单数据发送到服务器。</td></tr><tr><td>text</td><td>定义单行的输入字段，用户可在其中输入文本。默认宽度为</td></tr></tbody></table><p>除 type 属性外，<code>&lt;input&gt;</code> 标签还有很多其他很多属性，其常用属性如下：  </p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>由用户自定义</td><td>定义 input 元素的名称</td></tr><tr><td>value</td><td>由用户自定义</td><td>规定 input 元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定此 input 元素首次加载时应当被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中字符的最大长度</td></tr></tbody></table><ul><li><mark>name</mark> 和 <mark>value</mark> 是每个表单元素都有的属性值，主要给后端人员使用。</li><li>name 是表单元素的名字，要求 <mark>单选框和复选框要有相同的name值</mark></li><li><mark>checked 属性主要针对于单选框和复选框</mark>，主要作用是一打开页面，就可以默认选中某个表单元素</li></ul><p>②文本框与密码框  </p><ul><li><code>type</code> 属性设置为 <mark>text</mark> 是文本框</li><li><code>type</code> 属性设置为 <mark>password</mark> 是密码框 <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>      用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>       密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>③单选框和复选框  </li><li><code>type</code> 属性设置为 <mark>radio</mark> 是单选框</li><li><code>type</code> 属性设置为 <mark>checkbox</mark> 是复选框  </li><li><code>name</code> 是表单元素的名字，要求 <mark>单选框和复选框要有相同的name值</mark>  <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>      用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>       密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- radio是单选框，可以多选一 --></span>      性别：男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- checkbox是多选框，可以多选 --></span>      爱好：吃饭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  睡觉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   打游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>④name和value属性  </li><li><mark>name</mark>属性：当前input表单的名字，后台可以通过这个name属性找到这个表单，name的主要作用就是用于区别不同的表单  <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>      用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>       密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- radio是单选框，可以多选一 --></span>      <span class="token comment" spellcheck="true">&lt;!-- name是表单元素的名字，这里的性别单选按钮必须有相同的名字name，才能实现多选一 --></span>      性别：男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- checkbox是多选框，可以多选 --></span>      爱好：吃饭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>habby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>吃饭<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  睡觉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>habby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>睡觉<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   打游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>habby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>打游戏<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li>注意：<mark>单选框和复选框name必须一致，value可以不一样</mark></li></ul><p>⑤checked和maxlength</p><ul><li>单选按钮和复选框可以设置checked 属性</li><li>当页面打开时候就可以默认选中这个按钮</li><li>单选框只能给其中一个加checked，复选框可以多加</li></ul><pre class=" language-html"><code class="language-html">性别:男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li><code>maxlength</code>:规定最多输入多少个字符</li></ul><p>⑥submit和reset</p><ul><li><code>type</code> 属性设置为<mark>submit</mark>：提交按钮会把表单数据发送到服务器</li><li><code>type</code> 属性设置为<mark>reset</mark>：重置按钮会清除表单中的所有数据</li></ul><p>⑦button和文件域</p><ul><li><code>type</code> 属性设置为<mark>button</mark>：是一个按钮</li><li><code>type</code> 属性设置为<mark>file</mark>：是一个文件域，可以上传文件<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取短信验证码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 文件域：上传文件使用的 --></span>  上传头像：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>⑧label</li><li><code>label</code>标签用于绑定一个表单元素，当点击<code>&lt;lable&gt;</code>标签内的文本时，浏览器就会自动将焦点(光标)转到表单元素上，用来增加用户体验</li><li><code>label</code>标签的 <mark>for属性</mark> 应当与相关元素的<mark>id 属性</mark>相同  <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 男 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h4 id="select下拉表单元素"><a href="#select下拉表单元素" class="headerlink" title="select下拉表单元素"></a>select下拉表单元素</h4></li><li>下拉表单元素</li><li><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code></li><li>在<code>&lt;option&gt;</code>中定义 <code>selected="selected"</code> 时，当前项即为默认选中项。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="textarea文本域元素"><a href="#textarea文本域元素" class="headerlink" title="textarea文本域元素"></a>textarea文本域元素</h4></li><li>用于定义多行文本输入的控件<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">></span></span>  文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></code></pre></li><li><code>cols</code> = “每行中的字符数” ， <code>rows</code> = “显示的函数”，我们在实际开发中不会使用，都是用CSS来改变大小</li></ul><h3 id="17-表单元素总结"><a href="#17-表单元素总结" class="headerlink" title="(17) 表单元素总结"></a>(17) 表单元素总结</h3><p>表单元素我们学了三大组  </p><ul><li><mark>input</mark>输入表单元素</li><li><mark>select</mark>下拉表单元素</li><li><mark>textarea</mark>文本域表单元素</li></ul><p>这三组表单元素都应该包含在 <mark>form</mark> 表单域里面，并且有 name 属性  </p><h1 id="三、HTML5提高"><a href="#三、HTML5提高" class="headerlink" title="三、HTML5提高"></a>三、HTML5提高</h1><ul><li>HTML5的新增特性主要是针对于以前的不足，增加了一些新的标签，新的表单和新的表单属性等。</li><li>这些新特性都有兼容性问题，基本都是IE9+以上版本的浏览器才支持，如果不考虑兼容性问题，可以大量使用这些新特性</li><li>HTML5有更大的技术集，允许更多样化和强大的网站和应用程序。增加了新特性：语义特性，本地存储特性，设备兼容特性，连接特性，网页多媒体特性，三维、图形及特效特性，性能与集成特性，CSS3特性。这个集合有时称为HTML5和朋友，通常缩写为HTML5</li></ul><h2 id="1-新增语义化标签"><a href="#1-新增语义化标签" class="headerlink" title="(1) 新增语义化标签"></a>(1) 新增语义化标签</h2><p>以前布局，我们基本用div 来做。 div 对于搜索引擎来说，是没有语义的。</p><p>新增语义化标签如下：<br><img src="https://img-blog.csdnimg.cn/07df0702684841339d1b4884b4bdc677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center">  </p><ul><li>&lt; header &gt; :头部标签</li><li>&lt; nav &gt;: 导航标签</li><li>&lt; article &gt;： 内容标签</li><li>&lt; section &gt;:定义文档某个区域</li><li>&lt; aside &gt;:侧边栏标签</li><li>&lt; footer &gt;: 尾部标签</li></ul><p>–注意：  </p><ul><li>这种语义化标准主要是针对<strong>搜索引擎</strong>的</li><li>这些新标签页面中可以使用<strong>多次</strong></li><li>在IE9中，需要把这些元素转换为<strong>块级元素</strong></li><li>其实，移动端更喜欢使用这些标签 <pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">header, nav </span><span class="token punctuation">{</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>          <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>          <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>          <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px auto<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">section </span><span class="token punctuation">{</span>          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>          <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>头部标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>导航栏标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>某个区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="2-新增视频标签"><a href="#2-新增视频标签" class="headerlink" title="(2) 新增视频标签"></a>(2) 新增视频标签</h2><h3 id="2-1-video视频"><a href="#2-1-video视频" class="headerlink" title="2.1 video视频"></a>2.1 video视频</h3><p><img src="https://img-blog.csdnimg.cn/fdfab228a4164a33a69d417ae5a688bb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center">  </p><p>语法：  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文件地址<span class="token punctuation">"</span></span>   <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">video </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>media/mi.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoplay<span class="token punctuation">"</span></span> <span class="token attr-name">muted</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>muted<span class="token punctuation">"</span></span>  <span class="token attr-name">loop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loop<span class="token punctuation">"</span></span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>media/mi9.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>视频就绪自动播放(谷歌浏览器需要添加muted来解决自动播放问题)</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>width</td><td>pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>pixels(像素)</td><td>设置播放器高度</td></tr><tr><td>loop</td><td>loop</td><td>播放完是否继续播放该视频,循环播放</td></tr><tr><td>preload</td><td>auto(预先加载视频)  none(不应加载视频)</td><td>规定是否预加载视频(如果有了autoplay 就忽略该属性)</td></tr><tr><td>src</td><td>url</td><td>视频url的地址</td></tr><tr><td>poster</td><td>lmgurl</td><td>加载等待的画面图片</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><ul><li>一般不显示controls，让视频循环播放</li></ul><h3 id="2-2-audio音频"><a href="#2-2-audio音频" class="headerlink" title="2.2 audio音频"></a>2.2 audio音频</h3><p><img src="https://img-blog.csdnimg.cn/f26b894dc30e4d24a193e9c18caa0c58.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center">  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文件地址<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>media/music.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoplay<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放</td></tr><tr><td>src</td><td>url</td><td>要播放的音频的url</td></tr></tbody></table><h3 id="2-3总结"><a href="#2-3总结" class="headerlink" title="2.3总结"></a>2.3总结</h3><ol><li>音频标签和视频标签使用方式基本一致</li><li>浏览器支持情况不同</li><li><strong>谷歌浏览器把音频和视频自动播放禁止了</strong></li><li>我们可以给视频标签添加<mark>muted</mark>属性来静音播放视频，音频不可以(可以通过JavaScript解决)</li><li>视频标签是重点，我们经常设置自动播放，不适用controls控件，循环和设置大小属性</li></ol><h2 id="3-新增input类型"><a href="#3-新增input类型" class="headerlink" title="(3) 新增input类型"></a>(3) 新增input类型</h2><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>type=“email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type=“url”</td><td>限制用户输入必须为URL类型</td></tr><tr><td>type=“date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=“time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=“month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=“week”</td><td>限制用户输入必须为周类型</td></tr><tr><td><strong>type=”number”</strong></td><td><strong>限制用户输入必须为数字类型</strong></td></tr><tr><td><strong>type=”tel”</strong></td><td><strong>手机号码</strong></td></tr><tr><td><strong>type=”search”</strong></td><td><strong>搜索框</strong></td></tr><tr><td>type=“color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><ul><li>重点记住： <strong>number tel search</strong> 这三个</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 我们验证的时候必须添加form表单域 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>邮箱: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网址: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>日期: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>时间: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>数量: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>手机号码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>搜索: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>颜色: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 当我们点击提交按钮就可以验证表单了 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="4-新增表单属性"><a href="#4-新增表单属性" class="headerlink" title="(4) 新增表单属性"></a>(4) 新增表单属性</h2><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td>placeholder</td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>autocomplete</td><td>off/on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项，默认已经打开。如autocomplete=“on” ,关闭autocomplete=“off”，需要放在表单内，同时加上name属性，同时成功提交</td></tr><tr><td>multiple</td><td>multiple</td><td>可以多选文件提示</td></tr></tbody></table><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sear<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pink老师<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token attr-name">autocommplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><ul><li>可以通过以下设置方式修改placeholder里面的字体颜色</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">input<span class="token pseudo-element">::placeholder</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h1 id="以上就是HTML笔记的全部内容啦"><a href="#以上就是HTML笔记的全部内容啦" class="headerlink" title="以上就是HTML笔记的全部内容啦!"></a>以上就是HTML笔记的全部内容啦!</h1><p>放首歌奖励自己</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1824020871&amp;auto=0&amp;height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章：markdown编写规范</title>
      <link href="/2022/02/27/wo-de-di-yi-pian-bo-ke-wen-zhang/"/>
      <url>/2022/02/27/wo-de-di-yi-pian-bo-ke-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown编写规范"><a href="#markdown编写规范" class="headerlink" title="markdown编写规范"></a>markdown编写规范</h1><span id="more"></span><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>这是第一个段落内容</p><p>这是第二个段落内容  </p><h2 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h2><blockquote><p>这是一段引用段落，将会被高亮显示  </p></blockquote><p>Markdown支持同时强调引用多个段落，可以按照如下方式书写： </p><blockquote><p>这是一段引用段落，将会被高亮显示</p><p>这也是一段引用段落，也会被高亮显示</p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="www.baidu.com" title="百度">百度</a></p><p><a href="www.baidu.com" title="百度">百度</a></p><p>点击返回<a href="#%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98">一级标题</a></p><p>“”内为浮动提示文字，一般情况可以不填写</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://img1.baidu.com/it/u=2519912129,4264910682&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=500" alt="猫猫"></p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表使用<em>、+、-标识，但是一般使用</em>来标识无序列表</p><ul><li>无序列表项</li><li>无序列表项</li><li>无序列表项</li></ul><p>Markdown支持多级列表嵌套，但是建议一般不使用超过两级列表，另外建议两级列表从缩进3个空格开始(适用于无序列表)，如下所示：</p><ul><li>无序列表项<ul><li>第二层列表项</li><li>第二层列表项</li></ul></li><li>无序列表项</li><li>无序列表项</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表使用数字.标识</p><ol><li>有序列表项1</li><li>有序列表项2</li><li>有序列表项3</li></ol><p>嵌套表示：</p><ol><li>有序列表项1<ol><li>有序列表项11</li><li>有序列表项12</li></ol></li><li>有序列表项2</li></ol><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><hr><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><em>这里包含斜体内容</em></p><p><strong>这里包含加粗内容</strong></p><h2 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h2><table><thead><tr><th>表头</th><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>内容</td><td>内容</td><td>内容</td></tr><tr><td>内容</td><td>内容</td><td>内容</td></tr><tr><td>内容</td><td>内容</td><td>内容</td></tr></tbody></table><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1824020871&amp;auto=0&amp;height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 教程 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/06/hello-world/"/>
      <url>/2020/07/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
